{
  "swagger": "2.0",
  "info": {
    "title": "Kubeapps API",
    "description": "[![CircleCI](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main.svg?style=svg)](https://circleci.com/gh/vmware-tanzu/kubeapps/tree/main)\n \n [Kubeapps](https://github.com/vmware-tanzu/kubeapps) is a web-based UI for deploying and managing applications in Kubernetes clusters.\n \n Note: this API documentation is still in an initial stage and is subject to change. Before coupling to it, please [drop us an issue](https://github.com/vmware-tanzu/kubeapps/issues/new/choose) or reach us [via Slack](https://kubernetes.slack.com/messages/kubeapps) to know more about your use case and see how we can assist you.\n #### Developer Documentation\n - The [Kubeapps architecture overview](https://github.com/vmware-tanzu/kubeapps/blob/main/site/content/docs/latest/background/architecture.md).\n - The [Kubeapps Developer Documentation](https://github.com/vmware-tanzu/kubeapps/blob/main/site/content/docs/latest/reference/developer/README.md) for instructions on setting up the developer environment for developing on Kubeapps and its components.\n - The [Kubeapps Build Guide](https://github.com/vmware-tanzu/kubeapps/blob/main/site/content/docs/latest/reference/developer/build.md) for instructions on setting up the build environment and building Kubeapps from source.\n",
    "termsOfService": "https://github.com/vmware-tanzu/kubeapps/blob/main/LICENSE",
    "version": "0.1.0",
    "license": {
      "name": "Apache-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "PluginsService"
    },
    {
      "name": "PackagesService"
    },
    {
      "name": "RepositoriesService"
    },
    {
      "name": "FluxV2PackagesService"
    },
    {
      "name": "FluxV2RepositoriesService"
    },
    {
      "name": "HelmPackagesService"
    },
    {
      "name": "HelmRepositoriesService"
    },
    {
      "name": "KappControllerPackagesService"
    },
    {
      "name": "KappControllerRepositoriesService"
    },
    {
      "name": "ResourcesService"
    }
  ],
  "host": "127.0.0.1:8080",
  "basePath": "/apis",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/core/packages/v1alpha1/availablepackages": {
      "get": {
        "operationId": "PackagesService_GetAvailablePackageSummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageSummariesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterOptions.query",
            "description": "Text query. Text query for the request",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterOptions.categories",
            "description": "Categories. Collection of categories for the request",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filterOptions.repositories",
            "description": "Repositories. Collection of repositories where the packages belong to",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filterOptions.pkgVersion",
            "description": "Package version. Package version for the request",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterOptions.appVersion",
            "description": "App version. Packaged app version for the request",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageToken",
            "description": "Page token. The client uses this field to request a specific page of the list results.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageSize",
            "description": "Page size. Clients use this field to specify the maximum number of results to be\nreturned by the server. The server may further constrain the maximum number\nof results returned in a single page. If the page_size is 0, the server\nwill decide the number of results to be returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "PackagesService"
        ]
      }
    },
    "/core/packages/v1alpha1/availablepackages/plugin/{availablePackageRef.plugin.name}/{availablePackageRef.plugin.version}/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}": {
      "get": {
        "operationId": "PackagesService_GetAvailablePackageDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageDetailResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "availablePackageRef.plugin.name",
            "description": "Plugin name\n\nThe name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.plugin.version",
            "description": "Plugin version\n\nThe version of the plugin, such as v1alpha1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.identifier",
            "description": "Available package identifier\n\nThe fully qualified identifier for the available package\n(ie. a unique name for the context). For some packaging systems\n(particularly those where an available package is backed by a CR) this\nwill just be the name, but for others such as those where an available\npackage is not backed by a CR (eg. standard helm) it may be necessary\nto include the repository in the name or even the repo namespace\nto ensure this is unique.\nFor example two helm repositories can define\nan \"apache\" chart that is available globally, the names would need to\nencode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\").",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "pkgVersion",
            "description": "Optional specific version (or version reference) to request.\nBy default the latest version (or latest version matching the reference)\nwill be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PackagesService"
        ]
      }
    },
    "/core/packages/v1alpha1/availablepackages/plugin/{availablePackageRef.plugin.name}/{availablePackageRef.plugin.version}/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}/versions": {
      "get": {
        "operationId": "PackagesService_GetAvailablePackageVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageVersionsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "availablePackageRef.plugin.name",
            "description": "Plugin name\n\nThe name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.plugin.version",
            "description": "Plugin version\n\nThe version of the plugin, such as v1alpha1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.identifier",
            "description": "Available package identifier\n\nThe fully qualified identifier for the available package\n(ie. a unique name for the context). For some packaging systems\n(particularly those where an available package is backed by a CR) this\nwill just be the name, but for others such as those where an available\npackage is not backed by a CR (eg. standard helm) it may be necessary\nto include the repository in the name or even the repo namespace\nto ensure this is unique.\nFor example two helm repositories can define\nan \"apache\" chart that is available globally, the names would need to\nencode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\").",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "pkgVersion",
            "description": "Optional version reference for which full version history is required.  By\ndefault a summary of versions is returned as outlined in the response.\nPlugins can choose not to implement this and provide the summary only, it\nis provided for completeness only.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PackagesService"
        ]
      }
    },
    "/core/packages/v1alpha1/installedpackages": {
      "get": {
        "operationId": "PackagesService_GetInstalledPackageSummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstalledPackageSummariesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageToken",
            "description": "Page token. The client uses this field to request a specific page of the list results.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageSize",
            "description": "Page size. Clients use this field to specify the maximum number of results to be\nreturned by the server. The server may further constrain the maximum number\nof results returned in a single page. If the page_size is 0, the server\nwill decide the number of results to be returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "PackagesService"
        ]
      },
      "post": {
        "operationId": "PackagesService_CreateInstalledPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateInstalledPackageResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateInstalledPackageRequest"
            }
          }
        ],
        "tags": [
          "PackagesService"
        ]
      }
    },
    "/core/packages/v1alpha1/installedpackages/plugin/{installedPackageRef.plugin.name}/{installedPackageRef.plugin.version}/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}": {
      "get": {
        "operationId": "PackagesService_GetInstalledPackageDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstalledPackageDetailResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.plugin.name",
            "description": "Plugin name\n\nThe name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.version",
            "description": "Plugin version\n\nThe version of the plugin, such as v1alpha1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PackagesService"
        ]
      },
      "delete": {
        "operationId": "PackagesService_DeleteInstalledPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1DeleteInstalledPackageResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.plugin.name",
            "description": "Plugin name\n\nThe name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.version",
            "description": "Plugin version\n\nThe version of the plugin, such as v1alpha1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PackagesService"
        ]
      },
      "put": {
        "operationId": "PackagesService_UpdateInstalledPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateInstalledPackageResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.plugin.name",
            "description": "Plugin name\n\nThe name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.version",
            "description": "Plugin version\n\nThe version of the plugin, such as v1alpha1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateInstalledPackageRequest"
            }
          }
        ],
        "tags": [
          "PackagesService"
        ]
      }
    },
    "/core/packages/v1alpha1/installedpackages/plugin/{installedPackageRef.plugin.name}/{installedPackageRef.plugin.version}/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}/resourcerefs": {
      "get": {
        "operationId": "PackagesService_GetInstalledPackageResourceRefs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstalledPackageResourceRefsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.plugin.name",
            "description": "Plugin name\n\nThe name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.version",
            "description": "Plugin version\n\nThe version of the plugin, such as v1alpha1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PackagesService"
        ]
      }
    },
    "/core/packages/v1alpha1/repositories": {
      "get": {
        "operationId": "RepositoriesService_GetPackageRepositorySummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetPackageRepositorySummariesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RepositoriesService"
        ]
      },
      "post": {
        "operationId": "RepositoriesService_AddPackageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1AddPackageRepositoryResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1AddPackageRepositoryRequest"
            }
          }
        ],
        "tags": [
          "RepositoriesService"
        ]
      }
    },
    "/core/packages/v1alpha1/repositories/plugin/{packageRepoRef.plugin.name}/{packageRepoRef.plugin.version}/c/{packageRepoRef.context.cluster}/ns/{packageRepoRef.context.namespace}/{packageRepoRef.identifier}": {
      "get": {
        "operationId": "RepositoriesService_GetPackageRepositoryDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetPackageRepositoryDetailResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "packageRepoRef.plugin.name",
            "description": "Plugin name\n\nThe name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.plugin.version",
            "description": "Plugin version\n\nThe version of the plugin, such as v1alpha1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.identifier",
            "description": "The fully qualified identifier for the repository\n(i.e. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "RepositoriesService"
        ]
      },
      "delete": {
        "operationId": "RepositoriesService_DeletePackageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1DeletePackageRepositoryResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "packageRepoRef.plugin.name",
            "description": "Plugin name\n\nThe name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.plugin.version",
            "description": "Plugin version\n\nThe version of the plugin, such as v1alpha1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.identifier",
            "description": "The fully qualified identifier for the repository\n(i.e. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "RepositoriesService"
        ]
      },
      "put": {
        "operationId": "RepositoriesService_UpdatePackageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdatePackageRepositoryResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "packageRepoRef.plugin.name",
            "description": "Plugin name\n\nThe name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.plugin.version",
            "description": "Plugin version\n\nThe version of the plugin, such as v1alpha1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.identifier",
            "description": "The fully qualified identifier for the repository\n(i.e. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdatePackageRepositoryRequest"
            }
          }
        ],
        "tags": [
          "RepositoriesService"
        ]
      }
    },
    "/core/plugins/v1alpha1/configured-plugins": {
      "get": {
        "summary": "GetConfiguredPlugins returns a map of short and longnames for the configured plugins.",
        "operationId": "PluginsService_GetConfiguredPlugins",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetConfiguredPluginsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "PluginsService"
        ]
      }
    },
    "/plugins/fluxv2/packages/v1alpha1/availablepackages": {
      "get": {
        "summary": "GetAvailablePackageSummaries returns the available packages managed by the 'fluxv2' plugin",
        "operationId": "FluxV2PackagesService_GetAvailablePackageSummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageSummariesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterOptions.query",
            "description": "Text query. Text query for the request",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterOptions.categories",
            "description": "Categories. Collection of categories for the request",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filterOptions.repositories",
            "description": "Repositories. Collection of repositories where the packages belong to",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filterOptions.pkgVersion",
            "description": "Package version. Package version for the request",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterOptions.appVersion",
            "description": "App version. Packaged app version for the request",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageToken",
            "description": "Page token. The client uses this field to request a specific page of the list results.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageSize",
            "description": "Page size. Clients use this field to specify the maximum number of results to be\nreturned by the server. The server may further constrain the maximum number\nof results returned in a single page. If the page_size is 0, the server\nwill decide the number of results to be returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "FluxV2PackagesService"
        ]
      }
    },
    "/plugins/fluxv2/packages/v1alpha1/availablepackages/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}": {
      "get": {
        "summary": "GetAvailablePackageDetail returns the package metadata managed by the 'fluxv2' plugin",
        "operationId": "FluxV2PackagesService_GetAvailablePackageDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageDetailResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "availablePackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.identifier",
            "description": "Available package identifier\n\nThe fully qualified identifier for the available package\n(ie. a unique name for the context). For some packaging systems\n(particularly those where an available package is backed by a CR) this\nwill just be the name, but for others such as those where an available\npackage is not backed by a CR (eg. standard helm) it may be necessary\nto include the repository in the name or even the repo namespace\nto ensure this is unique.\nFor example two helm repositories can define\nan \"apache\" chart that is available globally, the names would need to\nencode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\").",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "availablePackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pkgVersion",
            "description": "Optional specific version (or version reference) to request.\nBy default the latest version (or latest version matching the reference)\nwill be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FluxV2PackagesService"
        ]
      }
    },
    "/plugins/fluxv2/packages/v1alpha1/availablepackages/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}/versions": {
      "get": {
        "summary": "GetAvailablePackageVersions returns the package versions managed by the 'fluxv2' plugin",
        "operationId": "FluxV2PackagesService_GetAvailablePackageVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageVersionsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "availablePackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.identifier",
            "description": "Available package identifier\n\nThe fully qualified identifier for the available package\n(ie. a unique name for the context). For some packaging systems\n(particularly those where an available package is backed by a CR) this\nwill just be the name, but for others such as those where an available\npackage is not backed by a CR (eg. standard helm) it may be necessary\nto include the repository in the name or even the repo namespace\nto ensure this is unique.\nFor example two helm repositories can define\nan \"apache\" chart that is available globally, the names would need to\nencode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\").",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "availablePackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pkgVersion",
            "description": "Optional version reference for which full version history is required.  By\ndefault a summary of versions is returned as outlined in the response.\nPlugins can choose not to implement this and provide the summary only, it\nis provided for completeness only.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FluxV2PackagesService"
        ]
      }
    },
    "/plugins/fluxv2/packages/v1alpha1/installedpackages": {
      "get": {
        "summary": "GetInstalledPackageSummaries returns the installed packages managed by the 'fluxv2' plugin",
        "operationId": "FluxV2PackagesService_GetInstalledPackageSummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstalledPackageSummariesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageToken",
            "description": "Page token. The client uses this field to request a specific page of the list results.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageSize",
            "description": "Page size. Clients use this field to specify the maximum number of results to be\nreturned by the server. The server may further constrain the maximum number\nof results returned in a single page. If the page_size is 0, the server\nwill decide the number of results to be returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "FluxV2PackagesService"
        ]
      },
      "post": {
        "summary": "CreateInstalledPackage creates an installed package based on the request.",
        "operationId": "FluxV2PackagesService_CreateInstalledPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateInstalledPackageResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateInstalledPackageRequest"
            }
          }
        ],
        "tags": [
          "FluxV2PackagesService"
        ]
      }
    },
    "/plugins/fluxv2/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}": {
      "get": {
        "summary": "GetInstalledPackageDetail returns the requested installed package managed by the 'fluxv2' plugin",
        "operationId": "FluxV2PackagesService_GetInstalledPackageDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstalledPackageDetailResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FluxV2PackagesService"
        ]
      },
      "delete": {
        "summary": "DeleteInstalledPackage deletes an installed package based on the request.",
        "operationId": "FluxV2PackagesService_DeleteInstalledPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1DeleteInstalledPackageResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FluxV2PackagesService"
        ]
      },
      "put": {
        "summary": "UpdateInstalledPackage updates an installed package based on the request.",
        "operationId": "FluxV2PackagesService_UpdateInstalledPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateInstalledPackageResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateInstalledPackageRequest"
            }
          }
        ],
        "tags": [
          "FluxV2PackagesService"
        ]
      }
    },
    "/plugins/fluxv2/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}/resourcerefs": {
      "get": {
        "summary": "GetInstalledPackageResourceRefs returns the references for the Kubernetes\nresources created by an installed package.",
        "operationId": "FluxV2PackagesService_GetInstalledPackageResourceRefs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstalledPackageResourceRefsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FluxV2PackagesService"
        ]
      }
    },
    "/plugins/fluxv2/packages/v1alpha1/repositories": {
      "get": {
        "operationId": "FluxV2RepositoriesService_GetPackageRepositorySummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetPackageRepositorySummariesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FluxV2RepositoriesService"
        ]
      },
      "post": {
        "summary": "AddPackageRepository add an existing package repository to the set of ones already managed by the\n'fluxv2' plugin",
        "operationId": "FluxV2RepositoriesService_AddPackageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1AddPackageRepositoryResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1AddPackageRepositoryRequest"
            }
          }
        ],
        "tags": [
          "FluxV2RepositoriesService"
        ]
      }
    },
    "/plugins/fluxv2/packages/v1alpha1/repositories/c/{packageRepoRef.context.cluster}/ns/{packageRepoRef.context.namespace}/{packageRepoRef.identifier}": {
      "get": {
        "operationId": "FluxV2RepositoriesService_GetPackageRepositoryDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetPackageRepositoryDetailResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "packageRepoRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.identifier",
            "description": "The fully qualified identifier for the repository\n(i.e. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "packageRepoRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "packageRepoRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FluxV2RepositoriesService"
        ]
      },
      "delete": {
        "operationId": "FluxV2RepositoriesService_DeletePackageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1DeletePackageRepositoryResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "packageRepoRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.identifier",
            "description": "The fully qualified identifier for the repository\n(i.e. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "packageRepoRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "packageRepoRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FluxV2RepositoriesService"
        ]
      },
      "put": {
        "operationId": "FluxV2RepositoriesService_UpdatePackageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdatePackageRepositoryResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "packageRepoRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.identifier",
            "description": "The fully qualified identifier for the repository\n(i.e. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdatePackageRepositoryRequest"
            }
          }
        ],
        "tags": [
          "FluxV2RepositoriesService"
        ]
      }
    },
    "/plugins/helm/packages/v1alpha1/availablepackages": {
      "get": {
        "summary": "GetAvailablePackageSummaries returns the available packages managed by the 'helm' plugin",
        "operationId": "HelmPackagesService_GetAvailablePackageSummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageSummariesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterOptions.query",
            "description": "Text query. Text query for the request",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterOptions.categories",
            "description": "Categories. Collection of categories for the request",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filterOptions.repositories",
            "description": "Repositories. Collection of repositories where the packages belong to",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filterOptions.pkgVersion",
            "description": "Package version. Package version for the request",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterOptions.appVersion",
            "description": "App version. Packaged app version for the request",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageToken",
            "description": "Page token. The client uses this field to request a specific page of the list results.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageSize",
            "description": "Page size. Clients use this field to specify the maximum number of results to be\nreturned by the server. The server may further constrain the maximum number\nof results returned in a single page. If the page_size is 0, the server\nwill decide the number of results to be returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "HelmPackagesService"
        ]
      }
    },
    "/plugins/helm/packages/v1alpha1/availablepackages/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}": {
      "get": {
        "summary": "GetAvailablePackageDetail returns the package details managed by the 'helm' plugin",
        "operationId": "HelmPackagesService_GetAvailablePackageDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageDetailResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "availablePackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.identifier",
            "description": "Available package identifier\n\nThe fully qualified identifier for the available package\n(ie. a unique name for the context). For some packaging systems\n(particularly those where an available package is backed by a CR) this\nwill just be the name, but for others such as those where an available\npackage is not backed by a CR (eg. standard helm) it may be necessary\nto include the repository in the name or even the repo namespace\nto ensure this is unique.\nFor example two helm repositories can define\nan \"apache\" chart that is available globally, the names would need to\nencode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\").",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "availablePackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pkgVersion",
            "description": "Optional specific version (or version reference) to request.\nBy default the latest version (or latest version matching the reference)\nwill be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "HelmPackagesService"
        ]
      }
    },
    "/plugins/helm/packages/v1alpha1/availablepackages/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}/versions": {
      "get": {
        "summary": "GetAvailablePackageVersions returns the package versions managed by the 'helm' plugin",
        "operationId": "HelmPackagesService_GetAvailablePackageVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageVersionsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "availablePackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.identifier",
            "description": "Available package identifier\n\nThe fully qualified identifier for the available package\n(ie. a unique name for the context). For some packaging systems\n(particularly those where an available package is backed by a CR) this\nwill just be the name, but for others such as those where an available\npackage is not backed by a CR (eg. standard helm) it may be necessary\nto include the repository in the name or even the repo namespace\nto ensure this is unique.\nFor example two helm repositories can define\nan \"apache\" chart that is available globally, the names would need to\nencode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\").",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "availablePackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pkgVersion",
            "description": "Optional version reference for which full version history is required.  By\ndefault a summary of versions is returned as outlined in the response.\nPlugins can choose not to implement this and provide the summary only, it\nis provided for completeness only.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "HelmPackagesService"
        ]
      }
    },
    "/plugins/helm/packages/v1alpha1/installedpackages": {
      "get": {
        "summary": "GetInstalledPackageSummaries returns the installed packages managed by the 'helm' plugin",
        "operationId": "HelmPackagesService_GetInstalledPackageSummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstalledPackageSummariesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageToken",
            "description": "Page token. The client uses this field to request a specific page of the list results.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageSize",
            "description": "Page size. Clients use this field to specify the maximum number of results to be\nreturned by the server. The server may further constrain the maximum number\nof results returned in a single page. If the page_size is 0, the server\nwill decide the number of results to be returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "HelmPackagesService"
        ]
      },
      "post": {
        "summary": "CreateInstalledPackage creates an installed package based on the request.",
        "operationId": "HelmPackagesService_CreateInstalledPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateInstalledPackageResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateInstalledPackageRequest"
            }
          }
        ],
        "tags": [
          "HelmPackagesService"
        ]
      }
    },
    "/plugins/helm/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}": {
      "get": {
        "summary": "GetInstalledPackageDetail returns the requested installed package managed by the 'helm' plugin",
        "operationId": "HelmPackagesService_GetInstalledPackageDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstalledPackageDetailResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "HelmPackagesService"
        ]
      },
      "delete": {
        "summary": "DeleteInstalledPackage deletes an installed package based on the request.",
        "operationId": "HelmPackagesService_DeleteInstalledPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1DeleteInstalledPackageResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "HelmPackagesService"
        ]
      },
      "put": {
        "summary": "UpdateInstalledPackage updates an installed package based on the request.",
        "operationId": "HelmPackagesService_UpdateInstalledPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateInstalledPackageResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateInstalledPackageRequest"
            }
          }
        ],
        "tags": [
          "HelmPackagesService"
        ]
      }
    },
    "/plugins/helm/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}/resourcerefs": {
      "get": {
        "summary": "GetInstalledPackageResourceRefs returns the references for the Kubernetes resources created by\nan installed package.",
        "operationId": "HelmPackagesService_GetInstalledPackageResourceRefs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstalledPackageResourceRefsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "HelmPackagesService"
        ]
      }
    },
    "/plugins/helm/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}/rollback": {
      "put": {
        "summary": "RollbackInstalledPackage updates an installed package based on the request.",
        "operationId": "HelmPackagesService_RollbackInstalledPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1RollbackInstalledPackageResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1RollbackInstalledPackageRequest"
            }
          }
        ],
        "tags": [
          "HelmPackagesService"
        ]
      }
    },
    "/plugins/helm/packages/v1alpha1/repositories": {
      "get": {
        "operationId": "HelmRepositoriesService_GetPackageRepositorySummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetPackageRepositorySummariesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "HelmRepositoriesService"
        ]
      },
      "post": {
        "summary": "AddPackageRepository add an existing package repository to the set of ones already managed by the Helm plugin",
        "operationId": "HelmRepositoriesService_AddPackageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1AddPackageRepositoryResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1AddPackageRepositoryRequest"
            }
          }
        ],
        "tags": [
          "HelmRepositoriesService"
        ]
      }
    },
    "/plugins/helm/packages/v1alpha1/repositories/c/{packageRepoRef.context.cluster}/ns/{packageRepoRef.context.namespace}/{packageRepoRef.identifier}": {
      "get": {
        "operationId": "HelmRepositoriesService_GetPackageRepositoryDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetPackageRepositoryDetailResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "packageRepoRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.identifier",
            "description": "The fully qualified identifier for the repository\n(i.e. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "packageRepoRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "packageRepoRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "HelmRepositoriesService"
        ]
      },
      "delete": {
        "operationId": "HelmRepositoriesService_DeletePackageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1DeletePackageRepositoryResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "packageRepoRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.identifier",
            "description": "The fully qualified identifier for the repository\n(i.e. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "packageRepoRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "packageRepoRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "HelmRepositoriesService"
        ]
      },
      "put": {
        "operationId": "HelmRepositoriesService_UpdatePackageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdatePackageRepositoryResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "packageRepoRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.identifier",
            "description": "The fully qualified identifier for the repository\n(i.e. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdatePackageRepositoryRequest"
            }
          }
        ],
        "tags": [
          "HelmRepositoriesService"
        ]
      }
    },
    "/plugins/kapp_controller/packages/v1alpha1/availablepackages": {
      "get": {
        "summary": "GetAvailablePackageSummaries returns the available packages managed by the 'kapp_controller' plugin",
        "operationId": "KappControllerPackagesService_GetAvailablePackageSummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageSummariesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterOptions.query",
            "description": "Text query. Text query for the request",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterOptions.categories",
            "description": "Categories. Collection of categories for the request",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filterOptions.repositories",
            "description": "Repositories. Collection of repositories where the packages belong to",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filterOptions.pkgVersion",
            "description": "Package version. Package version for the request",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filterOptions.appVersion",
            "description": "App version. Packaged app version for the request",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageToken",
            "description": "Page token. The client uses this field to request a specific page of the list results.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageSize",
            "description": "Page size. Clients use this field to specify the maximum number of results to be\nreturned by the server. The server may further constrain the maximum number\nof results returned in a single page. If the page_size is 0, the server\nwill decide the number of results to be returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "KappControllerPackagesService"
        ]
      }
    },
    "/plugins/kapp_controller/packages/v1alpha1/availablepackages/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}": {
      "get": {
        "summary": "GetAvailablePackageDetail returns the package details managed by the 'kapp_controller' plugin",
        "operationId": "KappControllerPackagesService_GetAvailablePackageDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageDetailResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "availablePackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.identifier",
            "description": "Available package identifier\n\nThe fully qualified identifier for the available package\n(ie. a unique name for the context). For some packaging systems\n(particularly those where an available package is backed by a CR) this\nwill just be the name, but for others such as those where an available\npackage is not backed by a CR (eg. standard helm) it may be necessary\nto include the repository in the name or even the repo namespace\nto ensure this is unique.\nFor example two helm repositories can define\nan \"apache\" chart that is available globally, the names would need to\nencode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\").",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "availablePackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pkgVersion",
            "description": "Optional specific version (or version reference) to request.\nBy default the latest version (or latest version matching the reference)\nwill be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "KappControllerPackagesService"
        ]
      }
    },
    "/plugins/kapp_controller/packages/v1alpha1/availablepackages/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}/versions": {
      "get": {
        "summary": "GetAvailablePackageVersions returns the package versions managed by the 'kapp_controller' plugin",
        "operationId": "KappControllerPackagesService_GetAvailablePackageVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetAvailablePackageVersionsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "availablePackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "availablePackageRef.identifier",
            "description": "Available package identifier\n\nThe fully qualified identifier for the available package\n(ie. a unique name for the context). For some packaging systems\n(particularly those where an available package is backed by a CR) this\nwill just be the name, but for others such as those where an available\npackage is not backed by a CR (eg. standard helm) it may be necessary\nto include the repository in the name or even the repo namespace\nto ensure this is unique.\nFor example two helm repositories can define\nan \"apache\" chart that is available globally, the names would need to\nencode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\").",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "availablePackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "availablePackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pkgVersion",
            "description": "Optional version reference for which full version history is required.  By\ndefault a summary of versions is returned as outlined in the response.\nPlugins can choose not to implement this and provide the summary only, it\nis provided for completeness only.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "KappControllerPackagesService"
        ]
      }
    },
    "/plugins/kapp_controller/packages/v1alpha1/installedpackages": {
      "get": {
        "summary": "GetInstalledPackageSummaries returns the installed packages managed by the 'kapp_controller' plugin",
        "operationId": "KappControllerPackagesService_GetInstalledPackageSummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstalledPackageSummariesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageToken",
            "description": "Page token. The client uses this field to request a specific page of the list results.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paginationOptions.pageSize",
            "description": "Page size. Clients use this field to specify the maximum number of results to be\nreturned by the server. The server may further constrain the maximum number\nof results returned in a single page. If the page_size is 0, the server\nwill decide the number of results to be returned.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "KappControllerPackagesService"
        ]
      },
      "post": {
        "summary": "CreateInstalledPackage creates an installed package based on the request.",
        "operationId": "KappControllerPackagesService_CreateInstalledPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateInstalledPackageResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateInstalledPackageRequest"
            }
          }
        ],
        "tags": [
          "KappControllerPackagesService"
        ]
      }
    },
    "/plugins/kapp_controller/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}": {
      "get": {
        "summary": "GetInstalledPackageDetail returns the requested installed package managed by the 'kapp_controller' plugin",
        "operationId": "KappControllerPackagesService_GetInstalledPackageDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstalledPackageDetailResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "KappControllerPackagesService"
        ]
      },
      "delete": {
        "summary": "DeleteInstalledPackage deletes an installed package based on the request.",
        "operationId": "KappControllerPackagesService_DeleteInstalledPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1DeleteInstalledPackageResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "KappControllerPackagesService"
        ]
      },
      "put": {
        "summary": "UpdateInstalledPackage updates an installed package based on the request.",
        "operationId": "KappControllerPackagesService_UpdateInstalledPackage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateInstalledPackageResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdateInstalledPackageRequest"
            }
          }
        ],
        "tags": [
          "KappControllerPackagesService"
        ]
      }
    },
    "/plugins/kapp_controller/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}/resourcerefs": {
      "get": {
        "summary": "GetInstalledPackageResourceRefs returns the references for the Kubernetes resources created by\nan installed package.",
        "operationId": "KappControllerPackagesService_GetInstalledPackageResourceRefs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetInstalledPackageResourceRefsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "KappControllerPackagesService"
        ]
      }
    },
    "/plugins/kapp_controller/packages/v1alpha1/repositories": {
      "get": {
        "operationId": "KappControllerRepositoriesService_GetPackageRepositorySummaries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetPackageRepositorySummariesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster. A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "KappControllerRepositoriesService"
        ]
      },
      "post": {
        "summary": "AddPackageRepository add an existing package repository to the set of ones already managed by the 'kapp_controller' plugin",
        "operationId": "KappControllerRepositoriesService_AddPackageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1AddPackageRepositoryResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1AddPackageRepositoryRequest"
            }
          }
        ],
        "tags": [
          "KappControllerRepositoriesService"
        ]
      }
    },
    "/plugins/kapp_controller/packages/v1alpha1/repositories/c/{packageRepoRef.context.cluster}/ns/{packageRepoRef.context.namespace}/{packageRepoRef.identifier}": {
      "get": {
        "operationId": "KappControllerRepositoriesService_GetPackageRepositoryDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetPackageRepositoryDetailResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "packageRepoRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.identifier",
            "description": "The fully qualified identifier for the repository\n(i.e. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "packageRepoRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "packageRepoRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "KappControllerRepositoriesService"
        ]
      },
      "delete": {
        "operationId": "KappControllerRepositoriesService_DeletePackageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1DeletePackageRepositoryResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "packageRepoRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.identifier",
            "description": "The fully qualified identifier for the repository\n(i.e. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "packageRepoRef.plugin.name",
            "description": "Plugin name. The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "packageRepoRef.plugin.version",
            "description": "Plugin version. The version of the plugin, such as v1alpha1",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "KappControllerRepositoriesService"
        ]
      },
      "put": {
        "operationId": "KappControllerRepositoriesService_UpdatePackageRepository",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdatePackageRepositoryResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "packageRepoRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageRepoRef.identifier",
            "description": "The fully qualified identifier for the repository\n(i.e. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1UpdatePackageRepositoryRequest"
            }
          }
        ],
        "tags": [
          "KappControllerRepositoriesService"
        ]
      }
    },
    "/plugins/resources/v1alpha1/c/{cluster}/namespacenames": {
      "get": {
        "operationId": "ResourcesService_GetNamespaceNames",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetNamespaceNamesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cluster",
            "description": "Cluster\n\nThe context for which the namespace names are being fetched.  The service\nwill attempt to list namespaces across the cluster, first with the users\ncredential, then with a configured service account if available.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ResourcesService"
        ]
      }
    },
    "/plugins/resources/v1alpha1/c/{context.cluster}/can-i": {
      "post": {
        "operationId": "ResourcesService_CanI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CanIResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "group",
            "description": "Group API Group of the Resource.  \"*\" means all.\n+optional.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resource",
            "description": "Resource is one of the existing resource types.  \"*\" means all.\n+optional.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "verb",
            "description": "Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \"*\" means all.\n+optional.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ResourcesService"
        ]
      }
    },
    "/plugins/resources/v1alpha1/c/{context.cluster}/ns": {
      "post": {
        "operationId": "ResourcesService_CreateNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateNamespaceResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace. A namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ResourcesService"
        ]
      }
    },
    "/plugins/resources/v1alpha1/c/{context.cluster}/ns/{context.namespace}": {
      "get": {
        "operationId": "ResourcesService_CheckNamespaceExists",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CheckNamespaceExistsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ResourcesService"
        ]
      }
    },
    "/plugins/resources/v1alpha1/c/{context.cluster}/ns/{context.namespace}/secretnames": {
      "get": {
        "operationId": "ResourcesService_GetSecretNames",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetSecretNamesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ResourcesService"
        ]
      }
    },
    "/plugins/resources/v1alpha1/c/{context.cluster}/ns/{context.namespace}/secrets": {
      "post": {
        "operationId": "ResourcesService_CreateSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1CreateSecretResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "description": "Type. The type of the secret. Valid values are defined by the Type enumeration.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SECRET_TYPE_OPAQUE_UNSPECIFIED",
              "SECRET_TYPE_SERVICE_ACCOUNT_TOKEN",
              "SECRET_TYPE_DOCKER_CONFIG",
              "SECRET_TYPE_DOCKER_CONFIG_JSON",
              "SECRET_TYPE_BASIC_AUTH",
              "SECRET_TYPE_SSH_AUTH",
              "SECRET_TYPE_TLS",
              "SECRET_TYPE_BOOTSTRAP_TOKEN"
            ],
            "default": "SECRET_TYPE_OPAQUE_UNSPECIFIED"
          },
          {
            "name": "name",
            "description": "Name. The name of the secret.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ResourcesService"
        ]
      }
    },
    "/plugins/resources/v1alpha1/c/{context.cluster}/ns/{context.namespace}/serviceaccountnames": {
      "get": {
        "operationId": "ResourcesService_GetServiceAccountNames",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alpha1GetServiceAccountNamesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ResourcesService"
        ]
      }
    },
    "/plugins/resources/v1alpha1/{installedPackageRef.plugin.name}/{installedPackageRef.plugin.version}/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}": {
      "get": {
        "operationId": "ResourcesService_GetResources",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1alpha1GetResourcesResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1alpha1GetResourcesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "installedPackageRef.plugin.name",
            "description": "Plugin name\n\nThe name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.plugin.version",
            "description": "Plugin version\n\nThe version of the plugin, such as v1alpha1",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.cluster",
            "description": "Cluster\n\nA cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.context.namespace",
            "description": "Namespace\n\nA namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "installedPackageRef.identifier",
            "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "watch",
            "description": "Watch. When true, this will cause the stream to remain open with updated\nresources being sent as events are received from the Kubernetes API\nserver.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ResourcesService"
        ]
      }
    }
  },
  "definitions": {
    "PackageRepositoryAuthPackageRepositoryAuthType": {
      "type": "string",
      "enum": [
        "PACKAGE_REPOSITORY_AUTH_TYPE_UNSPECIFIED",
        "PACKAGE_REPOSITORY_AUTH_TYPE_BASIC_AUTH",
        "PACKAGE_REPOSITORY_AUTH_TYPE_TLS",
        "PACKAGE_REPOSITORY_AUTH_TYPE_BEARER",
        "PACKAGE_REPOSITORY_AUTH_TYPE_AUTHORIZATION_HEADER",
        "PACKAGE_REPOSITORY_AUTH_TYPE_DOCKER_CONFIG_JSON",
        "PACKAGE_REPOSITORY_AUTH_TYPE_SSH",
        "PACKAGE_REPOSITORY_AUTH_TYPE_OPAQUE"
      ],
      "default": "PACKAGE_REPOSITORY_AUTH_TYPE_UNSPECIFIED"
    },
    "pluginsfluxv2packagesv1alpha1SetUserManagedSecretsResponse": {
      "type": "object",
      "properties": {
        "value": {
          "type": "boolean"
        }
      }
    },
    "pluginshelmpackagesv1alpha1SetUserManagedSecretsResponse": {
      "type": "object",
      "properties": {
        "value": {
          "type": "boolean"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1alpha1AddPackageRepositoryRequest": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1alpha1Context",
          "description": "The target context where the package repository is intended to be\ninstalled."
        },
        "name": {
          "type": "string",
          "title": "A user-provided name for the package repository (e.g. bitnami)"
        },
        "description": {
          "type": "string",
          "title": "A user-provided description. Optional"
        },
        "namespaceScoped": {
          "type": "boolean",
          "title": "Whether this repository is global or namespace-scoped. Optional.\nBy default, the value is false, i.e. the repository is global"
        },
        "type": {
          "type": "string",
          "title": "Package storage type\nIn general, each plug-in will define an acceptable set of valid types\n- for direct helm plug-in valid values are: \"helm\" and \"oci\"\n- for flux plug-in valid values are: \"helm\" and \"oci\". In the\n  future, we may add support for git and/or AWS s3-style buckets"
        },
        "url": {
          "type": "string",
          "title": "A URL identifying the package repository location. Must contain at\nleast a protocol and host"
        },
        "interval": {
          "type": "string",
          "title": "The interval at which to check the upstream for updates (in time+unit)\nOptional. Defaults to 10m if not specified"
        },
        "tlsConfig": {
          "$ref": "#/definitions/v1alpha1PackageRepositoryTlsConfig",
          "title": "TLS-specific parameters for connecting to a repository. Optional"
        },
        "auth": {
          "$ref": "#/definitions/v1alpha1PackageRepositoryAuth",
          "title": "authentication parameters for connecting to a repository. Optional"
        },
        "plugin": {
          "$ref": "#/definitions/v1alpha1Plugin",
          "description": "The plugin used to interact with this package repository.\nThis field should be omitted when the request is in the context of a\nspecific plugin."
        },
        "customDetail": {
          "$ref": "#/definitions/protobufAny",
          "title": "Custom data added by the plugin\nA plugin can define custom details for data which is not yet, or\nnever will be specified in the core AddPackageRepositoryRequest\nfields. The use of an `Any` field means that each plugin can define\nthe structure of this message as required, while still satisfying the\ncore interface.\nSee https://developers.google.com/protocol-buffers/docs/proto3#any\nJust for reference, some of the examples that have been chosen not to\nbe part of the core API but rather plugin-specific details are:\n  direct-helm:\n     - image pull secrets\n     - list of oci repositories\n     - filter rules\n     - sync job pod template"
        }
      },
      "description": "Request for AddPackageRepository",
      "title": "AddPackageRepositoryRequest"
    },
    "v1alpha1AddPackageRepositoryResponse": {
      "type": "object",
      "properties": {
        "packageRepoRef": {
          "$ref": "#/definitions/v1alpha1PackageRepositoryReference",
          "title": "TODO: add example for API docs\noption (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {\n  example: '{\"package_repo_ref\": {}}'\n};"
        }
      },
      "description": "Response for AddPackageRepositoryRequest",
      "title": "AddPackageRepositoryResponse"
    },
    "v1alpha1AvailablePackageDetail": {
      "type": "object",
      "properties": {
        "availablePackageRef": {
          "$ref": "#/definitions/v1alpha1AvailablePackageReference",
          "description": "A reference uniquely identifying the package.",
          "title": "Available package reference"
        },
        "name": {
          "type": "string",
          "description": "The name of the available package",
          "title": "Available package name"
        },
        "version": {
          "$ref": "#/definitions/v1alpha1PackageAppVersion",
          "description": "The version of the package and application.",
          "title": "Available version"
        },
        "repoUrl": {
          "type": "string",
          "title": "the url of the package repository that contains this package"
        },
        "homeUrl": {
          "type": "string",
          "title": "the url of the “home” for the package"
        },
        "iconUrl": {
          "type": "string",
          "description": "A url for an icon.",
          "title": "Available package icon URL"
        },
        "displayName": {
          "type": "string",
          "description": "A name as displayed to users",
          "title": "Available package display name"
        },
        "shortDescription": {
          "type": "string",
          "description": "A short description of the app provided by the package",
          "title": "Available package short description"
        },
        "longDescription": {
          "type": "string",
          "description": "A longer description of the package, a few sentences.",
          "title": "Available package long description"
        },
        "readme": {
          "type": "string",
          "description": "A longer README with potentially pages of formatted Markdown.",
          "title": "Available package readme"
        },
        "defaultValues": {
          "type": "string",
          "description": "An example of default values used during package templating that can serve\nas documentation or a starting point for user customization.",
          "title": "Available package default values"
        },
        "valuesSchema": {
          "type": "string"
        },
        "sourceUrls": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "source urls for the package"
        },
        "maintainers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Maintainer"
          },
          "description": "List of Maintainer",
          "title": "Available package maintainers"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A user-facing list of category names useful for creating richer user interfaces.\nPlugins can choose not to implement this",
          "title": "Available package categories"
        },
        "customDetail": {
          "$ref": "#/definitions/protobufAny",
          "description": "A plugin can define custom details for data which is not yet, or never will\nbe specified in the core.packaging.CreateInstalledPackageRequest fields. The use\nof an `Any` field means that each plugin can define the structure of this\nmessage as required, while still satisfying the core interface.\nSee https://developers.google.com/protocol-buffers/docs/proto3#any",
          "title": "Custom data added by the plugin"
        }
      },
      "description": "An AvailablePackageDetail provides additional details required when\ninspecting an individual package.",
      "title": "AvailablePackageDetail"
    },
    "v1alpha1AvailablePackageReference": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1alpha1Context",
          "description": "The context (cluster/namespace) for the package.",
          "title": "Available package context"
        },
        "identifier": {
          "type": "string",
          "description": "The fully qualified identifier for the available package\n(ie. a unique name for the context). For some packaging systems\n(particularly those where an available package is backed by a CR) this\nwill just be the name, but for others such as those where an available\npackage is not backed by a CR (eg. standard helm) it may be necessary\nto include the repository in the name or even the repo namespace\nto ensure this is unique.\nFor example two helm repositories can define\nan \"apache\" chart that is available globally, the names would need to\nencode that to be unique (ie. \"repoA:apache\" and \"repoB:apache\").",
          "title": "Available package identifier"
        },
        "plugin": {
          "$ref": "#/definitions/v1alpha1Plugin",
          "description": "The plugin used to interact with this available package.\nThis field should be omitted when the request is in the context of a specific plugin.",
          "title": "Plugin for the available package"
        }
      },
      "description": "An AvailablePackageReference has the minimum information required to uniquely\nidentify an available package. This is re-used on the summary and details of an\navailable package.",
      "title": "AvailablePackageReference"
    },
    "v1alpha1AvailablePackageSummary": {
      "type": "object",
      "properties": {
        "availablePackageRef": {
          "$ref": "#/definitions/v1alpha1AvailablePackageReference",
          "description": "A reference uniquely identifying the package.",
          "title": "Available package reference"
        },
        "name": {
          "type": "string",
          "description": "The name of the available package",
          "title": "Available package name"
        },
        "latestVersion": {
          "$ref": "#/definitions/v1alpha1PackageAppVersion",
          "description": "The latest version available for this package. Often expected when viewing\na summary of many available packages.",
          "title": "Latest available version"
        },
        "iconUrl": {
          "type": "string",
          "description": "A url for an icon.",
          "title": "Available package Icon URL"
        },
        "displayName": {
          "type": "string",
          "description": "A name as displayed to users",
          "title": "Available package display name"
        },
        "shortDescription": {
          "type": "string",
          "description": "A short description of the app provided by the package",
          "title": "Available package short description"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A user-facing list of category names useful for creating richer user interfaces.\nPlugins can choose not to implement this",
          "title": "Available package categories"
        }
      },
      "description": "An AvailablePackageSummary provides a summary of a package available for installation\nuseful when aggregating many available packages.",
      "title": "AvailablePackageSummary"
    },
    "v1alpha1CanIResponse": {
      "type": "object",
      "properties": {
        "allowed": {
          "type": "boolean",
          "description": "True if operation is allowed",
          "title": "allowed"
        }
      },
      "description": "Response for CanI operation",
      "title": "CanIResponse"
    },
    "v1alpha1CheckNamespaceExistsResponse": {
      "type": "object",
      "properties": {
        "exists": {
          "type": "boolean"
        }
      },
      "description": "Response for CheckNamespaceExists",
      "title": "CheckNamespaceExistsResponse"
    },
    "v1alpha1Context": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string",
          "description": "A cluster name can be provided to target a specific cluster if multiple\nclusters are configured, otherwise all clusters will be assumed.",
          "title": "Cluster"
        },
        "namespace": {
          "type": "string",
          "description": "A namespace must be provided if the context of the operation is for a resource\nor resources in a particular namespace.\nFor requests to list items, not including a namespace here implies that the context\nfor the request is everything the requesting user can read, though the result can\nbe filtered by any filtering options of the request. Plugins may choose to return\nUnimplemented for some queries for which we do not yet have a need.",
          "title": "Namespace"
        }
      },
      "description": "A Context specifies the context of the message",
      "title": "Context"
    },
    "v1alpha1CreateInstalledPackageRequest": {
      "type": "object",
      "properties": {
        "availablePackageRef": {
          "$ref": "#/definitions/v1alpha1AvailablePackageReference",
          "description": "A reference uniquely identifying the package available for installation."
        },
        "targetContext": {
          "$ref": "#/definitions/v1alpha1Context",
          "description": "The target context where the package is intended to be installed."
        },
        "name": {
          "type": "string",
          "title": "A user-provided name for the installed package (eg. project-x-db)"
        },
        "pkgVersionReference": {
          "$ref": "#/definitions/v1alpha1VersionReference",
          "description": "For helm this will be the exact version in VersionReference.version\nFor other plugins we can extend the VersionReference as needed."
        },
        "values": {
          "type": "string",
          "description": "An optional serialized values string to be included when templating a package\nin the format expected by the plugin. Included when the backend format doesn't\nuse secrets or configmaps for values or supports both. These values are layered\non top of any values refs above, when relevant."
        },
        "reconciliationOptions": {
          "$ref": "#/definitions/v1alpha1ReconciliationOptions",
          "description": "An optional field for specifying data common to systems that reconcile\nthe package on the cluster."
        }
      },
      "description": "Request for CreateInstalledPackage",
      "title": "CreateInstalledPackageRequest"
    },
    "v1alpha1CreateInstalledPackageResponse": {
      "type": "object",
      "properties": {
        "installedPackageRef": {
          "$ref": "#/definitions/v1alpha1InstalledPackageReference"
        }
      },
      "description": "Response for CreateInstalledPackage",
      "title": "CreateInstalledPackageResponse"
    },
    "v1alpha1CreateNamespaceResponse": {
      "type": "object",
      "description": "Response for CreateNamespace",
      "title": "CreateNamespaceResponse"
    },
    "v1alpha1CreateSecretResponse": {
      "type": "object",
      "description": "Response for CreateSecret",
      "title": "CreateSecretResponse"
    },
    "v1alpha1DeleteInstalledPackageResponse": {
      "type": "object",
      "description": "Response for DeleteInstalledPackage",
      "title": "DeleteInstalledPackageResponse"
    },
    "v1alpha1DeletePackageRepositoryResponse": {
      "type": "object",
      "description": "Response for DeletePackageRepository",
      "title": "DeletePackageRepositoryResponse"
    },
    "v1alpha1DockerCredentials": {
      "type": "object",
      "properties": {
        "server": {
          "type": "string",
          "title": "server name"
        },
        "username": {
          "type": "string",
          "description": "username."
        },
        "password": {
          "type": "string",
          "title": "password. In clear text"
        },
        "email": {
          "type": "string",
          "title": "email address"
        }
      },
      "title": "DockerCredentials"
    },
    "v1alpha1FilterOptions": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "Text query for the request",
          "title": "Text query"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Collection of categories for the request",
          "title": "Categories"
        },
        "repositories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Collection of repositories where the packages belong to",
          "title": "Repositories"
        },
        "pkgVersion": {
          "type": "string",
          "description": "Package version for the request",
          "title": "Package version"
        },
        "appVersion": {
          "type": "string",
          "description": "Packaged app version for the request",
          "title": "App version"
        }
      },
      "description": "FilterOptions available when requesting summaries",
      "title": "FilterOptions"
    },
    "v1alpha1GetAvailablePackageDetailResponse": {
      "type": "object",
      "properties": {
        "availablePackageDetail": {
          "$ref": "#/definitions/v1alpha1AvailablePackageDetail",
          "description": "The requested AvailablePackageDetail",
          "title": "Available package detail"
        }
      },
      "description": "Response for GetAvailablePackageDetail",
      "title": "GetAvailablePackageDetailResponse"
    },
    "v1alpha1GetAvailablePackageSummariesResponse": {
      "type": "object",
      "properties": {
        "availablePackageSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1AvailablePackageSummary"
          },
          "description": "List of AvailablePackageSummary",
          "title": "Available packages summaries"
        },
        "nextPageToken": {
          "type": "string",
          "description": "This field represents the pagination token to retrieve the next page of\nresults. If the value is \"\", it means no further results for the request.",
          "title": "Next page token"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "This optional field contains the distinct category names considering the FilterOptions.",
          "title": "Categories"
        }
      },
      "description": "Response for GetAvailablePackageSummaries",
      "title": "GetAvailablePackageSummariesResponse"
    },
    "v1alpha1GetAvailablePackageVersionsResponse": {
      "type": "object",
      "properties": {
        "packageAppVersions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PackageAppVersion"
          },
          "description": "By default (when version_query is empty or ignored) the response\nshould contain an ordered summary of versions including the most recent three\npatch versions of the most recent three minor versions of the most recent three\nmajor versions when available, something like:\n[\n  { pkg_version: \"10.3.19\", app_version: \"2.16.8\" },\n  { pkg_version: \"10.3.18\", app_version: \"2.16.8\" },\n  { pkg_version: \"10.3.17\", app_version: \"2.16.7\" },\n  { pkg_version: \"10.2.6\", app_version: \"2.15.3\" },\n  { pkg_version: \"10.2.5\", app_version: \"2.15.2\" },\n  { pkg_version: \"10.2.4\", app_version: \"2.15.2\" },\n  { pkg_version: \"10.1.8\", app_version: \"2.13.5\" },\n  { pkg_version: \"10.1.7\", app_version: \"2.13.5\" },\n  { pkg_version: \"10.1.6\", app_version: \"2.13.5\" },\n  { pkg_version: \"9.5.4\", app_version: \"2.8.9\" },\n  ...\n  { pkg_version: \"8.2.5\", app_version: \"1.19.5\" },\n  ...\n]\nIf a version_query is present and the plugin chooses to support it,\nthe full history of versions matching the version query should be returned.",
          "title": "Package app versions"
        }
      },
      "description": "Response for GetAvailablePackageVersions",
      "title": "GetAvailablePackageVersionsResponse"
    },
    "v1alpha1GetConfiguredPluginsResponse": {
      "type": "object",
      "example": {
        "plugins": [
          {
            "name": "kapp_controller.packages",
            "version": "v1alpha1"
          }
        ]
      },
      "properties": {
        "plugins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1Plugin"
          },
          "description": "List of Plugin",
          "title": "Plugins"
        }
      },
      "description": "Response for GetConfiguredPlugins",
      "title": "GetConfiguredPluginsResponse"
    },
    "v1alpha1GetInstalledPackageDetailResponse": {
      "type": "object",
      "properties": {
        "installedPackageDetail": {
          "$ref": "#/definitions/v1alpha1InstalledPackageDetail",
          "description": "The requested InstalledPackageDetail",
          "title": "InstalledPackageDetail"
        }
      },
      "description": "Response for GetInstalledPackageDetail",
      "title": "GetInstalledPackageDetailResponse"
    },
    "v1alpha1GetInstalledPackageResourceRefsResponse": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1alpha1Context"
        },
        "resourceRefs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ResourceRef"
          }
        }
      },
      "description": "Response for GetInstalledPackageResourceRefs",
      "title": "GetInstalledPackageResourceRefsResponse"
    },
    "v1alpha1GetInstalledPackageSummariesResponse": {
      "type": "object",
      "properties": {
        "installedPackageSummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1InstalledPackageSummary"
          },
          "description": "List of InstalledPackageSummary",
          "title": "Installed packages summaries"
        },
        "nextPageToken": {
          "type": "string",
          "description": "This field represents the pagination token to retrieve the next page of\nresults. If the value is \"\", it means no further results for the request.",
          "title": "Next page token"
        }
      },
      "description": "Response for GetInstalledPackageSummaries",
      "title": "GetInstalledPackageSummariesResponse"
    },
    "v1alpha1GetNamespaceNamesResponse": {
      "type": "object",
      "properties": {
        "namespaceNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Namespace names.",
          "title": "NamespaceNames"
        }
      },
      "description": "Response for GetNamespaceNames",
      "title": "GetNamespaceNamesResponse"
    },
    "v1alpha1GetPackageRepositoryDetailResponse": {
      "type": "object",
      "properties": {
        "detail": {
          "$ref": "#/definitions/v1alpha1PackageRepositoryDetail",
          "title": "package repository detail"
        }
      },
      "description": "Response for GetPackageRepositoryDetail",
      "title": "GetPackageRepositoryDetailResponse"
    },
    "v1alpha1GetPackageRepositorySummariesResponse": {
      "type": "object",
      "properties": {
        "packageRepositorySummaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PackageRepositorySummary"
          },
          "title": "List of PackageRepositorySummary"
        }
      },
      "description": "Response for GetPackageRepositorySummaries",
      "title": "GetPackageRepositorySummariesResponse"
    },
    "v1alpha1GetResourcesResponse": {
      "type": "object",
      "properties": {
        "resourceRef": {
          "$ref": "#/definitions/v1alpha1ResourceRef",
          "description": "The resource reference for this single resource.",
          "title": "ResourceRef"
        },
        "manifest": {
          "type": "string",
          "description": "The current manifest of the requested resource.  Initially the JSON\nmanifest will be returned a json-encoded string, enabling the existing\nKubeapps UI to replace its current direct api-server getting and watching\nof resources, but we may in the future pull out further structured\nmetadata into this message as needed.",
          "title": "Manifest"
        }
      }
    },
    "v1alpha1GetSecretNamesResponse": {
      "type": "object",
      "properties": {
        "secretNames": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1alpha1SecretType"
          },
          "description": "The list of Service Account names.",
          "title": "SecretNames"
        }
      },
      "description": "Response for GetSecretNames",
      "title": "GetSecretNamesResponse"
    },
    "v1alpha1GetServiceAccountNamesResponse": {
      "type": "object",
      "properties": {
        "serviceaccountNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of Service Account names.",
          "title": "ServiceAccountNames"
        }
      },
      "description": "Response for GetServiceAccountNames",
      "title": "GetServiceAccountNamesResponse"
    },
    "v1alpha1InstalledPackageDetail": {
      "type": "object",
      "properties": {
        "installedPackageRef": {
          "$ref": "#/definitions/v1alpha1InstalledPackageReference",
          "description": "A reference uniquely identifying the installed package.",
          "title": "InstalledPackageReference"
        },
        "pkgVersionReference": {
          "$ref": "#/definitions/v1alpha1VersionReference",
          "description": "The package version reference defines a version or constraint limiting\nmatching package versions.",
          "title": "PkgVersionReference"
        },
        "name": {
          "type": "string",
          "description": "The name given to the installed package",
          "title": "Installed package name"
        },
        "currentVersion": {
          "$ref": "#/definitions/v1alpha1PackageAppVersion",
          "description": "The version of the package which is currently installed.",
          "title": "CurrentVersion"
        },
        "valuesApplied": {
          "type": "string",
          "description": "The values applied currently for the installed package.",
          "title": "ValuesApplied"
        },
        "reconciliationOptions": {
          "$ref": "#/definitions/v1alpha1ReconciliationOptions",
          "description": "An optional field specifying data common to systems that reconcile\nthe package installation on the cluster asynchronously. In particular,\nthis specifies the service account used to perform the reconcilliation.",
          "title": "ReconciliationOptions"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1InstalledPackageStatus",
          "description": "The current status of the installed package.",
          "title": "Status"
        },
        "postInstallationNotes": {
          "type": "string",
          "description": "Optional notes generated by package and intended for the user post installation.",
          "title": "PostInstallationNotes"
        },
        "availablePackageRef": {
          "$ref": "#/definitions/v1alpha1AvailablePackageReference",
          "description": "A reference to the available package for this installation.\nUseful to lookup the package display name, icon and other info.",
          "title": "Available package reference"
        },
        "latestMatchingVersion": {
          "$ref": "#/definitions/v1alpha1PackageAppVersion",
          "description": "Only non-empty if an available upgrade matches the specified pkg_version_reference.\nFor example, if the pkg_version_reference is \"\u003e10.3.0 \u003c 10.4.0\" and 10.3.1\nis installed, then:\n  * if 10.3.2 is available, latest_matching_version should be 10.3.2, but\n  * if 10.4 is available while \u003e10.3.1 is not, this should remain empty.",
          "title": "LatestMatchingVersion"
        },
        "latestVersion": {
          "$ref": "#/definitions/v1alpha1PackageAppVersion",
          "description": "The latest version available for this package, regardless of the pkg_version_reference.",
          "title": "LatestVersion"
        },
        "customDetail": {
          "$ref": "#/definitions/protobufAny",
          "description": "A plugin can define custom details for data which is not yet, or never will\nbe specified in the core.packaging.CreateInstalledPackageRequest fields. The use\nof an `Any` field means that each plugin can define the structure of this\nmessage as required, while still satisfying the core interface.\nSee https://developers.google.com/protocol-buffers/docs/proto3#any",
          "title": "Custom data added by the plugin"
        }
      },
      "description": "An InstalledPackageDetail includes details about the installed package that are\ntypically useful when presenting a single installed package.",
      "title": "InstalledPackageDetail"
    },
    "v1alpha1InstalledPackageReference": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1alpha1Context",
          "description": "The context (cluster/namespace) for the package.",
          "title": "Installed package context"
        },
        "identifier": {
          "type": "string",
          "description": "The fully qualified identifier for the installed package\n(ie. a unique name for the context)."
        },
        "plugin": {
          "$ref": "#/definitions/v1alpha1Plugin",
          "description": "The plugin used to identify and interact with the installed package.\nThis field can be omitted when the request is in the context of a specific plugin."
        }
      },
      "description": "An InstalledPackageReference has the minimum information required to uniquely\nidentify an installed package.",
      "title": "InstalledPackageReference"
    },
    "v1alpha1InstalledPackageStatus": {
      "type": "object",
      "properties": {
        "ready": {
          "type": "boolean",
          "description": "An indication of whether the installation is ready or not",
          "title": "Ready"
        },
        "reason": {
          "$ref": "#/definitions/v1alpha1InstalledPackageStatusStatusReason",
          "description": "An enum indicating the reason for the current status.",
          "title": "Reason"
        },
        "userReason": {
          "type": "string",
          "description": "Optional text to return for user context, which may be plugin specific.",
          "title": "UserReason"
        }
      },
      "description": "An InstalledPackageStatus reports on the current status of the installation.",
      "title": "InstalledPackageStatus"
    },
    "v1alpha1InstalledPackageStatusStatusReason": {
      "type": "string",
      "enum": [
        "STATUS_REASON_UNSPECIFIED",
        "STATUS_REASON_INSTALLED",
        "STATUS_REASON_UNINSTALLED",
        "STATUS_REASON_FAILED",
        "STATUS_REASON_PENDING"
      ],
      "default": "STATUS_REASON_UNSPECIFIED",
      "description": "Generic reasons why an installed package may be ready or not.\nThese should make sense across different packaging plugins.",
      "title": "StatusReason"
    },
    "v1alpha1InstalledPackageSummary": {
      "type": "object",
      "properties": {
        "installedPackageRef": {
          "$ref": "#/definitions/v1alpha1InstalledPackageReference",
          "description": "A reference uniquely identifying the package.",
          "title": "InstalledPackageReference"
        },
        "name": {
          "type": "string",
          "description": "A name given to the installation of the package (eg. \"my-postgresql-for-testing\").",
          "title": "Name"
        },
        "pkgVersionReference": {
          "$ref": "#/definitions/v1alpha1VersionReference",
          "description": "The package version reference defines a version or constraint limiting\nmatching package versions.",
          "title": "PkgVersionReference"
        },
        "currentVersion": {
          "$ref": "#/definitions/v1alpha1PackageAppVersion",
          "description": "The current version of the package being reconciled, which may be\nin one of these states:\n - has been successfully installed/upgraded or\n - is currently being installed/upgraded or\n - has failed to install/upgrade",
          "title": "CurrentVersion"
        },
        "iconUrl": {
          "type": "string",
          "description": "A url for an icon.",
          "title": "Installed package icon URL"
        },
        "pkgDisplayName": {
          "type": "string",
          "description": "The package name as displayed to users (provided by the package, eg. \"PostgreSQL\")",
          "title": "PackageDisplayName"
        },
        "shortDescription": {
          "type": "string",
          "description": "A short description of the package (provided by the package)",
          "title": "ShortDescription"
        },
        "latestMatchingVersion": {
          "$ref": "#/definitions/v1alpha1PackageAppVersion",
          "description": "Only non-empty if an available upgrade matches the specified pkg_version_reference.\nFor example, if the pkg_version_reference is \"\u003e10.3.0 \u003c 10.4.0\" and 10.3.1\nis installed, then:\n  * if 10.3.2 is available, latest_matching_version should be 10.3.2, but\n  * if 10.4 is available while \u003e10.3.1 is not, this should remain empty.",
          "title": "LatestMatchingVersion"
        },
        "latestVersion": {
          "$ref": "#/definitions/v1alpha1PackageAppVersion",
          "description": "The latest version available for this package, regardless of the pkg_version_reference.",
          "title": "LatestVersion"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1InstalledPackageStatus",
          "description": "The current status of the installed package.",
          "title": "Status"
        }
      },
      "description": "An InstalledPackageSummary provides a summary of an installed package\nuseful when aggregating many installed packages.",
      "title": "InstalledPackageSummary"
    },
    "v1alpha1Maintainer": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A maintainer name",
          "title": "Maintainer name"
        },
        "email": {
          "type": "string",
          "description": "A maintainer email",
          "title": "Maintainer email"
        }
      },
      "description": "Maintainers for the package.",
      "title": "Maintainer"
    },
    "v1alpha1OpaqueCredentials": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "fields"
        }
      },
      "title": "OpaqueCredentials"
    },
    "v1alpha1PackageAppVersion": {
      "type": "object",
      "properties": {
        "pkgVersion": {
          "type": "string",
          "description": "Version of the package itself",
          "title": "Package version"
        },
        "appVersion": {
          "type": "string",
          "description": "Version of the packaged application",
          "title": "Application version"
        }
      },
      "description": "PackageAppVersion conveys both the package version and the packaged app version.",
      "title": "Package AppVersion"
    },
    "v1alpha1PackageRepositoryAuth": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/PackageRepositoryAuthPackageRepositoryAuthType"
        },
        "usernamePassword": {
          "$ref": "#/definitions/v1alpha1UsernamePassword",
          "title": "username and plain text password"
        },
        "tlsCertKey": {
          "$ref": "#/definitions/v1alpha1TlsCertKey",
          "title": "certificate and key for TLS-based authentication"
        },
        "dockerCreds": {
          "$ref": "#/definitions/v1alpha1DockerCredentials",
          "title": "docker credentials"
        },
        "header": {
          "type": "string",
          "title": "for Bearer Auth token value\nfor Custom Auth, complete value of \"Authorization\" header"
        },
        "secretRef": {
          "$ref": "#/definitions/v1alpha1SecretKeyReference",
          "title": "a reference to an existing secret"
        },
        "sshCreds": {
          "$ref": "#/definitions/v1alpha1SshCredentials",
          "title": "SSH credentials"
        },
        "opaqueCreds": {
          "$ref": "#/definitions/v1alpha1OpaqueCredentials",
          "title": "opaque credentials"
        },
        "passCredentials": {
          "type": "boolean",
          "title": "pass_credentials allows the credentials from the SecretRef to be passed\non to a host that does not match the host as defined in URL.\nThis flag controls whether or not it is allowed to passing credentials\nwith requests to other domains linked from the repository.\nThis may be needed if the host of the advertised chart URLs in the\nindex differs from the defined URL. Optional"
        }
      },
      "description": "Authentication/authorization to provide client's identity when connecting\nto a package repository.\nThere are 6 total distinct use cases we may support:\n1) None (Public)\n2) Basic Auth\n3) Bearer Token\n4) Custom Authorization Header\n5) Docker Registry Credentials (for OCI only)\n6) TLS certificate and key\n\nNote that (1)-(4) may be done over HTTP or HTTPs without any custom\ncertificates or certificate authority\n(1) is handled by not not having PackageRepositoryAuth field on\n    the parent object\na given plug-in may or may not support a given authentication type.\nFor example\n - direct-helm plug-in does not currently support (6), while flux does\n - flux plug-in does not support (3) or (4) while direct-helm does",
      "title": "PackageRepositoryAuth"
    },
    "v1alpha1PackageRepositoryDetail": {
      "type": "object",
      "properties": {
        "packageRepoRef": {
          "$ref": "#/definitions/v1alpha1PackageRepositoryReference",
          "description": "A reference uniquely identifying the package repository."
        },
        "name": {
          "type": "string",
          "title": "A user-provided name for the package repository (e.g. bitnami)"
        },
        "description": {
          "type": "string",
          "description": "A user-provided description."
        },
        "namespaceScoped": {
          "type": "boolean",
          "description": "Whether this repository is global or namespace-scoped."
        },
        "type": {
          "type": "string",
          "title": "Package storage type"
        },
        "url": {
          "type": "string",
          "description": "A URL identifying the package repository location."
        },
        "interval": {
          "type": "string",
          "title": "The interval at which to check the upstream for updates (in time+unit)"
        },
        "tlsConfig": {
          "$ref": "#/definitions/v1alpha1PackageRepositoryTlsConfig",
          "title": "TLS-specific parameters for connecting to a repository.\nIf the cert authority was configured for this repository, then in the context\nof GetPackageRepositoryDetail() operation, the PackageRepositoryTlsConfig will ALWAYS\ncontain an existing SecretKeyReference, rather that cert_authority field"
        },
        "auth": {
          "$ref": "#/definitions/v1alpha1PackageRepositoryAuth",
          "title": "authentication parameters for connecting to a repository.\nIf Basic Auth or TLS or Docker Creds Auth was configured for this repository,\nthen in the context of GetPackageRepositoryDetail() operation, the\nPackageRepositoryAuth will ALWAYS contain an existing SecretKeyReference,\nrather that string values that may have been used when package repository was created\nfield"
        },
        "customDetail": {
          "$ref": "#/definitions/protobufAny",
          "title": "Custom data added by the plugin"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1PackageRepositoryStatus",
          "description": "current status of the repository which can include reconciliation\nstatus, where relevant."
        }
      },
      "title": "PackageRepositoryDetail"
    },
    "v1alpha1PackageRepositoryReference": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1alpha1Context",
          "description": "The context (cluster/namespace) for the repository."
        },
        "identifier": {
          "type": "string",
          "description": "The fully qualified identifier for the repository\n(i.e. a unique name for the context)."
        },
        "plugin": {
          "$ref": "#/definitions/v1alpha1Plugin",
          "description": "The plugin used to interact with this available package.\nThis field should be omitted when the request is in the context of a\nspecific plugin."
        }
      },
      "description": "A PackageRepositoryReference has the minimum information required to\nuniquely identify a package repository.",
      "title": "PackageRepositoryReference"
    },
    "v1alpha1PackageRepositoryStatus": {
      "type": "object",
      "properties": {
        "ready": {
          "type": "boolean",
          "description": "An indication of whether the repository is ready or not",
          "title": "Ready"
        },
        "reason": {
          "$ref": "#/definitions/v1alpha1PackageRepositoryStatusStatusReason",
          "description": "An enum indicating the reason for the current status.",
          "title": "Reason"
        },
        "userReason": {
          "type": "string",
          "description": "Optional text to return for user context, which may be plugin specific.",
          "title": "UserReason"
        }
      },
      "description": "A PackageRepositoryStatus reports on the current status of the repository.",
      "title": "PackageRepositoryStatus"
    },
    "v1alpha1PackageRepositoryStatusStatusReason": {
      "type": "string",
      "enum": [
        "STATUS_REASON_UNSPECIFIED",
        "STATUS_REASON_SUCCESS",
        "STATUS_REASON_FAILED",
        "STATUS_REASON_PENDING"
      ],
      "default": "STATUS_REASON_UNSPECIFIED",
      "description": "Generic reasons why a package repository may be ready or not.\nThese should make sense across different packaging plugins.",
      "title": "StatusReason"
    },
    "v1alpha1PackageRepositorySummary": {
      "type": "object",
      "properties": {
        "packageRepoRef": {
          "$ref": "#/definitions/v1alpha1PackageRepositoryReference",
          "description": "A reference uniquely identifying the package repository."
        },
        "name": {
          "type": "string",
          "title": "A user-provided name for the package repository (e.g. bitnami)"
        },
        "description": {
          "type": "string",
          "description": "A user-provided description."
        },
        "namespaceScoped": {
          "type": "boolean",
          "description": "Whether this repository is global or namespace-scoped."
        },
        "type": {
          "type": "string",
          "title": "Package storage type"
        },
        "url": {
          "type": "string",
          "description": "URL identifying the package repository location."
        },
        "status": {
          "$ref": "#/definitions/v1alpha1PackageRepositoryStatus",
          "description": "current status of the repository which can include reconciliation\nstatus, where relevant."
        },
        "requiresAuth": {
          "type": "boolean",
          "description": "existence of any authentication parameters for connecting to a repository."
        }
      },
      "title": "PackageRepositorySummary"
    },
    "v1alpha1PackageRepositoryTlsConfig": {
      "type": "object",
      "properties": {
        "insecureSkipVerify": {
          "type": "boolean",
          "title": "whether or not to skip TLS verification\nnote that fluxv2 does not currently support this and will raise an\nerror should this flag be set to true"
        },
        "certAuthority": {
          "type": "string",
          "title": "certificate authority. Optional"
        },
        "secretRef": {
          "$ref": "#/definitions/v1alpha1SecretKeyReference",
          "title": "a reference to an existing secret that contains custom CA"
        }
      },
      "title": "PackageRepositoryTlsConfig"
    },
    "v1alpha1PaginationOptions": {
      "type": "object",
      "properties": {
        "pageToken": {
          "type": "string",
          "description": "The client uses this field to request a specific page of the list results.",
          "title": "Page token"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32",
          "description": "Clients use this field to specify the maximum number of results to be\nreturned by the server. The server may further constrain the maximum number\nof results returned in a single page. If the page_size is 0, the server\nwill decide the number of results to be returned.",
          "title": "Page size"
        }
      },
      "description": "The PaginationOptions based on the example proto at:\nhttps://cloud.google.com/apis/design/design_patterns#list_pagination\njust encapsulated in a message so it can be reused on different request messages.",
      "title": "PaginationOptions"
    },
    "v1alpha1Plugin": {
      "type": "object",
      "example": {
        "name": "kapp_controller.packages",
        "version": "v1alpha1"
      },
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.",
          "title": "Plugin name"
        },
        "version": {
          "type": "string",
          "description": "The version of the plugin, such as v1alpha1",
          "title": "Plugin version"
        }
      },
      "description": "A plugin can implement multiple services and multiple versions of a service.",
      "title": "Plugin"
    },
    "v1alpha1ReconciliationOptions": {
      "type": "object",
      "properties": {
        "interval": {
          "type": "string",
          "description": "The interval with which the package is checked for reconciliation (in time+unit)",
          "title": "Reconciliation Interval"
        },
        "suspend": {
          "type": "boolean",
          "description": "Whether reconciliation should be suspended until otherwise enabled.\nThis can be utilized to e.g. temporarily ignore chart changes, and\nprevent a Helm release from getting upgraded",
          "title": "Suspend"
        },
        "serviceAccountName": {
          "type": "string",
          "description": "A name for a service account in the same namespace which should be used\nto perform the reconciliation.",
          "title": "ServiceAccountName"
        }
      },
      "description": "ReconciliationOptions enable specifying standard fields for backends that continuously\nreconcile a package install as new matching versions are released. Most of the naming\nis from the flux HelmReleaseSpec though it maps directly to equivalent fields on Carvel's\nInstalledPackage.",
      "title": "ReconciliationOptions"
    },
    "v1alpha1ResourceRef": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string",
          "description": "The APIVersion directly from the resource has the group and version, eg. \"apps/v1\"\nor just the version for core resources."
        },
        "kind": {
          "type": "string",
          "description": "The Kind directly from the templated manifest. Together with the APIVersion this\nforms the GroupVersionKind."
        },
        "name": {
          "type": "string",
          "description": "The name of the specific resource in the context of the installed package."
        },
        "namespace": {
          "type": "string",
          "description": "The namespace of the specific resource in the context of the installed\npackage. In most cases this will be identical to the namespace of the\ninstalled package. Exceptions will be non-namespaced resources and packages\nthat install resources in other namespaces for special reasons."
        }
      },
      "description": "A reference to a Kubernetes resource related to a specific installed package.\nThe context (cluster) for each resource is that of the related\ninstalled package.",
      "title": "Resource reference"
    },
    "v1alpha1RollbackInstalledPackageRequest": {
      "type": "object",
      "properties": {
        "installedPackageRef": {
          "$ref": "#/definitions/v1alpha1InstalledPackageReference",
          "description": "A reference uniquely identifying the installed package.",
          "title": "Installed package reference"
        },
        "releaseRevision": {
          "type": "integer",
          "format": "int32",
          "description": "A number identifying the Helm revision to which to rollback.",
          "title": "ReleaseRevision"
        }
      }
    },
    "v1alpha1RollbackInstalledPackageResponse": {
      "type": "object",
      "properties": {
        "installedPackageRef": {
          "$ref": "#/definitions/v1alpha1InstalledPackageReference",
          "title": "TODO: add example for API docs\noption (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {\n  example: '{\"installed_package_ref\": {}}'\n};"
        }
      },
      "description": "Response for RollbackInstalledPackage",
      "title": "RollbackInstalledPackageResponse"
    },
    "v1alpha1SecretKeyReference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of an existing secret in the same namespace as the object\nthat refers to it (e.g. PackageRepository), containing authentication\ncredentials for the said package repository.\n- For HTTP/S basic auth the secret must be of type\n  \"kubernetes.io/basic-auth\" or opaque and contain username and\n  password fields\n- For TLS the secret must be of type \"kubernetes.io/tls\" or opaque\n  and contain a certFile and keyFile, and/or\n  caCert fields.\n- For Bearer or Custom Auth, the secret must be opaque, and\n  the key must be provided\n- For Docker Registry Credentials (OCI registries) the secret\n  must of of type \"kubernetes.io/dockerconfigjson\"\nFor more details, refer to\nhttps://kubernetes.io/docs/concepts/configuration/secret/"
        },
        "key": {
          "type": "string",
          "title": "Optional. Must be provided when name refers to an opaque secret"
        }
      },
      "title": "SecretKeyReference"
    },
    "v1alpha1SecretType": {
      "type": "string",
      "enum": [
        "SECRET_TYPE_OPAQUE_UNSPECIFIED",
        "SECRET_TYPE_SERVICE_ACCOUNT_TOKEN",
        "SECRET_TYPE_DOCKER_CONFIG",
        "SECRET_TYPE_DOCKER_CONFIG_JSON",
        "SECRET_TYPE_BASIC_AUTH",
        "SECRET_TYPE_SSH_AUTH",
        "SECRET_TYPE_TLS",
        "SECRET_TYPE_BOOTSTRAP_TOKEN"
      ],
      "default": "SECRET_TYPE_OPAQUE_UNSPECIFIED",
      "description": "The type of secret. Currently Kubeapps itself only deals with OPAQUE\nand docker config json secrets, but we define all so we can correctly\nlist the secret names with their types.\nSee https://kubernetes.io/docs/concepts/configuration/secret/#secret-types",
      "title": "SecretType"
    },
    "v1alpha1SshCredentials": {
      "type": "object",
      "properties": {
        "privateKey": {
          "type": "string",
          "title": "private key"
        },
        "knownHosts": {
          "type": "string",
          "description": "known hosts."
        }
      },
      "title": "SshCredentials"
    },
    "v1alpha1TlsCertKey": {
      "type": "object",
      "properties": {
        "cert": {
          "type": "string",
          "title": "certificate (identity). In clear text"
        },
        "key": {
          "type": "string",
          "title": "certificate key. In clear text"
        }
      },
      "title": "TlsCertKey"
    },
    "v1alpha1UpdateInstalledPackageRequest": {
      "type": "object",
      "properties": {
        "installedPackageRef": {
          "$ref": "#/definitions/v1alpha1InstalledPackageReference",
          "title": "A reference uniquely identifying the installed package being updated.\nRequired"
        },
        "pkgVersionReference": {
          "$ref": "#/definitions/v1alpha1VersionReference",
          "title": "For helm this will be the exact version in VersionReference.version\nFor fluxv2 this could be any semver constraint expression\nFor other plugins we can extend the VersionReference as needed. Optional"
        },
        "values": {
          "type": "string",
          "description": "An optional serialized values string to be included when templating a\npackage in the format expected by the plugin. Included when the backend\nformat doesn't use secrets or configmaps for values or supports both.\nThese values are layered on top of any values refs above, when\nrelevant."
        },
        "reconciliationOptions": {
          "$ref": "#/definitions/v1alpha1ReconciliationOptions",
          "description": "An optional field for specifying data common to systems that reconcile\nthe package on the cluster."
        }
      },
      "description": "Request for UpdateInstalledPackage. The intent is to reach the desired state specified\nby the fields in the request, while leaving other fields intact. This is a whole\nobject \"Update\" semantics rather than \"Patch\" semantics. The caller will provide the\nvalues for the fields below, which will replace, or be overlayed onto, the\ncorresponding fields in the existing resource. For example, with the\nUpdateInstalledPackageRequest, it is not possible to change just the 'package version\nreference' without also specifying 'values' field. As a side effect, not specifying the\n'values' field in the request means there are no values specified in the desired state.\nSo the meaning of each field value is describing the desired state of the corresponding\nfield in the resource after the update operation has completed the renconciliation.",
      "title": "UpdateInstalledPackageRequest"
    },
    "v1alpha1UpdateInstalledPackageResponse": {
      "type": "object",
      "properties": {
        "installedPackageRef": {
          "$ref": "#/definitions/v1alpha1InstalledPackageReference"
        }
      },
      "description": "Response for UpdateInstalledPackage",
      "title": "UpdateInstalledPackageResponse"
    },
    "v1alpha1UpdatePackageRepositoryRequest": {
      "type": "object",
      "properties": {
        "packageRepoRef": {
          "$ref": "#/definitions/v1alpha1PackageRepositoryReference",
          "title": "A reference uniquely identifying the package repository being updated.\nThe only required field"
        },
        "url": {
          "type": "string",
          "description": "URL identifying the package repository location."
        },
        "description": {
          "type": "string",
          "description": "A user-provided description."
        },
        "interval": {
          "type": "string",
          "title": "The interval at which to check the upstream for updates (in time+unit)\nOptional. Defaults to 10m if not specified"
        },
        "tlsConfig": {
          "$ref": "#/definitions/v1alpha1PackageRepositoryTlsConfig",
          "title": "TLS-specific parameters for connecting to a repository. Optional"
        },
        "auth": {
          "$ref": "#/definitions/v1alpha1PackageRepositoryAuth",
          "title": "authentication parameters for connecting to a repository. Optional"
        },
        "customDetail": {
          "$ref": "#/definitions/protobufAny",
          "title": "Custom data added by the plugin\nA plugin can define custom details for data which is not yet, or\nnever will be specified in the core AddPackageRepositoryRequest\nfields. The use of an `Any` field means that each plugin can define\nthe structure of this message as required, while still satisfying the\ncore interface.\nSee https://developers.google.com/protocol-buffers/docs/proto3#any\nJust for reference, some of the examples that have been chosen not to\nbe part of the core API but rather plugin-specific details are:\n  direct-helm:\n     - image pull secrets\n     - list of oci repositories\n     - filter rules\n     - sync job pod template"
        }
      },
      "description": "Request for UpdatePackageRepository",
      "title": "UpdatePackageRepositoryRequest"
    },
    "v1alpha1UpdatePackageRepositoryResponse": {
      "type": "object",
      "properties": {
        "packageRepoRef": {
          "$ref": "#/definitions/v1alpha1PackageRepositoryReference"
        }
      },
      "description": "Response for UpdatePackageRepository",
      "title": "UpdatePackageRepositoryResponse"
    },
    "v1alpha1UsernamePassword": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "title": "In clear text"
        },
        "password": {
          "type": "string",
          "title": "In clear text"
        }
      },
      "title": "UsernamePassword"
    },
    "v1alpha1VersionReference": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "description": "The format of the version constraint depends on the backend. For example,\nfor a flux v2 and Carvel it's a semver expression, such as \"\u003e=10.3 \u003c 10.4\"",
          "title": "Version"
        }
      },
      "description": "A VersionReference defines a version or constraint limiting matching versions.\nThe reason it is a separate message is so that in the future we can add other\nfields as necessary (such as something similar to Carvel's `prereleases` option\nto its versionSelection).",
      "title": "VersionReference"
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "externalDocs": {
    "description": "Kubeapps GitHub repository",
    "url": "https://github.com/vmware-tanzu/kubeapps"
  }
}
