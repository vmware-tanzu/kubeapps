syntax = "proto3";
package kubeappsapis.plugins.kapp_controller.packages.v1alpha1;
option go_package = "github.com/kubeapps/kubeapps/cmd/kubeapps-apis/gen/plugins/kapp_controller/packages/v1alpha1";

import "google/api/annotations.proto";
import "kubeappsapis/core/packages/v1alpha1/packages.proto";
import "kubeappsapis/core/plugins/v1alpha1/plugins.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

service KappControllerPackagesService {
  // GetAvailablePackageSummaries returns the available packages managed by the 'kapp_controller' plugin
  rpc GetAvailablePackageSummaries(kubeappsapis.core.packages.v1alpha1.GetAvailablePackageSummariesRequest) returns (kubeappsapis.core.packages.v1alpha1.GetAvailablePackageSummariesResponse) {
    option (google.api.http) = {
      get: "/plugins/kapp_controller/packages/v1alpha1/availablepackagesummaries"
    };
  };

  // GetAvailablePackageDetail returns the package details managed by the 'kapp_controller' plugin
  rpc GetAvailablePackageDetail(kubeappsapis.core.packages.v1alpha1.GetAvailablePackageDetailRequest) returns (kubeappsapis.core.packages.v1alpha1.GetAvailablePackageDetailResponse) {
    option (google.api.http) = {
      get: "/plugins/kapp_controller/packages/v1alpha1/availablepackagedetails"
    };
  }

  // GetPackageRepositories returns the repositories managed by the 'kapp_controller' plugin
  rpc GetPackageRepositories(GetPackageRepositoriesRequest) returns (GetPackageRepositoriesResponse) {
    option (google.api.http) = {
      get: "/plugins/kapp_controller/packages/v1alpha1/packagerepositories"
    };
  };

  // GetAvailablePackageVersions returns the package versions managed by the 'kapp_controller' plugin
  rpc GetAvailablePackageVersions(kubeappsapis.core.packages.v1alpha1.GetAvailablePackageVersionsRequest) returns (kubeappsapis.core.packages.v1alpha1.GetAvailablePackageVersionsResponse) {
    option (google.api.http) = {
      get: "/plugins/kapp_controller/packages/v1alpha1/availablepackageversions"
    };
  }

  // GetInstalledPackageSummaries returns the installed packages managed by the 'kapp_controller' plugin
  rpc GetInstalledPackageSummaries(kubeappsapis.core.packages.v1alpha1.GetInstalledPackageSummariesRequest) returns (kubeappsapis.core.packages.v1alpha1.GetInstalledPackageSummariesResponse) {
    option (google.api.http) = {
      get: "/plugins/kapp_controller/packages/v1alpha1/installedpackagesummaries"
    };
  }
}

// Specific messages used by the 'kapp_controller' plugin

// GetPackageRepositories
//
// Request for GetPackageRepositories
message GetPackageRepositoriesRequest {
  // The context (cluster/namespace) for the request
  kubeappsapis.core.packages.v1alpha1.Context context = 1;
  // TODO: Add standard filters.
}

// GetPackageRepositories
//
// Response for GetPackageRepositories
message GetPackageRepositoriesResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    example: '{"repositories": [{"name": "repo-name.example.com", "namespace": "", "url": "foo.registry.example.com/repo-name/main@sha256:cecd9b51b1f29a773a5228fe04faec121c9fbd2969de55b0c3804269a1d57aa5"}]}'
  };

  // Repositories
  //
  // List of PackageRepository
  repeated PackageRepository repositories = 1;
}

// PackageRepository
//
// A PackageRepository defines a repository of packages for installation.
message PackageRepository {
  // TODO: add example for API docs
  // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
  //   example: '{}'
  // };

  // Package repository name
  //
  // The name identifying package repository on the cluster.
  string name = 1;

  // Package repository namespace
  //
  // An optional namespace for namespaced package repositories.
  string namespace = 2;

  // Package repository URL
  //
  // A url identifying the package repository location.
  string url = 3;

  // Package repository plugin
  //
  // The plugin used to interact with this package repository.
  kubeappsapis.core.plugins.v1alpha1.Plugin plugin = 4;

  // TODO: Other fields such as type, status... TBD.
}
