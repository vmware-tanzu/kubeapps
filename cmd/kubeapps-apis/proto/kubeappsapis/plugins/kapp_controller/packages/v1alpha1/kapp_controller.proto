// Copyright 2021-2022 the Kubeapps contributors.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";
package kubeappsapis.plugins.kapp_controller.packages.v1alpha1;
option go_package = "github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/gen/plugins/kapp_controller/packages/v1alpha1";

import "google/api/annotations.proto";
import "kubeappsapis/core/packages/v1alpha1/packages.proto";
import "kubeappsapis/core/packages/v1alpha1/repositories.proto";
import "kubeappsapis/core/plugins/v1alpha1/plugins.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

service KappControllerPackagesService {
  // GetAvailablePackageSummaries returns the available packages managed by the 'kapp_controller' plugin
  rpc GetAvailablePackageSummaries(kubeappsapis.core.packages.v1alpha1.GetAvailablePackageSummariesRequest) returns (kubeappsapis.core.packages.v1alpha1.GetAvailablePackageSummariesResponse) {
    option (google.api.http) = {
      get: "/plugins/kapp_controller/packages/v1alpha1/availablepackages"
    };
  };

  // GetAvailablePackageDetail returns the package details managed by the 'kapp_controller' plugin
  rpc GetAvailablePackageDetail(kubeappsapis.core.packages.v1alpha1.GetAvailablePackageDetailRequest) returns (kubeappsapis.core.packages.v1alpha1.GetAvailablePackageDetailResponse) {
    option (google.api.http) = {
      get: "/plugins/kapp_controller/packages/v1alpha1/availablepackages/c/{available_package_ref.context.cluster}/ns/{available_package_ref.context.namespace}/{available_package_ref.identifier=**}"
    };
  }

  // GetAvailablePackageVersions returns the package versions managed by the 'kapp_controller' plugin
  rpc GetAvailablePackageVersions(kubeappsapis.core.packages.v1alpha1.GetAvailablePackageVersionsRequest) returns (kubeappsapis.core.packages.v1alpha1.GetAvailablePackageVersionsResponse) {
    option (google.api.http) = {
      get: "/plugins/kapp_controller/packages/v1alpha1/availablepackages/c/{available_package_ref.context.cluster}/ns/{available_package_ref.context.namespace}/{available_package_ref.identifier=**}/versions"
    };
  }

  // GetInstalledPackageSummaries returns the installed packages managed by the 'kapp_controller' plugin
  rpc GetInstalledPackageSummaries(kubeappsapis.core.packages.v1alpha1.GetInstalledPackageSummariesRequest) returns (kubeappsapis.core.packages.v1alpha1.GetInstalledPackageSummariesResponse) {
    option (google.api.http) = {
      get: "/plugins/kapp_controller/packages/v1alpha1/installedpackages"
    };
  }

  // GetInstalledPackageDetail returns the requested installed package managed by the 'kapp_controller' plugin
  rpc GetInstalledPackageDetail(kubeappsapis.core.packages.v1alpha1.GetInstalledPackageDetailRequest) returns (kubeappsapis.core.packages.v1alpha1.GetInstalledPackageDetailResponse) {
    option (google.api.http) = {
      get: "/plugins/kapp_controller/packages/v1alpha1/installedpackages/c/{installed_package_ref.context.cluster}/ns/{installed_package_ref.context.namespace}/{installed_package_ref.identifier}"
    };
  }

  // CreateInstalledPackage creates an installed package based on the request.
  rpc CreateInstalledPackage(kubeappsapis.core.packages.v1alpha1.CreateInstalledPackageRequest) returns (kubeappsapis.core.packages.v1alpha1.CreateInstalledPackageResponse) {
    option (google.api.http) = {
      post: "/plugins/kapp_controller/packages/v1alpha1/installedpackages"
      body: "*"
    };
  }

  // UpdateInstalledPackage updates an installed package based on the request.
  rpc UpdateInstalledPackage(kubeappsapis.core.packages.v1alpha1.UpdateInstalledPackageRequest) returns (kubeappsapis.core.packages.v1alpha1.UpdateInstalledPackageResponse) {
    option (google.api.http) = {
      put: "/plugins/kapp_controller/packages/v1alpha1/installedpackages/c/{installed_package_ref.context.cluster}/ns/{installed_package_ref.context.namespace}/{installed_package_ref.identifier}"
      body: "*"
    };
  }

  // DeleteInstalledPackage deletes an installed package based on the request.
  rpc DeleteInstalledPackage(kubeappsapis.core.packages.v1alpha1.DeleteInstalledPackageRequest) returns (kubeappsapis.core.packages.v1alpha1.DeleteInstalledPackageResponse) {
    option (google.api.http) = {
      delete: "/plugins/kapp_controller/packages/v1alpha1/installedpackages/c/{installed_package_ref.context.cluster}/ns/{installed_package_ref.context.namespace}/{installed_package_ref.identifier}"
    };
  }

  // GetInstalledPackageResourceRefs returns the references for the Kubernetes resources created by
  // an installed package.
  rpc GetInstalledPackageResourceRefs(kubeappsapis.core.packages.v1alpha1.GetInstalledPackageResourceRefsRequest) returns (kubeappsapis.core.packages.v1alpha1.GetInstalledPackageResourceRefsResponse) {
    option (google.api.http) = {
      get: "/plugins/kapp_controller/packages/v1alpha1/installedpackages/c/{installed_package_ref.context.cluster}/ns/{installed_package_ref.context.namespace}/{installed_package_ref.identifier}/resourcerefs"
    };
  }
}

service KappControllerRepositoriesService {
  // AddPackageRepository add an existing package repository to the set of ones already managed by the 'kapp_controller' plugin
  rpc AddPackageRepository(kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryRequest) returns (kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryResponse) {
    option (google.api.http) = {
      post: "/plugins/kapp_controller/packages/v1alpha1/repositories"
      body: "*"
    };
  }

  rpc GetPackageRepositoryDetail(kubeappsapis.core.packages.v1alpha1.GetPackageRepositoryDetailRequest) returns (kubeappsapis.core.packages.v1alpha1.GetPackageRepositoryDetailResponse) {
    option (google.api.http) = {
      get: "/plugins/kapp_controller/packages/v1alpha1/repositories/c/{package_repo_ref.context.cluster}/ns/{package_repo_ref.context.namespace}/{package_repo_ref.identifier=**}"
    };
  }

  rpc GetPackageRepositorySummaries(kubeappsapis.core.packages.v1alpha1.GetPackageRepositorySummariesRequest) returns (kubeappsapis.core.packages.v1alpha1.GetPackageRepositorySummariesResponse) {
    option (google.api.http) = {
      get: "/plugins/kapp_controller/packages/v1alpha1/repositories"
    };
  }

  rpc UpdatePackageRepository(kubeappsapis.core.packages.v1alpha1.UpdatePackageRepositoryRequest) returns (kubeappsapis.core.packages.v1alpha1.UpdatePackageRepositoryResponse) {
    option (google.api.http) = {
      put: "/plugins/kapp_controller/packages/v1alpha1/repositories/c/{package_repo_ref.context.cluster}/ns/{package_repo_ref.context.namespace}/{package_repo_ref.identifier=**}"
      body: "*"
    };
  }

  rpc DeletePackageRepository(kubeappsapis.core.packages.v1alpha1.DeletePackageRepositoryRequest) returns (kubeappsapis.core.packages.v1alpha1.DeletePackageRepositoryResponse) {
    option (google.api.http) = {
      delete: "/plugins/kapp_controller/packages/v1alpha1/repositories/c/{package_repo_ref.context.cluster}/ns/{package_repo_ref.context.namespace}/{package_repo_ref.identifier=**}"
    };
  }
}

// KappControllerPackageRepositoryCustomDetail
//
// custom fields to support other carvel repository types
// this is mirror from https://github.com/vmware-tanzu/carvel-kapp-controller/blob/develop/pkg/apis/kappctrl/v1alpha1/generated.proto
// todo -> find a way to define those messages by referencing proto files from kapp_controller rather than duplication
message KappControllerPackageRepositoryCustomDetail {
   PackageRepositoryFetch fetch   = 1;
}

message PackageRepositoryFetch {
  PackageRepositoryImgpkg imgpkg_bundle = 1;
  PackageRepositoryImage image          = 2;
  PackageRepositoryGit git              = 3;
  PackageRepositoryHttp http            = 4;
  PackageRepositoryInline inline        = 5;
}

message PackageRepositoryImgpkg {
  VersionSelection tag_selection = 1;
}

message PackageRepositoryImage {
  VersionSelection tag_selection = 1;
  string sub_path = 2;
}

message PackageRepositoryGit {
  string ref = 1;
  VersionSelection ref_selection = 2;
  string sub_path = 3;
  bool lfs_skip_smudge = 4;
}

message PackageRepositoryHttp {
  string sub_path = 1;
  string sha256 = 2;
}

message PackageRepositoryInline {
  message SourceRef {
    string name = 1;
    string directory_path = 2;
  }
  message Source {
      SourceRef secret_ref = 1;
      SourceRef config_map_ref = 2;
  }
  map<string,string> paths = 1;
  repeated Source paths_from = 2;
}

message VersionSelection {
  VersionSelectionSemver semver = 1;
}
message VersionSelectionSemver {
  string constraints = 1;
  VersionSelectionSemverPrereleases prereleases = 2;
}
message VersionSelectionSemverPrereleases {
  repeated string identifiers = 1;
}
