syntax = "proto3";
package kubeappsapis.plugins.helm.packages.v1alpha1;
option go_package = "github.com/kubeapps/kubeapps/cmd/kubeapps-apis/gen/plugins/helm/packages/v1alpha1";

import "google/api/annotations.proto";
import "kubeappsapis/core/packages/v1alpha1/packages.proto";
import "kubeappsapis/core/plugins/v1alpha1/plugins.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

service HelmPackagesService {
  // GetAvailablePackageSummaries returns the available packages managed by the 'helm' plugin
  rpc GetAvailablePackageSummaries(kubeappsapis.core.packages.v1alpha1.GetAvailablePackageSummariesRequest) returns (kubeappsapis.core.packages.v1alpha1.GetAvailablePackageSummariesResponse) {
    option (google.api.http) = {
      get: "/plugins/helm/packages/v1alpha1/availablepackages"
    };
  };

  // GetAvailablePackageDetail returns the package details managed by the 'helm' plugin
  rpc GetAvailablePackageDetail(kubeappsapis.core.packages.v1alpha1.GetAvailablePackageDetailRequest) returns (kubeappsapis.core.packages.v1alpha1.GetAvailablePackageDetailResponse) {
    option (google.api.http) = {
      get: "/plugins/helm/packages/v1alpha1/availablepackages/c/{available_package_ref.context.cluster}/ns/{available_package_ref.context.namespace}/{available_package_ref.identifier}"
    };
  }

  // GetAvailablePackageVersions returns the package versions managed by the 'helm' plugin
  rpc GetAvailablePackageVersions(kubeappsapis.core.packages.v1alpha1.GetAvailablePackageVersionsRequest) returns (kubeappsapis.core.packages.v1alpha1.GetAvailablePackageVersionsResponse) {
    option (google.api.http) = {
      get: "/plugins/helm/packages/v1alpha1/availablepackages/c/{available_package_ref.context.cluster}/ns/{available_package_ref.context.namespace}/{available_package_ref.identifier}/versions"
    };
  }

  // GetInstalledPackageSummaries returns the installed packages managed by the 'helm' plugin
  rpc GetInstalledPackageSummaries(kubeappsapis.core.packages.v1alpha1.GetInstalledPackageSummariesRequest) returns (kubeappsapis.core.packages.v1alpha1.GetInstalledPackageSummariesResponse) {
    option (google.api.http) = {
      get: "/plugins/helm/packages/v1alpha1/installedpackages"
    };
  }

  // GetInstalledPackageDetail returns the requested installed package managed by the 'helm' plugin
  rpc GetInstalledPackageDetail(kubeappsapis.core.packages.v1alpha1.GetInstalledPackageDetailRequest) returns (kubeappsapis.core.packages.v1alpha1.GetInstalledPackageDetailResponse) {
    option (google.api.http) = {
      get: "/plugins/helm/packages/v1alpha1/installedpackages/c/{installed_package_ref.context.cluster}/ns/{installed_package_ref.context.namespace}/{installed_package_ref.identifier}"
    };
  }

  // CreateInstalledPackage creates an installed package based on the request.
  rpc CreateInstalledPackage(kubeappsapis.core.packages.v1alpha1.CreateInstalledPackageRequest) returns (kubeappsapis.core.packages.v1alpha1.CreateInstalledPackageResponse) {
    option (google.api.http) = {
      post: "/plugins/helm/packages/v1alpha1/installedpackages"
      body: "*"
    };
  }

  // UpdateInstalledPackage updates an installed package based on the request.
  rpc UpdateInstalledPackage(kubeappsapis.core.packages.v1alpha1.UpdateInstalledPackageRequest) returns (kubeappsapis.core.packages.v1alpha1.UpdateInstalledPackageResponse) {
    option (google.api.http) = {
      put: "/plugins/helm/packages/v1alpha1/installedpackages/c/{installed_package_ref.context.cluster}/ns/{installed_package_ref.context.namespace}/{installed_package_ref.identifier}"
      body: "*"
    };
  }

  // DeleteInstalledPackage deletes an installed package based on the request.
  rpc DeleteInstalledPackage(kubeappsapis.core.packages.v1alpha1.DeleteInstalledPackageRequest) returns (kubeappsapis.core.packages.v1alpha1.DeleteInstalledPackageResponse) {
    option (google.api.http) = {
      delete: "/plugins/helm/packages/v1alpha1/installedpackages/c/{installed_package_ref.context.cluster}/ns/{installed_package_ref.context.namespace}/{installed_package_ref.identifier}"
    };
  }

  // RollbackInstalledPackage updates an installed package based on the request.
  rpc RollbackInstalledPackage(RollbackInstalledPackageRequest) returns (RollbackInstalledPackageResponse) {
    option (google.api.http) = {
      put: "/plugins/helm/packages/v1alpha1/installedpackages/c/{installed_package_ref.context.cluster}/ns/{installed_package_ref.context.namespace}/{installed_package_ref.identifier}/rollback"
      body: "*"
    };
  }
}

// InstalledPackageDetailCustomDataHelm
//
// InstalledPackageDetailCustomDataHelm is a message type used for the
// InstalledPackageDetail.CustomDetail field by the helm plugin.
message InstalledPackageDetailCustomDataHelm {

  // ReleaseRevision
  //
  // A number identifying the Helm revision
  int32 release_revision = 2;
}

message RollbackInstalledPackageRequest {

  // Installed package reference
  //
  // A reference uniquely identifying the installed package.
  kubeappsapis.core.packages.v1alpha1.InstalledPackageReference installed_package_ref = 1;

  // ReleaseRevision
  //
  // A number identifying the Helm revision to which to rollback.
  int32 release_revision = 2;
}

// RollbackInstalledPackageResponse
//
// Response for RollbackInstalledPackage
message RollbackInstalledPackageResponse {
  // TODO: add example for API docs
  // option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
  //   example: '{"installed_package_ref": {}}'
  // };
  kubeappsapis.core.packages.v1alpha1.InstalledPackageReference installed_package_ref = 1;
}
