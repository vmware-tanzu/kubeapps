// Copyright 2021-2023 the Kubeapps contributors.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kubeappsapis/plugins/kapp_controller/packages/v1alpha1/kapp_controller.proto

package v1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/gen/core/packages/v1alpha1"
	_ "github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/gen/plugins/kapp_controller/packages/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KappControllerPackagesServiceName is the fully-qualified name of the
	// KappControllerPackagesService service.
	KappControllerPackagesServiceName = "kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService"
	// KappControllerRepositoriesServiceName is the fully-qualified name of the
	// KappControllerRepositoriesService service.
	KappControllerRepositoriesServiceName = "kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KappControllerPackagesServiceGetAvailablePackageSummariesProcedure is the fully-qualified name of
	// the KappControllerPackagesService's GetAvailablePackageSummaries RPC.
	KappControllerPackagesServiceGetAvailablePackageSummariesProcedure = "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService/GetAvailablePackageSummaries"
	// KappControllerPackagesServiceGetAvailablePackageDetailProcedure is the fully-qualified name of
	// the KappControllerPackagesService's GetAvailablePackageDetail RPC.
	KappControllerPackagesServiceGetAvailablePackageDetailProcedure = "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService/GetAvailablePackageDetail"
	// KappControllerPackagesServiceGetAvailablePackageVersionsProcedure is the fully-qualified name of
	// the KappControllerPackagesService's GetAvailablePackageVersions RPC.
	KappControllerPackagesServiceGetAvailablePackageVersionsProcedure = "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService/GetAvailablePackageVersions"
	// KappControllerPackagesServiceGetInstalledPackageSummariesProcedure is the fully-qualified name of
	// the KappControllerPackagesService's GetInstalledPackageSummaries RPC.
	KappControllerPackagesServiceGetInstalledPackageSummariesProcedure = "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService/GetInstalledPackageSummaries"
	// KappControllerPackagesServiceGetInstalledPackageDetailProcedure is the fully-qualified name of
	// the KappControllerPackagesService's GetInstalledPackageDetail RPC.
	KappControllerPackagesServiceGetInstalledPackageDetailProcedure = "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService/GetInstalledPackageDetail"
	// KappControllerPackagesServiceCreateInstalledPackageProcedure is the fully-qualified name of the
	// KappControllerPackagesService's CreateInstalledPackage RPC.
	KappControllerPackagesServiceCreateInstalledPackageProcedure = "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService/CreateInstalledPackage"
	// KappControllerPackagesServiceUpdateInstalledPackageProcedure is the fully-qualified name of the
	// KappControllerPackagesService's UpdateInstalledPackage RPC.
	KappControllerPackagesServiceUpdateInstalledPackageProcedure = "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService/UpdateInstalledPackage"
	// KappControllerPackagesServiceDeleteInstalledPackageProcedure is the fully-qualified name of the
	// KappControllerPackagesService's DeleteInstalledPackage RPC.
	KappControllerPackagesServiceDeleteInstalledPackageProcedure = "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService/DeleteInstalledPackage"
	// KappControllerPackagesServiceGetInstalledPackageResourceRefsProcedure is the fully-qualified name
	// of the KappControllerPackagesService's GetInstalledPackageResourceRefs RPC.
	KappControllerPackagesServiceGetInstalledPackageResourceRefsProcedure = "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService/GetInstalledPackageResourceRefs"
	// KappControllerRepositoriesServiceAddPackageRepositoryProcedure is the fully-qualified name of the
	// KappControllerRepositoriesService's AddPackageRepository RPC.
	KappControllerRepositoriesServiceAddPackageRepositoryProcedure = "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService/AddPackageRepository"
	// KappControllerRepositoriesServiceGetPackageRepositoryDetailProcedure is the fully-qualified name
	// of the KappControllerRepositoriesService's GetPackageRepositoryDetail RPC.
	KappControllerRepositoriesServiceGetPackageRepositoryDetailProcedure = "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService/GetPackageRepositoryDetail"
	// KappControllerRepositoriesServiceGetPackageRepositorySummariesProcedure is the fully-qualified
	// name of the KappControllerRepositoriesService's GetPackageRepositorySummaries RPC.
	KappControllerRepositoriesServiceGetPackageRepositorySummariesProcedure = "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService/GetPackageRepositorySummaries"
	// KappControllerRepositoriesServiceUpdatePackageRepositoryProcedure is the fully-qualified name of
	// the KappControllerRepositoriesService's UpdatePackageRepository RPC.
	KappControllerRepositoriesServiceUpdatePackageRepositoryProcedure = "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService/UpdatePackageRepository"
	// KappControllerRepositoriesServiceDeletePackageRepositoryProcedure is the fully-qualified name of
	// the KappControllerRepositoriesService's DeletePackageRepository RPC.
	KappControllerRepositoriesServiceDeletePackageRepositoryProcedure = "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService/DeletePackageRepository"
	// KappControllerRepositoriesServiceGetPackageRepositoryPermissionsProcedure is the fully-qualified
	// name of the KappControllerRepositoriesService's GetPackageRepositoryPermissions RPC.
	KappControllerRepositoriesServiceGetPackageRepositoryPermissionsProcedure = "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService/GetPackageRepositoryPermissions"
)

// KappControllerPackagesServiceClient is a client for the
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService service.
type KappControllerPackagesServiceClient interface {
	// GetAvailablePackageSummaries returns the available packages managed by the 'kapp_controller' plugin
	GetAvailablePackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error)
	// GetAvailablePackageDetail returns the package details managed by the 'kapp_controller' plugin
	GetAvailablePackageDetail(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error)
	// GetAvailablePackageVersions returns the package versions managed by the 'kapp_controller' plugin
	GetAvailablePackageVersions(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error)
	// GetInstalledPackageSummaries returns the installed packages managed by the 'kapp_controller' plugin
	GetInstalledPackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error)
	// GetInstalledPackageDetail returns the requested installed package managed by the 'kapp_controller' plugin
	GetInstalledPackageDetail(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error)
	// CreateInstalledPackage creates an installed package based on the request.
	CreateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error)
	// UpdateInstalledPackage updates an installed package based on the request.
	UpdateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error)
	// DeleteInstalledPackage deletes an installed package based on the request.
	DeleteInstalledPackage(context.Context, *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error)
	// GetInstalledPackageResourceRefs returns the references for the Kubernetes resources created by
	// an installed package.
	GetInstalledPackageResourceRefs(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error)
}

// NewKappControllerPackagesServiceClient constructs a client for the
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKappControllerPackagesServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KappControllerPackagesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kappControllerPackagesServiceClient{
		getAvailablePackageSummaries: connect_go.NewClient[v1alpha1.GetAvailablePackageSummariesRequest, v1alpha1.GetAvailablePackageSummariesResponse](
			httpClient,
			baseURL+KappControllerPackagesServiceGetAvailablePackageSummariesProcedure,
			opts...,
		),
		getAvailablePackageDetail: connect_go.NewClient[v1alpha1.GetAvailablePackageDetailRequest, v1alpha1.GetAvailablePackageDetailResponse](
			httpClient,
			baseURL+KappControllerPackagesServiceGetAvailablePackageDetailProcedure,
			opts...,
		),
		getAvailablePackageVersions: connect_go.NewClient[v1alpha1.GetAvailablePackageVersionsRequest, v1alpha1.GetAvailablePackageVersionsResponse](
			httpClient,
			baseURL+KappControllerPackagesServiceGetAvailablePackageVersionsProcedure,
			opts...,
		),
		getInstalledPackageSummaries: connect_go.NewClient[v1alpha1.GetInstalledPackageSummariesRequest, v1alpha1.GetInstalledPackageSummariesResponse](
			httpClient,
			baseURL+KappControllerPackagesServiceGetInstalledPackageSummariesProcedure,
			opts...,
		),
		getInstalledPackageDetail: connect_go.NewClient[v1alpha1.GetInstalledPackageDetailRequest, v1alpha1.GetInstalledPackageDetailResponse](
			httpClient,
			baseURL+KappControllerPackagesServiceGetInstalledPackageDetailProcedure,
			opts...,
		),
		createInstalledPackage: connect_go.NewClient[v1alpha1.CreateInstalledPackageRequest, v1alpha1.CreateInstalledPackageResponse](
			httpClient,
			baseURL+KappControllerPackagesServiceCreateInstalledPackageProcedure,
			opts...,
		),
		updateInstalledPackage: connect_go.NewClient[v1alpha1.UpdateInstalledPackageRequest, v1alpha1.UpdateInstalledPackageResponse](
			httpClient,
			baseURL+KappControllerPackagesServiceUpdateInstalledPackageProcedure,
			opts...,
		),
		deleteInstalledPackage: connect_go.NewClient[v1alpha1.DeleteInstalledPackageRequest, v1alpha1.DeleteInstalledPackageResponse](
			httpClient,
			baseURL+KappControllerPackagesServiceDeleteInstalledPackageProcedure,
			opts...,
		),
		getInstalledPackageResourceRefs: connect_go.NewClient[v1alpha1.GetInstalledPackageResourceRefsRequest, v1alpha1.GetInstalledPackageResourceRefsResponse](
			httpClient,
			baseURL+KappControllerPackagesServiceGetInstalledPackageResourceRefsProcedure,
			opts...,
		),
	}
}

// kappControllerPackagesServiceClient implements KappControllerPackagesServiceClient.
type kappControllerPackagesServiceClient struct {
	getAvailablePackageSummaries    *connect_go.Client[v1alpha1.GetAvailablePackageSummariesRequest, v1alpha1.GetAvailablePackageSummariesResponse]
	getAvailablePackageDetail       *connect_go.Client[v1alpha1.GetAvailablePackageDetailRequest, v1alpha1.GetAvailablePackageDetailResponse]
	getAvailablePackageVersions     *connect_go.Client[v1alpha1.GetAvailablePackageVersionsRequest, v1alpha1.GetAvailablePackageVersionsResponse]
	getInstalledPackageSummaries    *connect_go.Client[v1alpha1.GetInstalledPackageSummariesRequest, v1alpha1.GetInstalledPackageSummariesResponse]
	getInstalledPackageDetail       *connect_go.Client[v1alpha1.GetInstalledPackageDetailRequest, v1alpha1.GetInstalledPackageDetailResponse]
	createInstalledPackage          *connect_go.Client[v1alpha1.CreateInstalledPackageRequest, v1alpha1.CreateInstalledPackageResponse]
	updateInstalledPackage          *connect_go.Client[v1alpha1.UpdateInstalledPackageRequest, v1alpha1.UpdateInstalledPackageResponse]
	deleteInstalledPackage          *connect_go.Client[v1alpha1.DeleteInstalledPackageRequest, v1alpha1.DeleteInstalledPackageResponse]
	getInstalledPackageResourceRefs *connect_go.Client[v1alpha1.GetInstalledPackageResourceRefsRequest, v1alpha1.GetInstalledPackageResourceRefsResponse]
}

// GetAvailablePackageSummaries calls
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.GetAvailablePackageSummaries.
func (c *kappControllerPackagesServiceClient) GetAvailablePackageSummaries(ctx context.Context, req *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error) {
	return c.getAvailablePackageSummaries.CallUnary(ctx, req)
}

// GetAvailablePackageDetail calls
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.GetAvailablePackageDetail.
func (c *kappControllerPackagesServiceClient) GetAvailablePackageDetail(ctx context.Context, req *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error) {
	return c.getAvailablePackageDetail.CallUnary(ctx, req)
}

// GetAvailablePackageVersions calls
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.GetAvailablePackageVersions.
func (c *kappControllerPackagesServiceClient) GetAvailablePackageVersions(ctx context.Context, req *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error) {
	return c.getAvailablePackageVersions.CallUnary(ctx, req)
}

// GetInstalledPackageSummaries calls
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.GetInstalledPackageSummaries.
func (c *kappControllerPackagesServiceClient) GetInstalledPackageSummaries(ctx context.Context, req *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error) {
	return c.getInstalledPackageSummaries.CallUnary(ctx, req)
}

// GetInstalledPackageDetail calls
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.GetInstalledPackageDetail.
func (c *kappControllerPackagesServiceClient) GetInstalledPackageDetail(ctx context.Context, req *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error) {
	return c.getInstalledPackageDetail.CallUnary(ctx, req)
}

// CreateInstalledPackage calls
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.CreateInstalledPackage.
func (c *kappControllerPackagesServiceClient) CreateInstalledPackage(ctx context.Context, req *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error) {
	return c.createInstalledPackage.CallUnary(ctx, req)
}

// UpdateInstalledPackage calls
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.UpdateInstalledPackage.
func (c *kappControllerPackagesServiceClient) UpdateInstalledPackage(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error) {
	return c.updateInstalledPackage.CallUnary(ctx, req)
}

// DeleteInstalledPackage calls
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.DeleteInstalledPackage.
func (c *kappControllerPackagesServiceClient) DeleteInstalledPackage(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error) {
	return c.deleteInstalledPackage.CallUnary(ctx, req)
}

// GetInstalledPackageResourceRefs calls
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.GetInstalledPackageResourceRefs.
func (c *kappControllerPackagesServiceClient) GetInstalledPackageResourceRefs(ctx context.Context, req *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error) {
	return c.getInstalledPackageResourceRefs.CallUnary(ctx, req)
}

// KappControllerPackagesServiceHandler is an implementation of the
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService service.
type KappControllerPackagesServiceHandler interface {
	// GetAvailablePackageSummaries returns the available packages managed by the 'kapp_controller' plugin
	GetAvailablePackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error)
	// GetAvailablePackageDetail returns the package details managed by the 'kapp_controller' plugin
	GetAvailablePackageDetail(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error)
	// GetAvailablePackageVersions returns the package versions managed by the 'kapp_controller' plugin
	GetAvailablePackageVersions(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error)
	// GetInstalledPackageSummaries returns the installed packages managed by the 'kapp_controller' plugin
	GetInstalledPackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error)
	// GetInstalledPackageDetail returns the requested installed package managed by the 'kapp_controller' plugin
	GetInstalledPackageDetail(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error)
	// CreateInstalledPackage creates an installed package based on the request.
	CreateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error)
	// UpdateInstalledPackage updates an installed package based on the request.
	UpdateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error)
	// DeleteInstalledPackage deletes an installed package based on the request.
	DeleteInstalledPackage(context.Context, *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error)
	// GetInstalledPackageResourceRefs returns the references for the Kubernetes resources created by
	// an installed package.
	GetInstalledPackageResourceRefs(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error)
}

// NewKappControllerPackagesServiceHandler builds an HTTP handler from the service implementation.
// It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKappControllerPackagesServiceHandler(svc KappControllerPackagesServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	kappControllerPackagesServiceGetAvailablePackageSummariesHandler := connect_go.NewUnaryHandler(
		KappControllerPackagesServiceGetAvailablePackageSummariesProcedure,
		svc.GetAvailablePackageSummaries,
		opts...,
	)
	kappControllerPackagesServiceGetAvailablePackageDetailHandler := connect_go.NewUnaryHandler(
		KappControllerPackagesServiceGetAvailablePackageDetailProcedure,
		svc.GetAvailablePackageDetail,
		opts...,
	)
	kappControllerPackagesServiceGetAvailablePackageVersionsHandler := connect_go.NewUnaryHandler(
		KappControllerPackagesServiceGetAvailablePackageVersionsProcedure,
		svc.GetAvailablePackageVersions,
		opts...,
	)
	kappControllerPackagesServiceGetInstalledPackageSummariesHandler := connect_go.NewUnaryHandler(
		KappControllerPackagesServiceGetInstalledPackageSummariesProcedure,
		svc.GetInstalledPackageSummaries,
		opts...,
	)
	kappControllerPackagesServiceGetInstalledPackageDetailHandler := connect_go.NewUnaryHandler(
		KappControllerPackagesServiceGetInstalledPackageDetailProcedure,
		svc.GetInstalledPackageDetail,
		opts...,
	)
	kappControllerPackagesServiceCreateInstalledPackageHandler := connect_go.NewUnaryHandler(
		KappControllerPackagesServiceCreateInstalledPackageProcedure,
		svc.CreateInstalledPackage,
		opts...,
	)
	kappControllerPackagesServiceUpdateInstalledPackageHandler := connect_go.NewUnaryHandler(
		KappControllerPackagesServiceUpdateInstalledPackageProcedure,
		svc.UpdateInstalledPackage,
		opts...,
	)
	kappControllerPackagesServiceDeleteInstalledPackageHandler := connect_go.NewUnaryHandler(
		KappControllerPackagesServiceDeleteInstalledPackageProcedure,
		svc.DeleteInstalledPackage,
		opts...,
	)
	kappControllerPackagesServiceGetInstalledPackageResourceRefsHandler := connect_go.NewUnaryHandler(
		KappControllerPackagesServiceGetInstalledPackageResourceRefsProcedure,
		svc.GetInstalledPackageResourceRefs,
		opts...,
	)
	return "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KappControllerPackagesServiceGetAvailablePackageSummariesProcedure:
			kappControllerPackagesServiceGetAvailablePackageSummariesHandler.ServeHTTP(w, r)
		case KappControllerPackagesServiceGetAvailablePackageDetailProcedure:
			kappControllerPackagesServiceGetAvailablePackageDetailHandler.ServeHTTP(w, r)
		case KappControllerPackagesServiceGetAvailablePackageVersionsProcedure:
			kappControllerPackagesServiceGetAvailablePackageVersionsHandler.ServeHTTP(w, r)
		case KappControllerPackagesServiceGetInstalledPackageSummariesProcedure:
			kappControllerPackagesServiceGetInstalledPackageSummariesHandler.ServeHTTP(w, r)
		case KappControllerPackagesServiceGetInstalledPackageDetailProcedure:
			kappControllerPackagesServiceGetInstalledPackageDetailHandler.ServeHTTP(w, r)
		case KappControllerPackagesServiceCreateInstalledPackageProcedure:
			kappControllerPackagesServiceCreateInstalledPackageHandler.ServeHTTP(w, r)
		case KappControllerPackagesServiceUpdateInstalledPackageProcedure:
			kappControllerPackagesServiceUpdateInstalledPackageHandler.ServeHTTP(w, r)
		case KappControllerPackagesServiceDeleteInstalledPackageProcedure:
			kappControllerPackagesServiceDeleteInstalledPackageHandler.ServeHTTP(w, r)
		case KappControllerPackagesServiceGetInstalledPackageResourceRefsProcedure:
			kappControllerPackagesServiceGetInstalledPackageResourceRefsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKappControllerPackagesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKappControllerPackagesServiceHandler struct{}

func (UnimplementedKappControllerPackagesServiceHandler) GetAvailablePackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.GetAvailablePackageSummaries is not implemented"))
}

func (UnimplementedKappControllerPackagesServiceHandler) GetAvailablePackageDetail(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.GetAvailablePackageDetail is not implemented"))
}

func (UnimplementedKappControllerPackagesServiceHandler) GetAvailablePackageVersions(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.GetAvailablePackageVersions is not implemented"))
}

func (UnimplementedKappControllerPackagesServiceHandler) GetInstalledPackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.GetInstalledPackageSummaries is not implemented"))
}

func (UnimplementedKappControllerPackagesServiceHandler) GetInstalledPackageDetail(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.GetInstalledPackageDetail is not implemented"))
}

func (UnimplementedKappControllerPackagesServiceHandler) CreateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.CreateInstalledPackage is not implemented"))
}

func (UnimplementedKappControllerPackagesServiceHandler) UpdateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.UpdateInstalledPackage is not implemented"))
}

func (UnimplementedKappControllerPackagesServiceHandler) DeleteInstalledPackage(context.Context, *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.DeleteInstalledPackage is not implemented"))
}

func (UnimplementedKappControllerPackagesServiceHandler) GetInstalledPackageResourceRefs(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerPackagesService.GetInstalledPackageResourceRefs is not implemented"))
}

// KappControllerRepositoriesServiceClient is a client for the
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService service.
type KappControllerRepositoriesServiceClient interface {
	// AddPackageRepository add an existing package repository to the set of ones already managed by the 'kapp_controller' plugin
	AddPackageRepository(context.Context, *connect_go.Request[v1alpha1.AddPackageRepositoryRequest]) (*connect_go.Response[v1alpha1.AddPackageRepositoryResponse], error)
	GetPackageRepositoryDetail(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryDetailRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryDetailResponse], error)
	GetPackageRepositorySummaries(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositorySummariesRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositorySummariesResponse], error)
	UpdatePackageRepository(context.Context, *connect_go.Request[v1alpha1.UpdatePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.UpdatePackageRepositoryResponse], error)
	DeletePackageRepository(context.Context, *connect_go.Request[v1alpha1.DeletePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.DeletePackageRepositoryResponse], error)
	GetPackageRepositoryPermissions(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryPermissionsRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryPermissionsResponse], error)
}

// NewKappControllerRepositoriesServiceClient constructs a client for the
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKappControllerRepositoriesServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KappControllerRepositoriesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kappControllerRepositoriesServiceClient{
		addPackageRepository: connect_go.NewClient[v1alpha1.AddPackageRepositoryRequest, v1alpha1.AddPackageRepositoryResponse](
			httpClient,
			baseURL+KappControllerRepositoriesServiceAddPackageRepositoryProcedure,
			opts...,
		),
		getPackageRepositoryDetail: connect_go.NewClient[v1alpha1.GetPackageRepositoryDetailRequest, v1alpha1.GetPackageRepositoryDetailResponse](
			httpClient,
			baseURL+KappControllerRepositoriesServiceGetPackageRepositoryDetailProcedure,
			opts...,
		),
		getPackageRepositorySummaries: connect_go.NewClient[v1alpha1.GetPackageRepositorySummariesRequest, v1alpha1.GetPackageRepositorySummariesResponse](
			httpClient,
			baseURL+KappControllerRepositoriesServiceGetPackageRepositorySummariesProcedure,
			opts...,
		),
		updatePackageRepository: connect_go.NewClient[v1alpha1.UpdatePackageRepositoryRequest, v1alpha1.UpdatePackageRepositoryResponse](
			httpClient,
			baseURL+KappControllerRepositoriesServiceUpdatePackageRepositoryProcedure,
			opts...,
		),
		deletePackageRepository: connect_go.NewClient[v1alpha1.DeletePackageRepositoryRequest, v1alpha1.DeletePackageRepositoryResponse](
			httpClient,
			baseURL+KappControllerRepositoriesServiceDeletePackageRepositoryProcedure,
			opts...,
		),
		getPackageRepositoryPermissions: connect_go.NewClient[v1alpha1.GetPackageRepositoryPermissionsRequest, v1alpha1.GetPackageRepositoryPermissionsResponse](
			httpClient,
			baseURL+KappControllerRepositoriesServiceGetPackageRepositoryPermissionsProcedure,
			opts...,
		),
	}
}

// kappControllerRepositoriesServiceClient implements KappControllerRepositoriesServiceClient.
type kappControllerRepositoriesServiceClient struct {
	addPackageRepository            *connect_go.Client[v1alpha1.AddPackageRepositoryRequest, v1alpha1.AddPackageRepositoryResponse]
	getPackageRepositoryDetail      *connect_go.Client[v1alpha1.GetPackageRepositoryDetailRequest, v1alpha1.GetPackageRepositoryDetailResponse]
	getPackageRepositorySummaries   *connect_go.Client[v1alpha1.GetPackageRepositorySummariesRequest, v1alpha1.GetPackageRepositorySummariesResponse]
	updatePackageRepository         *connect_go.Client[v1alpha1.UpdatePackageRepositoryRequest, v1alpha1.UpdatePackageRepositoryResponse]
	deletePackageRepository         *connect_go.Client[v1alpha1.DeletePackageRepositoryRequest, v1alpha1.DeletePackageRepositoryResponse]
	getPackageRepositoryPermissions *connect_go.Client[v1alpha1.GetPackageRepositoryPermissionsRequest, v1alpha1.GetPackageRepositoryPermissionsResponse]
}

// AddPackageRepository calls
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService.AddPackageRepository.
func (c *kappControllerRepositoriesServiceClient) AddPackageRepository(ctx context.Context, req *connect_go.Request[v1alpha1.AddPackageRepositoryRequest]) (*connect_go.Response[v1alpha1.AddPackageRepositoryResponse], error) {
	return c.addPackageRepository.CallUnary(ctx, req)
}

// GetPackageRepositoryDetail calls
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService.GetPackageRepositoryDetail.
func (c *kappControllerRepositoriesServiceClient) GetPackageRepositoryDetail(ctx context.Context, req *connect_go.Request[v1alpha1.GetPackageRepositoryDetailRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryDetailResponse], error) {
	return c.getPackageRepositoryDetail.CallUnary(ctx, req)
}

// GetPackageRepositorySummaries calls
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService.GetPackageRepositorySummaries.
func (c *kappControllerRepositoriesServiceClient) GetPackageRepositorySummaries(ctx context.Context, req *connect_go.Request[v1alpha1.GetPackageRepositorySummariesRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositorySummariesResponse], error) {
	return c.getPackageRepositorySummaries.CallUnary(ctx, req)
}

// UpdatePackageRepository calls
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService.UpdatePackageRepository.
func (c *kappControllerRepositoriesServiceClient) UpdatePackageRepository(ctx context.Context, req *connect_go.Request[v1alpha1.UpdatePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.UpdatePackageRepositoryResponse], error) {
	return c.updatePackageRepository.CallUnary(ctx, req)
}

// DeletePackageRepository calls
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService.DeletePackageRepository.
func (c *kappControllerRepositoriesServiceClient) DeletePackageRepository(ctx context.Context, req *connect_go.Request[v1alpha1.DeletePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.DeletePackageRepositoryResponse], error) {
	return c.deletePackageRepository.CallUnary(ctx, req)
}

// GetPackageRepositoryPermissions calls
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService.GetPackageRepositoryPermissions.
func (c *kappControllerRepositoriesServiceClient) GetPackageRepositoryPermissions(ctx context.Context, req *connect_go.Request[v1alpha1.GetPackageRepositoryPermissionsRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryPermissionsResponse], error) {
	return c.getPackageRepositoryPermissions.CallUnary(ctx, req)
}

// KappControllerRepositoriesServiceHandler is an implementation of the
// kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService service.
type KappControllerRepositoriesServiceHandler interface {
	// AddPackageRepository add an existing package repository to the set of ones already managed by the 'kapp_controller' plugin
	AddPackageRepository(context.Context, *connect_go.Request[v1alpha1.AddPackageRepositoryRequest]) (*connect_go.Response[v1alpha1.AddPackageRepositoryResponse], error)
	GetPackageRepositoryDetail(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryDetailRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryDetailResponse], error)
	GetPackageRepositorySummaries(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositorySummariesRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositorySummariesResponse], error)
	UpdatePackageRepository(context.Context, *connect_go.Request[v1alpha1.UpdatePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.UpdatePackageRepositoryResponse], error)
	DeletePackageRepository(context.Context, *connect_go.Request[v1alpha1.DeletePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.DeletePackageRepositoryResponse], error)
	GetPackageRepositoryPermissions(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryPermissionsRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryPermissionsResponse], error)
}

// NewKappControllerRepositoriesServiceHandler builds an HTTP handler from the service
// implementation. It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKappControllerRepositoriesServiceHandler(svc KappControllerRepositoriesServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	kappControllerRepositoriesServiceAddPackageRepositoryHandler := connect_go.NewUnaryHandler(
		KappControllerRepositoriesServiceAddPackageRepositoryProcedure,
		svc.AddPackageRepository,
		opts...,
	)
	kappControllerRepositoriesServiceGetPackageRepositoryDetailHandler := connect_go.NewUnaryHandler(
		KappControllerRepositoriesServiceGetPackageRepositoryDetailProcedure,
		svc.GetPackageRepositoryDetail,
		opts...,
	)
	kappControllerRepositoriesServiceGetPackageRepositorySummariesHandler := connect_go.NewUnaryHandler(
		KappControllerRepositoriesServiceGetPackageRepositorySummariesProcedure,
		svc.GetPackageRepositorySummaries,
		opts...,
	)
	kappControllerRepositoriesServiceUpdatePackageRepositoryHandler := connect_go.NewUnaryHandler(
		KappControllerRepositoriesServiceUpdatePackageRepositoryProcedure,
		svc.UpdatePackageRepository,
		opts...,
	)
	kappControllerRepositoriesServiceDeletePackageRepositoryHandler := connect_go.NewUnaryHandler(
		KappControllerRepositoriesServiceDeletePackageRepositoryProcedure,
		svc.DeletePackageRepository,
		opts...,
	)
	kappControllerRepositoriesServiceGetPackageRepositoryPermissionsHandler := connect_go.NewUnaryHandler(
		KappControllerRepositoriesServiceGetPackageRepositoryPermissionsProcedure,
		svc.GetPackageRepositoryPermissions,
		opts...,
	)
	return "/kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KappControllerRepositoriesServiceAddPackageRepositoryProcedure:
			kappControllerRepositoriesServiceAddPackageRepositoryHandler.ServeHTTP(w, r)
		case KappControllerRepositoriesServiceGetPackageRepositoryDetailProcedure:
			kappControllerRepositoriesServiceGetPackageRepositoryDetailHandler.ServeHTTP(w, r)
		case KappControllerRepositoriesServiceGetPackageRepositorySummariesProcedure:
			kappControllerRepositoriesServiceGetPackageRepositorySummariesHandler.ServeHTTP(w, r)
		case KappControllerRepositoriesServiceUpdatePackageRepositoryProcedure:
			kappControllerRepositoriesServiceUpdatePackageRepositoryHandler.ServeHTTP(w, r)
		case KappControllerRepositoriesServiceDeletePackageRepositoryProcedure:
			kappControllerRepositoriesServiceDeletePackageRepositoryHandler.ServeHTTP(w, r)
		case KappControllerRepositoriesServiceGetPackageRepositoryPermissionsProcedure:
			kappControllerRepositoriesServiceGetPackageRepositoryPermissionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKappControllerRepositoriesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKappControllerRepositoriesServiceHandler struct{}

func (UnimplementedKappControllerRepositoriesServiceHandler) AddPackageRepository(context.Context, *connect_go.Request[v1alpha1.AddPackageRepositoryRequest]) (*connect_go.Response[v1alpha1.AddPackageRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService.AddPackageRepository is not implemented"))
}

func (UnimplementedKappControllerRepositoriesServiceHandler) GetPackageRepositoryDetail(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryDetailRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService.GetPackageRepositoryDetail is not implemented"))
}

func (UnimplementedKappControllerRepositoriesServiceHandler) GetPackageRepositorySummaries(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositorySummariesRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositorySummariesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService.GetPackageRepositorySummaries is not implemented"))
}

func (UnimplementedKappControllerRepositoriesServiceHandler) UpdatePackageRepository(context.Context, *connect_go.Request[v1alpha1.UpdatePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.UpdatePackageRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService.UpdatePackageRepository is not implemented"))
}

func (UnimplementedKappControllerRepositoriesServiceHandler) DeletePackageRepository(context.Context, *connect_go.Request[v1alpha1.DeletePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.DeletePackageRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService.DeletePackageRepository is not implemented"))
}

func (UnimplementedKappControllerRepositoriesServiceHandler) GetPackageRepositoryPermissions(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryPermissionsRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryPermissionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.kapp_controller.packages.v1alpha1.KappControllerRepositoriesService.GetPackageRepositoryPermissions is not implemented"))
}
