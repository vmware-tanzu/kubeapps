// Copyright 2021-2023 the Kubeapps contributors.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kubeappsapis/plugins/fluxv2/packages/v1alpha1/fluxv2.proto

package v1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/gen/core/packages/v1alpha1"
	_ "github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/gen/plugins/fluxv2/packages/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// FluxV2PackagesServiceName is the fully-qualified name of the FluxV2PackagesService service.
	FluxV2PackagesServiceName = "kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService"
	// FluxV2RepositoriesServiceName is the fully-qualified name of the FluxV2RepositoriesService
	// service.
	FluxV2RepositoriesServiceName = "kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FluxV2PackagesServiceGetAvailablePackageSummariesProcedure is the fully-qualified name of the
	// FluxV2PackagesService's GetAvailablePackageSummaries RPC.
	FluxV2PackagesServiceGetAvailablePackageSummariesProcedure = "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService/GetAvailablePackageSummaries"
	// FluxV2PackagesServiceGetAvailablePackageDetailProcedure is the fully-qualified name of the
	// FluxV2PackagesService's GetAvailablePackageDetail RPC.
	FluxV2PackagesServiceGetAvailablePackageDetailProcedure = "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService/GetAvailablePackageDetail"
	// FluxV2PackagesServiceGetAvailablePackageVersionsProcedure is the fully-qualified name of the
	// FluxV2PackagesService's GetAvailablePackageVersions RPC.
	FluxV2PackagesServiceGetAvailablePackageVersionsProcedure = "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService/GetAvailablePackageVersions"
	// FluxV2PackagesServiceGetInstalledPackageSummariesProcedure is the fully-qualified name of the
	// FluxV2PackagesService's GetInstalledPackageSummaries RPC.
	FluxV2PackagesServiceGetInstalledPackageSummariesProcedure = "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService/GetInstalledPackageSummaries"
	// FluxV2PackagesServiceGetInstalledPackageDetailProcedure is the fully-qualified name of the
	// FluxV2PackagesService's GetInstalledPackageDetail RPC.
	FluxV2PackagesServiceGetInstalledPackageDetailProcedure = "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService/GetInstalledPackageDetail"
	// FluxV2PackagesServiceCreateInstalledPackageProcedure is the fully-qualified name of the
	// FluxV2PackagesService's CreateInstalledPackage RPC.
	FluxV2PackagesServiceCreateInstalledPackageProcedure = "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService/CreateInstalledPackage"
	// FluxV2PackagesServiceUpdateInstalledPackageProcedure is the fully-qualified name of the
	// FluxV2PackagesService's UpdateInstalledPackage RPC.
	FluxV2PackagesServiceUpdateInstalledPackageProcedure = "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService/UpdateInstalledPackage"
	// FluxV2PackagesServiceDeleteInstalledPackageProcedure is the fully-qualified name of the
	// FluxV2PackagesService's DeleteInstalledPackage RPC.
	FluxV2PackagesServiceDeleteInstalledPackageProcedure = "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService/DeleteInstalledPackage"
	// FluxV2PackagesServiceGetInstalledPackageResourceRefsProcedure is the fully-qualified name of the
	// FluxV2PackagesService's GetInstalledPackageResourceRefs RPC.
	FluxV2PackagesServiceGetInstalledPackageResourceRefsProcedure = "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService/GetInstalledPackageResourceRefs"
	// FluxV2RepositoriesServiceAddPackageRepositoryProcedure is the fully-qualified name of the
	// FluxV2RepositoriesService's AddPackageRepository RPC.
	FluxV2RepositoriesServiceAddPackageRepositoryProcedure = "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService/AddPackageRepository"
	// FluxV2RepositoriesServiceGetPackageRepositoryDetailProcedure is the fully-qualified name of the
	// FluxV2RepositoriesService's GetPackageRepositoryDetail RPC.
	FluxV2RepositoriesServiceGetPackageRepositoryDetailProcedure = "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService/GetPackageRepositoryDetail"
	// FluxV2RepositoriesServiceGetPackageRepositorySummariesProcedure is the fully-qualified name of
	// the FluxV2RepositoriesService's GetPackageRepositorySummaries RPC.
	FluxV2RepositoriesServiceGetPackageRepositorySummariesProcedure = "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService/GetPackageRepositorySummaries"
	// FluxV2RepositoriesServiceUpdatePackageRepositoryProcedure is the fully-qualified name of the
	// FluxV2RepositoriesService's UpdatePackageRepository RPC.
	FluxV2RepositoriesServiceUpdatePackageRepositoryProcedure = "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService/UpdatePackageRepository"
	// FluxV2RepositoriesServiceDeletePackageRepositoryProcedure is the fully-qualified name of the
	// FluxV2RepositoriesService's DeletePackageRepository RPC.
	FluxV2RepositoriesServiceDeletePackageRepositoryProcedure = "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService/DeletePackageRepository"
	// FluxV2RepositoriesServiceGetPackageRepositoryPermissionsProcedure is the fully-qualified name of
	// the FluxV2RepositoriesService's GetPackageRepositoryPermissions RPC.
	FluxV2RepositoriesServiceGetPackageRepositoryPermissionsProcedure = "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService/GetPackageRepositoryPermissions"
)

// FluxV2PackagesServiceClient is a client for the
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService service.
type FluxV2PackagesServiceClient interface {
	// GetAvailablePackageSummaries returns the available packages managed by the 'fluxv2' plugin
	GetAvailablePackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error)
	// GetAvailablePackageDetail returns the package metadata managed by the 'fluxv2' plugin
	GetAvailablePackageDetail(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error)
	// GetAvailablePackageVersions returns the package versions managed by the 'fluxv2' plugin
	GetAvailablePackageVersions(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error)
	// GetInstalledPackageSummaries returns the installed packages managed by the 'fluxv2' plugin
	GetInstalledPackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error)
	// GetInstalledPackageDetail returns the requested installed package managed by the 'fluxv2' plugin
	GetInstalledPackageDetail(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error)
	// CreateInstalledPackage creates an installed package based on the request.
	CreateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error)
	// UpdateInstalledPackage updates an installed package based on the request.
	UpdateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error)
	// DeleteInstalledPackage deletes an installed package based on the request.
	DeleteInstalledPackage(context.Context, *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error)
	// GetInstalledPackageResourceRefs returns the references for the Kubernetes
	// resources created by an installed package.
	GetInstalledPackageResourceRefs(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error)
}

// NewFluxV2PackagesServiceClient constructs a client for the
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFluxV2PackagesServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FluxV2PackagesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fluxV2PackagesServiceClient{
		getAvailablePackageSummaries: connect_go.NewClient[v1alpha1.GetAvailablePackageSummariesRequest, v1alpha1.GetAvailablePackageSummariesResponse](
			httpClient,
			baseURL+FluxV2PackagesServiceGetAvailablePackageSummariesProcedure,
			opts...,
		),
		getAvailablePackageDetail: connect_go.NewClient[v1alpha1.GetAvailablePackageDetailRequest, v1alpha1.GetAvailablePackageDetailResponse](
			httpClient,
			baseURL+FluxV2PackagesServiceGetAvailablePackageDetailProcedure,
			opts...,
		),
		getAvailablePackageVersions: connect_go.NewClient[v1alpha1.GetAvailablePackageVersionsRequest, v1alpha1.GetAvailablePackageVersionsResponse](
			httpClient,
			baseURL+FluxV2PackagesServiceGetAvailablePackageVersionsProcedure,
			opts...,
		),
		getInstalledPackageSummaries: connect_go.NewClient[v1alpha1.GetInstalledPackageSummariesRequest, v1alpha1.GetInstalledPackageSummariesResponse](
			httpClient,
			baseURL+FluxV2PackagesServiceGetInstalledPackageSummariesProcedure,
			opts...,
		),
		getInstalledPackageDetail: connect_go.NewClient[v1alpha1.GetInstalledPackageDetailRequest, v1alpha1.GetInstalledPackageDetailResponse](
			httpClient,
			baseURL+FluxV2PackagesServiceGetInstalledPackageDetailProcedure,
			opts...,
		),
		createInstalledPackage: connect_go.NewClient[v1alpha1.CreateInstalledPackageRequest, v1alpha1.CreateInstalledPackageResponse](
			httpClient,
			baseURL+FluxV2PackagesServiceCreateInstalledPackageProcedure,
			opts...,
		),
		updateInstalledPackage: connect_go.NewClient[v1alpha1.UpdateInstalledPackageRequest, v1alpha1.UpdateInstalledPackageResponse](
			httpClient,
			baseURL+FluxV2PackagesServiceUpdateInstalledPackageProcedure,
			opts...,
		),
		deleteInstalledPackage: connect_go.NewClient[v1alpha1.DeleteInstalledPackageRequest, v1alpha1.DeleteInstalledPackageResponse](
			httpClient,
			baseURL+FluxV2PackagesServiceDeleteInstalledPackageProcedure,
			opts...,
		),
		getInstalledPackageResourceRefs: connect_go.NewClient[v1alpha1.GetInstalledPackageResourceRefsRequest, v1alpha1.GetInstalledPackageResourceRefsResponse](
			httpClient,
			baseURL+FluxV2PackagesServiceGetInstalledPackageResourceRefsProcedure,
			opts...,
		),
	}
}

// fluxV2PackagesServiceClient implements FluxV2PackagesServiceClient.
type fluxV2PackagesServiceClient struct {
	getAvailablePackageSummaries    *connect_go.Client[v1alpha1.GetAvailablePackageSummariesRequest, v1alpha1.GetAvailablePackageSummariesResponse]
	getAvailablePackageDetail       *connect_go.Client[v1alpha1.GetAvailablePackageDetailRequest, v1alpha1.GetAvailablePackageDetailResponse]
	getAvailablePackageVersions     *connect_go.Client[v1alpha1.GetAvailablePackageVersionsRequest, v1alpha1.GetAvailablePackageVersionsResponse]
	getInstalledPackageSummaries    *connect_go.Client[v1alpha1.GetInstalledPackageSummariesRequest, v1alpha1.GetInstalledPackageSummariesResponse]
	getInstalledPackageDetail       *connect_go.Client[v1alpha1.GetInstalledPackageDetailRequest, v1alpha1.GetInstalledPackageDetailResponse]
	createInstalledPackage          *connect_go.Client[v1alpha1.CreateInstalledPackageRequest, v1alpha1.CreateInstalledPackageResponse]
	updateInstalledPackage          *connect_go.Client[v1alpha1.UpdateInstalledPackageRequest, v1alpha1.UpdateInstalledPackageResponse]
	deleteInstalledPackage          *connect_go.Client[v1alpha1.DeleteInstalledPackageRequest, v1alpha1.DeleteInstalledPackageResponse]
	getInstalledPackageResourceRefs *connect_go.Client[v1alpha1.GetInstalledPackageResourceRefsRequest, v1alpha1.GetInstalledPackageResourceRefsResponse]
}

// GetAvailablePackageSummaries calls
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.GetAvailablePackageSummaries.
func (c *fluxV2PackagesServiceClient) GetAvailablePackageSummaries(ctx context.Context, req *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error) {
	return c.getAvailablePackageSummaries.CallUnary(ctx, req)
}

// GetAvailablePackageDetail calls
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.GetAvailablePackageDetail.
func (c *fluxV2PackagesServiceClient) GetAvailablePackageDetail(ctx context.Context, req *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error) {
	return c.getAvailablePackageDetail.CallUnary(ctx, req)
}

// GetAvailablePackageVersions calls
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.GetAvailablePackageVersions.
func (c *fluxV2PackagesServiceClient) GetAvailablePackageVersions(ctx context.Context, req *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error) {
	return c.getAvailablePackageVersions.CallUnary(ctx, req)
}

// GetInstalledPackageSummaries calls
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.GetInstalledPackageSummaries.
func (c *fluxV2PackagesServiceClient) GetInstalledPackageSummaries(ctx context.Context, req *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error) {
	return c.getInstalledPackageSummaries.CallUnary(ctx, req)
}

// GetInstalledPackageDetail calls
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.GetInstalledPackageDetail.
func (c *fluxV2PackagesServiceClient) GetInstalledPackageDetail(ctx context.Context, req *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error) {
	return c.getInstalledPackageDetail.CallUnary(ctx, req)
}

// CreateInstalledPackage calls
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.CreateInstalledPackage.
func (c *fluxV2PackagesServiceClient) CreateInstalledPackage(ctx context.Context, req *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error) {
	return c.createInstalledPackage.CallUnary(ctx, req)
}

// UpdateInstalledPackage calls
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.UpdateInstalledPackage.
func (c *fluxV2PackagesServiceClient) UpdateInstalledPackage(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error) {
	return c.updateInstalledPackage.CallUnary(ctx, req)
}

// DeleteInstalledPackage calls
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.DeleteInstalledPackage.
func (c *fluxV2PackagesServiceClient) DeleteInstalledPackage(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error) {
	return c.deleteInstalledPackage.CallUnary(ctx, req)
}

// GetInstalledPackageResourceRefs calls
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.GetInstalledPackageResourceRefs.
func (c *fluxV2PackagesServiceClient) GetInstalledPackageResourceRefs(ctx context.Context, req *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error) {
	return c.getInstalledPackageResourceRefs.CallUnary(ctx, req)
}

// FluxV2PackagesServiceHandler is an implementation of the
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService service.
type FluxV2PackagesServiceHandler interface {
	// GetAvailablePackageSummaries returns the available packages managed by the 'fluxv2' plugin
	GetAvailablePackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error)
	// GetAvailablePackageDetail returns the package metadata managed by the 'fluxv2' plugin
	GetAvailablePackageDetail(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error)
	// GetAvailablePackageVersions returns the package versions managed by the 'fluxv2' plugin
	GetAvailablePackageVersions(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error)
	// GetInstalledPackageSummaries returns the installed packages managed by the 'fluxv2' plugin
	GetInstalledPackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error)
	// GetInstalledPackageDetail returns the requested installed package managed by the 'fluxv2' plugin
	GetInstalledPackageDetail(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error)
	// CreateInstalledPackage creates an installed package based on the request.
	CreateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error)
	// UpdateInstalledPackage updates an installed package based on the request.
	UpdateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error)
	// DeleteInstalledPackage deletes an installed package based on the request.
	DeleteInstalledPackage(context.Context, *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error)
	// GetInstalledPackageResourceRefs returns the references for the Kubernetes
	// resources created by an installed package.
	GetInstalledPackageResourceRefs(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error)
}

// NewFluxV2PackagesServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFluxV2PackagesServiceHandler(svc FluxV2PackagesServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	fluxV2PackagesServiceGetAvailablePackageSummariesHandler := connect_go.NewUnaryHandler(
		FluxV2PackagesServiceGetAvailablePackageSummariesProcedure,
		svc.GetAvailablePackageSummaries,
		opts...,
	)
	fluxV2PackagesServiceGetAvailablePackageDetailHandler := connect_go.NewUnaryHandler(
		FluxV2PackagesServiceGetAvailablePackageDetailProcedure,
		svc.GetAvailablePackageDetail,
		opts...,
	)
	fluxV2PackagesServiceGetAvailablePackageVersionsHandler := connect_go.NewUnaryHandler(
		FluxV2PackagesServiceGetAvailablePackageVersionsProcedure,
		svc.GetAvailablePackageVersions,
		opts...,
	)
	fluxV2PackagesServiceGetInstalledPackageSummariesHandler := connect_go.NewUnaryHandler(
		FluxV2PackagesServiceGetInstalledPackageSummariesProcedure,
		svc.GetInstalledPackageSummaries,
		opts...,
	)
	fluxV2PackagesServiceGetInstalledPackageDetailHandler := connect_go.NewUnaryHandler(
		FluxV2PackagesServiceGetInstalledPackageDetailProcedure,
		svc.GetInstalledPackageDetail,
		opts...,
	)
	fluxV2PackagesServiceCreateInstalledPackageHandler := connect_go.NewUnaryHandler(
		FluxV2PackagesServiceCreateInstalledPackageProcedure,
		svc.CreateInstalledPackage,
		opts...,
	)
	fluxV2PackagesServiceUpdateInstalledPackageHandler := connect_go.NewUnaryHandler(
		FluxV2PackagesServiceUpdateInstalledPackageProcedure,
		svc.UpdateInstalledPackage,
		opts...,
	)
	fluxV2PackagesServiceDeleteInstalledPackageHandler := connect_go.NewUnaryHandler(
		FluxV2PackagesServiceDeleteInstalledPackageProcedure,
		svc.DeleteInstalledPackage,
		opts...,
	)
	fluxV2PackagesServiceGetInstalledPackageResourceRefsHandler := connect_go.NewUnaryHandler(
		FluxV2PackagesServiceGetInstalledPackageResourceRefsProcedure,
		svc.GetInstalledPackageResourceRefs,
		opts...,
	)
	return "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FluxV2PackagesServiceGetAvailablePackageSummariesProcedure:
			fluxV2PackagesServiceGetAvailablePackageSummariesHandler.ServeHTTP(w, r)
		case FluxV2PackagesServiceGetAvailablePackageDetailProcedure:
			fluxV2PackagesServiceGetAvailablePackageDetailHandler.ServeHTTP(w, r)
		case FluxV2PackagesServiceGetAvailablePackageVersionsProcedure:
			fluxV2PackagesServiceGetAvailablePackageVersionsHandler.ServeHTTP(w, r)
		case FluxV2PackagesServiceGetInstalledPackageSummariesProcedure:
			fluxV2PackagesServiceGetInstalledPackageSummariesHandler.ServeHTTP(w, r)
		case FluxV2PackagesServiceGetInstalledPackageDetailProcedure:
			fluxV2PackagesServiceGetInstalledPackageDetailHandler.ServeHTTP(w, r)
		case FluxV2PackagesServiceCreateInstalledPackageProcedure:
			fluxV2PackagesServiceCreateInstalledPackageHandler.ServeHTTP(w, r)
		case FluxV2PackagesServiceUpdateInstalledPackageProcedure:
			fluxV2PackagesServiceUpdateInstalledPackageHandler.ServeHTTP(w, r)
		case FluxV2PackagesServiceDeleteInstalledPackageProcedure:
			fluxV2PackagesServiceDeleteInstalledPackageHandler.ServeHTTP(w, r)
		case FluxV2PackagesServiceGetInstalledPackageResourceRefsProcedure:
			fluxV2PackagesServiceGetInstalledPackageResourceRefsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFluxV2PackagesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFluxV2PackagesServiceHandler struct{}

func (UnimplementedFluxV2PackagesServiceHandler) GetAvailablePackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.GetAvailablePackageSummaries is not implemented"))
}

func (UnimplementedFluxV2PackagesServiceHandler) GetAvailablePackageDetail(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.GetAvailablePackageDetail is not implemented"))
}

func (UnimplementedFluxV2PackagesServiceHandler) GetAvailablePackageVersions(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.GetAvailablePackageVersions is not implemented"))
}

func (UnimplementedFluxV2PackagesServiceHandler) GetInstalledPackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.GetInstalledPackageSummaries is not implemented"))
}

func (UnimplementedFluxV2PackagesServiceHandler) GetInstalledPackageDetail(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.GetInstalledPackageDetail is not implemented"))
}

func (UnimplementedFluxV2PackagesServiceHandler) CreateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.CreateInstalledPackage is not implemented"))
}

func (UnimplementedFluxV2PackagesServiceHandler) UpdateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.UpdateInstalledPackage is not implemented"))
}

func (UnimplementedFluxV2PackagesServiceHandler) DeleteInstalledPackage(context.Context, *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.DeleteInstalledPackage is not implemented"))
}

func (UnimplementedFluxV2PackagesServiceHandler) GetInstalledPackageResourceRefs(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2PackagesService.GetInstalledPackageResourceRefs is not implemented"))
}

// FluxV2RepositoriesServiceClient is a client for the
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService service.
type FluxV2RepositoriesServiceClient interface {
	// AddPackageRepository add an existing package repository to the set of ones already managed by the
	// 'fluxv2' plugin
	AddPackageRepository(context.Context, *connect_go.Request[v1alpha1.AddPackageRepositoryRequest]) (*connect_go.Response[v1alpha1.AddPackageRepositoryResponse], error)
	GetPackageRepositoryDetail(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryDetailRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryDetailResponse], error)
	GetPackageRepositorySummaries(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositorySummariesRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositorySummariesResponse], error)
	UpdatePackageRepository(context.Context, *connect_go.Request[v1alpha1.UpdatePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.UpdatePackageRepositoryResponse], error)
	DeletePackageRepository(context.Context, *connect_go.Request[v1alpha1.DeletePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.DeletePackageRepositoryResponse], error)
	GetPackageRepositoryPermissions(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryPermissionsRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryPermissionsResponse], error)
}

// NewFluxV2RepositoriesServiceClient constructs a client for the
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFluxV2RepositoriesServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) FluxV2RepositoriesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fluxV2RepositoriesServiceClient{
		addPackageRepository: connect_go.NewClient[v1alpha1.AddPackageRepositoryRequest, v1alpha1.AddPackageRepositoryResponse](
			httpClient,
			baseURL+FluxV2RepositoriesServiceAddPackageRepositoryProcedure,
			opts...,
		),
		getPackageRepositoryDetail: connect_go.NewClient[v1alpha1.GetPackageRepositoryDetailRequest, v1alpha1.GetPackageRepositoryDetailResponse](
			httpClient,
			baseURL+FluxV2RepositoriesServiceGetPackageRepositoryDetailProcedure,
			opts...,
		),
		getPackageRepositorySummaries: connect_go.NewClient[v1alpha1.GetPackageRepositorySummariesRequest, v1alpha1.GetPackageRepositorySummariesResponse](
			httpClient,
			baseURL+FluxV2RepositoriesServiceGetPackageRepositorySummariesProcedure,
			opts...,
		),
		updatePackageRepository: connect_go.NewClient[v1alpha1.UpdatePackageRepositoryRequest, v1alpha1.UpdatePackageRepositoryResponse](
			httpClient,
			baseURL+FluxV2RepositoriesServiceUpdatePackageRepositoryProcedure,
			opts...,
		),
		deletePackageRepository: connect_go.NewClient[v1alpha1.DeletePackageRepositoryRequest, v1alpha1.DeletePackageRepositoryResponse](
			httpClient,
			baseURL+FluxV2RepositoriesServiceDeletePackageRepositoryProcedure,
			opts...,
		),
		getPackageRepositoryPermissions: connect_go.NewClient[v1alpha1.GetPackageRepositoryPermissionsRequest, v1alpha1.GetPackageRepositoryPermissionsResponse](
			httpClient,
			baseURL+FluxV2RepositoriesServiceGetPackageRepositoryPermissionsProcedure,
			opts...,
		),
	}
}

// fluxV2RepositoriesServiceClient implements FluxV2RepositoriesServiceClient.
type fluxV2RepositoriesServiceClient struct {
	addPackageRepository            *connect_go.Client[v1alpha1.AddPackageRepositoryRequest, v1alpha1.AddPackageRepositoryResponse]
	getPackageRepositoryDetail      *connect_go.Client[v1alpha1.GetPackageRepositoryDetailRequest, v1alpha1.GetPackageRepositoryDetailResponse]
	getPackageRepositorySummaries   *connect_go.Client[v1alpha1.GetPackageRepositorySummariesRequest, v1alpha1.GetPackageRepositorySummariesResponse]
	updatePackageRepository         *connect_go.Client[v1alpha1.UpdatePackageRepositoryRequest, v1alpha1.UpdatePackageRepositoryResponse]
	deletePackageRepository         *connect_go.Client[v1alpha1.DeletePackageRepositoryRequest, v1alpha1.DeletePackageRepositoryResponse]
	getPackageRepositoryPermissions *connect_go.Client[v1alpha1.GetPackageRepositoryPermissionsRequest, v1alpha1.GetPackageRepositoryPermissionsResponse]
}

// AddPackageRepository calls
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService.AddPackageRepository.
func (c *fluxV2RepositoriesServiceClient) AddPackageRepository(ctx context.Context, req *connect_go.Request[v1alpha1.AddPackageRepositoryRequest]) (*connect_go.Response[v1alpha1.AddPackageRepositoryResponse], error) {
	return c.addPackageRepository.CallUnary(ctx, req)
}

// GetPackageRepositoryDetail calls
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService.GetPackageRepositoryDetail.
func (c *fluxV2RepositoriesServiceClient) GetPackageRepositoryDetail(ctx context.Context, req *connect_go.Request[v1alpha1.GetPackageRepositoryDetailRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryDetailResponse], error) {
	return c.getPackageRepositoryDetail.CallUnary(ctx, req)
}

// GetPackageRepositorySummaries calls
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService.GetPackageRepositorySummaries.
func (c *fluxV2RepositoriesServiceClient) GetPackageRepositorySummaries(ctx context.Context, req *connect_go.Request[v1alpha1.GetPackageRepositorySummariesRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositorySummariesResponse], error) {
	return c.getPackageRepositorySummaries.CallUnary(ctx, req)
}

// UpdatePackageRepository calls
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService.UpdatePackageRepository.
func (c *fluxV2RepositoriesServiceClient) UpdatePackageRepository(ctx context.Context, req *connect_go.Request[v1alpha1.UpdatePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.UpdatePackageRepositoryResponse], error) {
	return c.updatePackageRepository.CallUnary(ctx, req)
}

// DeletePackageRepository calls
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService.DeletePackageRepository.
func (c *fluxV2RepositoriesServiceClient) DeletePackageRepository(ctx context.Context, req *connect_go.Request[v1alpha1.DeletePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.DeletePackageRepositoryResponse], error) {
	return c.deletePackageRepository.CallUnary(ctx, req)
}

// GetPackageRepositoryPermissions calls
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService.GetPackageRepositoryPermissions.
func (c *fluxV2RepositoriesServiceClient) GetPackageRepositoryPermissions(ctx context.Context, req *connect_go.Request[v1alpha1.GetPackageRepositoryPermissionsRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryPermissionsResponse], error) {
	return c.getPackageRepositoryPermissions.CallUnary(ctx, req)
}

// FluxV2RepositoriesServiceHandler is an implementation of the
// kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService service.
type FluxV2RepositoriesServiceHandler interface {
	// AddPackageRepository add an existing package repository to the set of ones already managed by the
	// 'fluxv2' plugin
	AddPackageRepository(context.Context, *connect_go.Request[v1alpha1.AddPackageRepositoryRequest]) (*connect_go.Response[v1alpha1.AddPackageRepositoryResponse], error)
	GetPackageRepositoryDetail(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryDetailRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryDetailResponse], error)
	GetPackageRepositorySummaries(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositorySummariesRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositorySummariesResponse], error)
	UpdatePackageRepository(context.Context, *connect_go.Request[v1alpha1.UpdatePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.UpdatePackageRepositoryResponse], error)
	DeletePackageRepository(context.Context, *connect_go.Request[v1alpha1.DeletePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.DeletePackageRepositoryResponse], error)
	GetPackageRepositoryPermissions(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryPermissionsRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryPermissionsResponse], error)
}

// NewFluxV2RepositoriesServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFluxV2RepositoriesServiceHandler(svc FluxV2RepositoriesServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	fluxV2RepositoriesServiceAddPackageRepositoryHandler := connect_go.NewUnaryHandler(
		FluxV2RepositoriesServiceAddPackageRepositoryProcedure,
		svc.AddPackageRepository,
		opts...,
	)
	fluxV2RepositoriesServiceGetPackageRepositoryDetailHandler := connect_go.NewUnaryHandler(
		FluxV2RepositoriesServiceGetPackageRepositoryDetailProcedure,
		svc.GetPackageRepositoryDetail,
		opts...,
	)
	fluxV2RepositoriesServiceGetPackageRepositorySummariesHandler := connect_go.NewUnaryHandler(
		FluxV2RepositoriesServiceGetPackageRepositorySummariesProcedure,
		svc.GetPackageRepositorySummaries,
		opts...,
	)
	fluxV2RepositoriesServiceUpdatePackageRepositoryHandler := connect_go.NewUnaryHandler(
		FluxV2RepositoriesServiceUpdatePackageRepositoryProcedure,
		svc.UpdatePackageRepository,
		opts...,
	)
	fluxV2RepositoriesServiceDeletePackageRepositoryHandler := connect_go.NewUnaryHandler(
		FluxV2RepositoriesServiceDeletePackageRepositoryProcedure,
		svc.DeletePackageRepository,
		opts...,
	)
	fluxV2RepositoriesServiceGetPackageRepositoryPermissionsHandler := connect_go.NewUnaryHandler(
		FluxV2RepositoriesServiceGetPackageRepositoryPermissionsProcedure,
		svc.GetPackageRepositoryPermissions,
		opts...,
	)
	return "/kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FluxV2RepositoriesServiceAddPackageRepositoryProcedure:
			fluxV2RepositoriesServiceAddPackageRepositoryHandler.ServeHTTP(w, r)
		case FluxV2RepositoriesServiceGetPackageRepositoryDetailProcedure:
			fluxV2RepositoriesServiceGetPackageRepositoryDetailHandler.ServeHTTP(w, r)
		case FluxV2RepositoriesServiceGetPackageRepositorySummariesProcedure:
			fluxV2RepositoriesServiceGetPackageRepositorySummariesHandler.ServeHTTP(w, r)
		case FluxV2RepositoriesServiceUpdatePackageRepositoryProcedure:
			fluxV2RepositoriesServiceUpdatePackageRepositoryHandler.ServeHTTP(w, r)
		case FluxV2RepositoriesServiceDeletePackageRepositoryProcedure:
			fluxV2RepositoriesServiceDeletePackageRepositoryHandler.ServeHTTP(w, r)
		case FluxV2RepositoriesServiceGetPackageRepositoryPermissionsProcedure:
			fluxV2RepositoriesServiceGetPackageRepositoryPermissionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFluxV2RepositoriesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFluxV2RepositoriesServiceHandler struct{}

func (UnimplementedFluxV2RepositoriesServiceHandler) AddPackageRepository(context.Context, *connect_go.Request[v1alpha1.AddPackageRepositoryRequest]) (*connect_go.Response[v1alpha1.AddPackageRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService.AddPackageRepository is not implemented"))
}

func (UnimplementedFluxV2RepositoriesServiceHandler) GetPackageRepositoryDetail(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryDetailRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService.GetPackageRepositoryDetail is not implemented"))
}

func (UnimplementedFluxV2RepositoriesServiceHandler) GetPackageRepositorySummaries(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositorySummariesRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositorySummariesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService.GetPackageRepositorySummaries is not implemented"))
}

func (UnimplementedFluxV2RepositoriesServiceHandler) UpdatePackageRepository(context.Context, *connect_go.Request[v1alpha1.UpdatePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.UpdatePackageRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService.UpdatePackageRepository is not implemented"))
}

func (UnimplementedFluxV2RepositoriesServiceHandler) DeletePackageRepository(context.Context, *connect_go.Request[v1alpha1.DeletePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.DeletePackageRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService.DeletePackageRepository is not implemented"))
}

func (UnimplementedFluxV2RepositoriesServiceHandler) GetPackageRepositoryPermissions(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryPermissionsRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryPermissionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.fluxv2.packages.v1alpha1.FluxV2RepositoriesService.GetPackageRepositoryPermissions is not implemented"))
}
