// Copyright 2021-2023 the Kubeapps contributors.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kubeappsapis/plugins/helm/packages/v1alpha1/helm.proto

package v1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/gen/core/packages/v1alpha1"
	v1alpha11 "github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/gen/plugins/helm/packages/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// HelmPackagesServiceName is the fully-qualified name of the HelmPackagesService service.
	HelmPackagesServiceName = "kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService"
	// HelmRepositoriesServiceName is the fully-qualified name of the HelmRepositoriesService service.
	HelmRepositoriesServiceName = "kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HelmPackagesServiceGetAvailablePackageSummariesProcedure is the fully-qualified name of the
	// HelmPackagesService's GetAvailablePackageSummaries RPC.
	HelmPackagesServiceGetAvailablePackageSummariesProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService/GetAvailablePackageSummaries"
	// HelmPackagesServiceGetAvailablePackageDetailProcedure is the fully-qualified name of the
	// HelmPackagesService's GetAvailablePackageDetail RPC.
	HelmPackagesServiceGetAvailablePackageDetailProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService/GetAvailablePackageDetail"
	// HelmPackagesServiceGetAvailablePackageVersionsProcedure is the fully-qualified name of the
	// HelmPackagesService's GetAvailablePackageVersions RPC.
	HelmPackagesServiceGetAvailablePackageVersionsProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService/GetAvailablePackageVersions"
	// HelmPackagesServiceGetInstalledPackageSummariesProcedure is the fully-qualified name of the
	// HelmPackagesService's GetInstalledPackageSummaries RPC.
	HelmPackagesServiceGetInstalledPackageSummariesProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService/GetInstalledPackageSummaries"
	// HelmPackagesServiceGetInstalledPackageDetailProcedure is the fully-qualified name of the
	// HelmPackagesService's GetInstalledPackageDetail RPC.
	HelmPackagesServiceGetInstalledPackageDetailProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService/GetInstalledPackageDetail"
	// HelmPackagesServiceCreateInstalledPackageProcedure is the fully-qualified name of the
	// HelmPackagesService's CreateInstalledPackage RPC.
	HelmPackagesServiceCreateInstalledPackageProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService/CreateInstalledPackage"
	// HelmPackagesServiceUpdateInstalledPackageProcedure is the fully-qualified name of the
	// HelmPackagesService's UpdateInstalledPackage RPC.
	HelmPackagesServiceUpdateInstalledPackageProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService/UpdateInstalledPackage"
	// HelmPackagesServiceDeleteInstalledPackageProcedure is the fully-qualified name of the
	// HelmPackagesService's DeleteInstalledPackage RPC.
	HelmPackagesServiceDeleteInstalledPackageProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService/DeleteInstalledPackage"
	// HelmPackagesServiceRollbackInstalledPackageProcedure is the fully-qualified name of the
	// HelmPackagesService's RollbackInstalledPackage RPC.
	HelmPackagesServiceRollbackInstalledPackageProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService/RollbackInstalledPackage"
	// HelmPackagesServiceGetInstalledPackageResourceRefsProcedure is the fully-qualified name of the
	// HelmPackagesService's GetInstalledPackageResourceRefs RPC.
	HelmPackagesServiceGetInstalledPackageResourceRefsProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService/GetInstalledPackageResourceRefs"
	// HelmRepositoriesServiceAddPackageRepositoryProcedure is the fully-qualified name of the
	// HelmRepositoriesService's AddPackageRepository RPC.
	HelmRepositoriesServiceAddPackageRepositoryProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService/AddPackageRepository"
	// HelmRepositoriesServiceGetPackageRepositoryDetailProcedure is the fully-qualified name of the
	// HelmRepositoriesService's GetPackageRepositoryDetail RPC.
	HelmRepositoriesServiceGetPackageRepositoryDetailProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService/GetPackageRepositoryDetail"
	// HelmRepositoriesServiceGetPackageRepositorySummariesProcedure is the fully-qualified name of the
	// HelmRepositoriesService's GetPackageRepositorySummaries RPC.
	HelmRepositoriesServiceGetPackageRepositorySummariesProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService/GetPackageRepositorySummaries"
	// HelmRepositoriesServiceUpdatePackageRepositoryProcedure is the fully-qualified name of the
	// HelmRepositoriesService's UpdatePackageRepository RPC.
	HelmRepositoriesServiceUpdatePackageRepositoryProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService/UpdatePackageRepository"
	// HelmRepositoriesServiceDeletePackageRepositoryProcedure is the fully-qualified name of the
	// HelmRepositoriesService's DeletePackageRepository RPC.
	HelmRepositoriesServiceDeletePackageRepositoryProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService/DeletePackageRepository"
	// HelmRepositoriesServiceGetPackageRepositoryPermissionsProcedure is the fully-qualified name of
	// the HelmRepositoriesService's GetPackageRepositoryPermissions RPC.
	HelmRepositoriesServiceGetPackageRepositoryPermissionsProcedure = "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService/GetPackageRepositoryPermissions"
)

// HelmPackagesServiceClient is a client for the
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService service.
type HelmPackagesServiceClient interface {
	// GetAvailablePackageSummaries returns the available packages managed by the 'helm' plugin
	GetAvailablePackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error)
	// GetAvailablePackageDetail returns the package details managed by the 'helm' plugin
	GetAvailablePackageDetail(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error)
	// GetAvailablePackageVersions returns the package versions managed by the 'helm' plugin
	GetAvailablePackageVersions(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error)
	// GetInstalledPackageSummaries returns the installed packages managed by the 'helm' plugin
	GetInstalledPackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error)
	// GetInstalledPackageDetail returns the requested installed package managed by the 'helm' plugin
	GetInstalledPackageDetail(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error)
	// CreateInstalledPackage creates an installed package based on the request.
	CreateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error)
	// UpdateInstalledPackage updates an installed package based on the request.
	UpdateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error)
	// DeleteInstalledPackage deletes an installed package based on the request.
	DeleteInstalledPackage(context.Context, *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error)
	// RollbackInstalledPackage updates an installed package based on the request.
	RollbackInstalledPackage(context.Context, *connect_go.Request[v1alpha11.RollbackInstalledPackageRequest]) (*connect_go.Response[v1alpha11.RollbackInstalledPackageResponse], error)
	// GetInstalledPackageResourceRefs returns the references for the Kubernetes resources created by
	// an installed package.
	GetInstalledPackageResourceRefs(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error)
}

// NewHelmPackagesServiceClient constructs a client for the
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHelmPackagesServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) HelmPackagesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &helmPackagesServiceClient{
		getAvailablePackageSummaries: connect_go.NewClient[v1alpha1.GetAvailablePackageSummariesRequest, v1alpha1.GetAvailablePackageSummariesResponse](
			httpClient,
			baseURL+HelmPackagesServiceGetAvailablePackageSummariesProcedure,
			opts...,
		),
		getAvailablePackageDetail: connect_go.NewClient[v1alpha1.GetAvailablePackageDetailRequest, v1alpha1.GetAvailablePackageDetailResponse](
			httpClient,
			baseURL+HelmPackagesServiceGetAvailablePackageDetailProcedure,
			opts...,
		),
		getAvailablePackageVersions: connect_go.NewClient[v1alpha1.GetAvailablePackageVersionsRequest, v1alpha1.GetAvailablePackageVersionsResponse](
			httpClient,
			baseURL+HelmPackagesServiceGetAvailablePackageVersionsProcedure,
			opts...,
		),
		getInstalledPackageSummaries: connect_go.NewClient[v1alpha1.GetInstalledPackageSummariesRequest, v1alpha1.GetInstalledPackageSummariesResponse](
			httpClient,
			baseURL+HelmPackagesServiceGetInstalledPackageSummariesProcedure,
			opts...,
		),
		getInstalledPackageDetail: connect_go.NewClient[v1alpha1.GetInstalledPackageDetailRequest, v1alpha1.GetInstalledPackageDetailResponse](
			httpClient,
			baseURL+HelmPackagesServiceGetInstalledPackageDetailProcedure,
			opts...,
		),
		createInstalledPackage: connect_go.NewClient[v1alpha1.CreateInstalledPackageRequest, v1alpha1.CreateInstalledPackageResponse](
			httpClient,
			baseURL+HelmPackagesServiceCreateInstalledPackageProcedure,
			opts...,
		),
		updateInstalledPackage: connect_go.NewClient[v1alpha1.UpdateInstalledPackageRequest, v1alpha1.UpdateInstalledPackageResponse](
			httpClient,
			baseURL+HelmPackagesServiceUpdateInstalledPackageProcedure,
			opts...,
		),
		deleteInstalledPackage: connect_go.NewClient[v1alpha1.DeleteInstalledPackageRequest, v1alpha1.DeleteInstalledPackageResponse](
			httpClient,
			baseURL+HelmPackagesServiceDeleteInstalledPackageProcedure,
			opts...,
		),
		rollbackInstalledPackage: connect_go.NewClient[v1alpha11.RollbackInstalledPackageRequest, v1alpha11.RollbackInstalledPackageResponse](
			httpClient,
			baseURL+HelmPackagesServiceRollbackInstalledPackageProcedure,
			opts...,
		),
		getInstalledPackageResourceRefs: connect_go.NewClient[v1alpha1.GetInstalledPackageResourceRefsRequest, v1alpha1.GetInstalledPackageResourceRefsResponse](
			httpClient,
			baseURL+HelmPackagesServiceGetInstalledPackageResourceRefsProcedure,
			opts...,
		),
	}
}

// helmPackagesServiceClient implements HelmPackagesServiceClient.
type helmPackagesServiceClient struct {
	getAvailablePackageSummaries    *connect_go.Client[v1alpha1.GetAvailablePackageSummariesRequest, v1alpha1.GetAvailablePackageSummariesResponse]
	getAvailablePackageDetail       *connect_go.Client[v1alpha1.GetAvailablePackageDetailRequest, v1alpha1.GetAvailablePackageDetailResponse]
	getAvailablePackageVersions     *connect_go.Client[v1alpha1.GetAvailablePackageVersionsRequest, v1alpha1.GetAvailablePackageVersionsResponse]
	getInstalledPackageSummaries    *connect_go.Client[v1alpha1.GetInstalledPackageSummariesRequest, v1alpha1.GetInstalledPackageSummariesResponse]
	getInstalledPackageDetail       *connect_go.Client[v1alpha1.GetInstalledPackageDetailRequest, v1alpha1.GetInstalledPackageDetailResponse]
	createInstalledPackage          *connect_go.Client[v1alpha1.CreateInstalledPackageRequest, v1alpha1.CreateInstalledPackageResponse]
	updateInstalledPackage          *connect_go.Client[v1alpha1.UpdateInstalledPackageRequest, v1alpha1.UpdateInstalledPackageResponse]
	deleteInstalledPackage          *connect_go.Client[v1alpha1.DeleteInstalledPackageRequest, v1alpha1.DeleteInstalledPackageResponse]
	rollbackInstalledPackage        *connect_go.Client[v1alpha11.RollbackInstalledPackageRequest, v1alpha11.RollbackInstalledPackageResponse]
	getInstalledPackageResourceRefs *connect_go.Client[v1alpha1.GetInstalledPackageResourceRefsRequest, v1alpha1.GetInstalledPackageResourceRefsResponse]
}

// GetAvailablePackageSummaries calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.GetAvailablePackageSummaries.
func (c *helmPackagesServiceClient) GetAvailablePackageSummaries(ctx context.Context, req *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error) {
	return c.getAvailablePackageSummaries.CallUnary(ctx, req)
}

// GetAvailablePackageDetail calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.GetAvailablePackageDetail.
func (c *helmPackagesServiceClient) GetAvailablePackageDetail(ctx context.Context, req *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error) {
	return c.getAvailablePackageDetail.CallUnary(ctx, req)
}

// GetAvailablePackageVersions calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.GetAvailablePackageVersions.
func (c *helmPackagesServiceClient) GetAvailablePackageVersions(ctx context.Context, req *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error) {
	return c.getAvailablePackageVersions.CallUnary(ctx, req)
}

// GetInstalledPackageSummaries calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.GetInstalledPackageSummaries.
func (c *helmPackagesServiceClient) GetInstalledPackageSummaries(ctx context.Context, req *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error) {
	return c.getInstalledPackageSummaries.CallUnary(ctx, req)
}

// GetInstalledPackageDetail calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.GetInstalledPackageDetail.
func (c *helmPackagesServiceClient) GetInstalledPackageDetail(ctx context.Context, req *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error) {
	return c.getInstalledPackageDetail.CallUnary(ctx, req)
}

// CreateInstalledPackage calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.CreateInstalledPackage.
func (c *helmPackagesServiceClient) CreateInstalledPackage(ctx context.Context, req *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error) {
	return c.createInstalledPackage.CallUnary(ctx, req)
}

// UpdateInstalledPackage calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.UpdateInstalledPackage.
func (c *helmPackagesServiceClient) UpdateInstalledPackage(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error) {
	return c.updateInstalledPackage.CallUnary(ctx, req)
}

// DeleteInstalledPackage calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.DeleteInstalledPackage.
func (c *helmPackagesServiceClient) DeleteInstalledPackage(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error) {
	return c.deleteInstalledPackage.CallUnary(ctx, req)
}

// RollbackInstalledPackage calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.RollbackInstalledPackage.
func (c *helmPackagesServiceClient) RollbackInstalledPackage(ctx context.Context, req *connect_go.Request[v1alpha11.RollbackInstalledPackageRequest]) (*connect_go.Response[v1alpha11.RollbackInstalledPackageResponse], error) {
	return c.rollbackInstalledPackage.CallUnary(ctx, req)
}

// GetInstalledPackageResourceRefs calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.GetInstalledPackageResourceRefs.
func (c *helmPackagesServiceClient) GetInstalledPackageResourceRefs(ctx context.Context, req *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error) {
	return c.getInstalledPackageResourceRefs.CallUnary(ctx, req)
}

// HelmPackagesServiceHandler is an implementation of the
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService service.
type HelmPackagesServiceHandler interface {
	// GetAvailablePackageSummaries returns the available packages managed by the 'helm' plugin
	GetAvailablePackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error)
	// GetAvailablePackageDetail returns the package details managed by the 'helm' plugin
	GetAvailablePackageDetail(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error)
	// GetAvailablePackageVersions returns the package versions managed by the 'helm' plugin
	GetAvailablePackageVersions(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error)
	// GetInstalledPackageSummaries returns the installed packages managed by the 'helm' plugin
	GetInstalledPackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error)
	// GetInstalledPackageDetail returns the requested installed package managed by the 'helm' plugin
	GetInstalledPackageDetail(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error)
	// CreateInstalledPackage creates an installed package based on the request.
	CreateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error)
	// UpdateInstalledPackage updates an installed package based on the request.
	UpdateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error)
	// DeleteInstalledPackage deletes an installed package based on the request.
	DeleteInstalledPackage(context.Context, *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error)
	// RollbackInstalledPackage updates an installed package based on the request.
	RollbackInstalledPackage(context.Context, *connect_go.Request[v1alpha11.RollbackInstalledPackageRequest]) (*connect_go.Response[v1alpha11.RollbackInstalledPackageResponse], error)
	// GetInstalledPackageResourceRefs returns the references for the Kubernetes resources created by
	// an installed package.
	GetInstalledPackageResourceRefs(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error)
}

// NewHelmPackagesServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHelmPackagesServiceHandler(svc HelmPackagesServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	helmPackagesServiceGetAvailablePackageSummariesHandler := connect_go.NewUnaryHandler(
		HelmPackagesServiceGetAvailablePackageSummariesProcedure,
		svc.GetAvailablePackageSummaries,
		opts...,
	)
	helmPackagesServiceGetAvailablePackageDetailHandler := connect_go.NewUnaryHandler(
		HelmPackagesServiceGetAvailablePackageDetailProcedure,
		svc.GetAvailablePackageDetail,
		opts...,
	)
	helmPackagesServiceGetAvailablePackageVersionsHandler := connect_go.NewUnaryHandler(
		HelmPackagesServiceGetAvailablePackageVersionsProcedure,
		svc.GetAvailablePackageVersions,
		opts...,
	)
	helmPackagesServiceGetInstalledPackageSummariesHandler := connect_go.NewUnaryHandler(
		HelmPackagesServiceGetInstalledPackageSummariesProcedure,
		svc.GetInstalledPackageSummaries,
		opts...,
	)
	helmPackagesServiceGetInstalledPackageDetailHandler := connect_go.NewUnaryHandler(
		HelmPackagesServiceGetInstalledPackageDetailProcedure,
		svc.GetInstalledPackageDetail,
		opts...,
	)
	helmPackagesServiceCreateInstalledPackageHandler := connect_go.NewUnaryHandler(
		HelmPackagesServiceCreateInstalledPackageProcedure,
		svc.CreateInstalledPackage,
		opts...,
	)
	helmPackagesServiceUpdateInstalledPackageHandler := connect_go.NewUnaryHandler(
		HelmPackagesServiceUpdateInstalledPackageProcedure,
		svc.UpdateInstalledPackage,
		opts...,
	)
	helmPackagesServiceDeleteInstalledPackageHandler := connect_go.NewUnaryHandler(
		HelmPackagesServiceDeleteInstalledPackageProcedure,
		svc.DeleteInstalledPackage,
		opts...,
	)
	helmPackagesServiceRollbackInstalledPackageHandler := connect_go.NewUnaryHandler(
		HelmPackagesServiceRollbackInstalledPackageProcedure,
		svc.RollbackInstalledPackage,
		opts...,
	)
	helmPackagesServiceGetInstalledPackageResourceRefsHandler := connect_go.NewUnaryHandler(
		HelmPackagesServiceGetInstalledPackageResourceRefsProcedure,
		svc.GetInstalledPackageResourceRefs,
		opts...,
	)
	return "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HelmPackagesServiceGetAvailablePackageSummariesProcedure:
			helmPackagesServiceGetAvailablePackageSummariesHandler.ServeHTTP(w, r)
		case HelmPackagesServiceGetAvailablePackageDetailProcedure:
			helmPackagesServiceGetAvailablePackageDetailHandler.ServeHTTP(w, r)
		case HelmPackagesServiceGetAvailablePackageVersionsProcedure:
			helmPackagesServiceGetAvailablePackageVersionsHandler.ServeHTTP(w, r)
		case HelmPackagesServiceGetInstalledPackageSummariesProcedure:
			helmPackagesServiceGetInstalledPackageSummariesHandler.ServeHTTP(w, r)
		case HelmPackagesServiceGetInstalledPackageDetailProcedure:
			helmPackagesServiceGetInstalledPackageDetailHandler.ServeHTTP(w, r)
		case HelmPackagesServiceCreateInstalledPackageProcedure:
			helmPackagesServiceCreateInstalledPackageHandler.ServeHTTP(w, r)
		case HelmPackagesServiceUpdateInstalledPackageProcedure:
			helmPackagesServiceUpdateInstalledPackageHandler.ServeHTTP(w, r)
		case HelmPackagesServiceDeleteInstalledPackageProcedure:
			helmPackagesServiceDeleteInstalledPackageHandler.ServeHTTP(w, r)
		case HelmPackagesServiceRollbackInstalledPackageProcedure:
			helmPackagesServiceRollbackInstalledPackageHandler.ServeHTTP(w, r)
		case HelmPackagesServiceGetInstalledPackageResourceRefsProcedure:
			helmPackagesServiceGetInstalledPackageResourceRefsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHelmPackagesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHelmPackagesServiceHandler struct{}

func (UnimplementedHelmPackagesServiceHandler) GetAvailablePackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.GetAvailablePackageSummaries is not implemented"))
}

func (UnimplementedHelmPackagesServiceHandler) GetAvailablePackageDetail(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.GetAvailablePackageDetail is not implemented"))
}

func (UnimplementedHelmPackagesServiceHandler) GetAvailablePackageVersions(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.GetAvailablePackageVersions is not implemented"))
}

func (UnimplementedHelmPackagesServiceHandler) GetInstalledPackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.GetInstalledPackageSummaries is not implemented"))
}

func (UnimplementedHelmPackagesServiceHandler) GetInstalledPackageDetail(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.GetInstalledPackageDetail is not implemented"))
}

func (UnimplementedHelmPackagesServiceHandler) CreateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.CreateInstalledPackage is not implemented"))
}

func (UnimplementedHelmPackagesServiceHandler) UpdateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.UpdateInstalledPackage is not implemented"))
}

func (UnimplementedHelmPackagesServiceHandler) DeleteInstalledPackage(context.Context, *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.DeleteInstalledPackage is not implemented"))
}

func (UnimplementedHelmPackagesServiceHandler) RollbackInstalledPackage(context.Context, *connect_go.Request[v1alpha11.RollbackInstalledPackageRequest]) (*connect_go.Response[v1alpha11.RollbackInstalledPackageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.RollbackInstalledPackage is not implemented"))
}

func (UnimplementedHelmPackagesServiceHandler) GetInstalledPackageResourceRefs(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmPackagesService.GetInstalledPackageResourceRefs is not implemented"))
}

// HelmRepositoriesServiceClient is a client for the
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService service.
type HelmRepositoriesServiceClient interface {
	// AddPackageRepository add an existing package repository to the set of ones already managed by the Helm plugin
	AddPackageRepository(context.Context, *connect_go.Request[v1alpha1.AddPackageRepositoryRequest]) (*connect_go.Response[v1alpha1.AddPackageRepositoryResponse], error)
	GetPackageRepositoryDetail(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryDetailRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryDetailResponse], error)
	GetPackageRepositorySummaries(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositorySummariesRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositorySummariesResponse], error)
	UpdatePackageRepository(context.Context, *connect_go.Request[v1alpha1.UpdatePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.UpdatePackageRepositoryResponse], error)
	DeletePackageRepository(context.Context, *connect_go.Request[v1alpha1.DeletePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.DeletePackageRepositoryResponse], error)
	GetPackageRepositoryPermissions(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryPermissionsRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryPermissionsResponse], error)
}

// NewHelmRepositoriesServiceClient constructs a client for the
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHelmRepositoriesServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) HelmRepositoriesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &helmRepositoriesServiceClient{
		addPackageRepository: connect_go.NewClient[v1alpha1.AddPackageRepositoryRequest, v1alpha1.AddPackageRepositoryResponse](
			httpClient,
			baseURL+HelmRepositoriesServiceAddPackageRepositoryProcedure,
			opts...,
		),
		getPackageRepositoryDetail: connect_go.NewClient[v1alpha1.GetPackageRepositoryDetailRequest, v1alpha1.GetPackageRepositoryDetailResponse](
			httpClient,
			baseURL+HelmRepositoriesServiceGetPackageRepositoryDetailProcedure,
			opts...,
		),
		getPackageRepositorySummaries: connect_go.NewClient[v1alpha1.GetPackageRepositorySummariesRequest, v1alpha1.GetPackageRepositorySummariesResponse](
			httpClient,
			baseURL+HelmRepositoriesServiceGetPackageRepositorySummariesProcedure,
			opts...,
		),
		updatePackageRepository: connect_go.NewClient[v1alpha1.UpdatePackageRepositoryRequest, v1alpha1.UpdatePackageRepositoryResponse](
			httpClient,
			baseURL+HelmRepositoriesServiceUpdatePackageRepositoryProcedure,
			opts...,
		),
		deletePackageRepository: connect_go.NewClient[v1alpha1.DeletePackageRepositoryRequest, v1alpha1.DeletePackageRepositoryResponse](
			httpClient,
			baseURL+HelmRepositoriesServiceDeletePackageRepositoryProcedure,
			opts...,
		),
		getPackageRepositoryPermissions: connect_go.NewClient[v1alpha1.GetPackageRepositoryPermissionsRequest, v1alpha1.GetPackageRepositoryPermissionsResponse](
			httpClient,
			baseURL+HelmRepositoriesServiceGetPackageRepositoryPermissionsProcedure,
			opts...,
		),
	}
}

// helmRepositoriesServiceClient implements HelmRepositoriesServiceClient.
type helmRepositoriesServiceClient struct {
	addPackageRepository            *connect_go.Client[v1alpha1.AddPackageRepositoryRequest, v1alpha1.AddPackageRepositoryResponse]
	getPackageRepositoryDetail      *connect_go.Client[v1alpha1.GetPackageRepositoryDetailRequest, v1alpha1.GetPackageRepositoryDetailResponse]
	getPackageRepositorySummaries   *connect_go.Client[v1alpha1.GetPackageRepositorySummariesRequest, v1alpha1.GetPackageRepositorySummariesResponse]
	updatePackageRepository         *connect_go.Client[v1alpha1.UpdatePackageRepositoryRequest, v1alpha1.UpdatePackageRepositoryResponse]
	deletePackageRepository         *connect_go.Client[v1alpha1.DeletePackageRepositoryRequest, v1alpha1.DeletePackageRepositoryResponse]
	getPackageRepositoryPermissions *connect_go.Client[v1alpha1.GetPackageRepositoryPermissionsRequest, v1alpha1.GetPackageRepositoryPermissionsResponse]
}

// AddPackageRepository calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService.AddPackageRepository.
func (c *helmRepositoriesServiceClient) AddPackageRepository(ctx context.Context, req *connect_go.Request[v1alpha1.AddPackageRepositoryRequest]) (*connect_go.Response[v1alpha1.AddPackageRepositoryResponse], error) {
	return c.addPackageRepository.CallUnary(ctx, req)
}

// GetPackageRepositoryDetail calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService.GetPackageRepositoryDetail.
func (c *helmRepositoriesServiceClient) GetPackageRepositoryDetail(ctx context.Context, req *connect_go.Request[v1alpha1.GetPackageRepositoryDetailRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryDetailResponse], error) {
	return c.getPackageRepositoryDetail.CallUnary(ctx, req)
}

// GetPackageRepositorySummaries calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService.GetPackageRepositorySummaries.
func (c *helmRepositoriesServiceClient) GetPackageRepositorySummaries(ctx context.Context, req *connect_go.Request[v1alpha1.GetPackageRepositorySummariesRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositorySummariesResponse], error) {
	return c.getPackageRepositorySummaries.CallUnary(ctx, req)
}

// UpdatePackageRepository calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService.UpdatePackageRepository.
func (c *helmRepositoriesServiceClient) UpdatePackageRepository(ctx context.Context, req *connect_go.Request[v1alpha1.UpdatePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.UpdatePackageRepositoryResponse], error) {
	return c.updatePackageRepository.CallUnary(ctx, req)
}

// DeletePackageRepository calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService.DeletePackageRepository.
func (c *helmRepositoriesServiceClient) DeletePackageRepository(ctx context.Context, req *connect_go.Request[v1alpha1.DeletePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.DeletePackageRepositoryResponse], error) {
	return c.deletePackageRepository.CallUnary(ctx, req)
}

// GetPackageRepositoryPermissions calls
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService.GetPackageRepositoryPermissions.
func (c *helmRepositoriesServiceClient) GetPackageRepositoryPermissions(ctx context.Context, req *connect_go.Request[v1alpha1.GetPackageRepositoryPermissionsRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryPermissionsResponse], error) {
	return c.getPackageRepositoryPermissions.CallUnary(ctx, req)
}

// HelmRepositoriesServiceHandler is an implementation of the
// kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService service.
type HelmRepositoriesServiceHandler interface {
	// AddPackageRepository add an existing package repository to the set of ones already managed by the Helm plugin
	AddPackageRepository(context.Context, *connect_go.Request[v1alpha1.AddPackageRepositoryRequest]) (*connect_go.Response[v1alpha1.AddPackageRepositoryResponse], error)
	GetPackageRepositoryDetail(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryDetailRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryDetailResponse], error)
	GetPackageRepositorySummaries(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositorySummariesRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositorySummariesResponse], error)
	UpdatePackageRepository(context.Context, *connect_go.Request[v1alpha1.UpdatePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.UpdatePackageRepositoryResponse], error)
	DeletePackageRepository(context.Context, *connect_go.Request[v1alpha1.DeletePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.DeletePackageRepositoryResponse], error)
	GetPackageRepositoryPermissions(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryPermissionsRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryPermissionsResponse], error)
}

// NewHelmRepositoriesServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHelmRepositoriesServiceHandler(svc HelmRepositoriesServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	helmRepositoriesServiceAddPackageRepositoryHandler := connect_go.NewUnaryHandler(
		HelmRepositoriesServiceAddPackageRepositoryProcedure,
		svc.AddPackageRepository,
		opts...,
	)
	helmRepositoriesServiceGetPackageRepositoryDetailHandler := connect_go.NewUnaryHandler(
		HelmRepositoriesServiceGetPackageRepositoryDetailProcedure,
		svc.GetPackageRepositoryDetail,
		opts...,
	)
	helmRepositoriesServiceGetPackageRepositorySummariesHandler := connect_go.NewUnaryHandler(
		HelmRepositoriesServiceGetPackageRepositorySummariesProcedure,
		svc.GetPackageRepositorySummaries,
		opts...,
	)
	helmRepositoriesServiceUpdatePackageRepositoryHandler := connect_go.NewUnaryHandler(
		HelmRepositoriesServiceUpdatePackageRepositoryProcedure,
		svc.UpdatePackageRepository,
		opts...,
	)
	helmRepositoriesServiceDeletePackageRepositoryHandler := connect_go.NewUnaryHandler(
		HelmRepositoriesServiceDeletePackageRepositoryProcedure,
		svc.DeletePackageRepository,
		opts...,
	)
	helmRepositoriesServiceGetPackageRepositoryPermissionsHandler := connect_go.NewUnaryHandler(
		HelmRepositoriesServiceGetPackageRepositoryPermissionsProcedure,
		svc.GetPackageRepositoryPermissions,
		opts...,
	)
	return "/kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HelmRepositoriesServiceAddPackageRepositoryProcedure:
			helmRepositoriesServiceAddPackageRepositoryHandler.ServeHTTP(w, r)
		case HelmRepositoriesServiceGetPackageRepositoryDetailProcedure:
			helmRepositoriesServiceGetPackageRepositoryDetailHandler.ServeHTTP(w, r)
		case HelmRepositoriesServiceGetPackageRepositorySummariesProcedure:
			helmRepositoriesServiceGetPackageRepositorySummariesHandler.ServeHTTP(w, r)
		case HelmRepositoriesServiceUpdatePackageRepositoryProcedure:
			helmRepositoriesServiceUpdatePackageRepositoryHandler.ServeHTTP(w, r)
		case HelmRepositoriesServiceDeletePackageRepositoryProcedure:
			helmRepositoriesServiceDeletePackageRepositoryHandler.ServeHTTP(w, r)
		case HelmRepositoriesServiceGetPackageRepositoryPermissionsProcedure:
			helmRepositoriesServiceGetPackageRepositoryPermissionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHelmRepositoriesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHelmRepositoriesServiceHandler struct{}

func (UnimplementedHelmRepositoriesServiceHandler) AddPackageRepository(context.Context, *connect_go.Request[v1alpha1.AddPackageRepositoryRequest]) (*connect_go.Response[v1alpha1.AddPackageRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService.AddPackageRepository is not implemented"))
}

func (UnimplementedHelmRepositoriesServiceHandler) GetPackageRepositoryDetail(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryDetailRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService.GetPackageRepositoryDetail is not implemented"))
}

func (UnimplementedHelmRepositoriesServiceHandler) GetPackageRepositorySummaries(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositorySummariesRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositorySummariesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService.GetPackageRepositorySummaries is not implemented"))
}

func (UnimplementedHelmRepositoriesServiceHandler) UpdatePackageRepository(context.Context, *connect_go.Request[v1alpha1.UpdatePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.UpdatePackageRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService.UpdatePackageRepository is not implemented"))
}

func (UnimplementedHelmRepositoriesServiceHandler) DeletePackageRepository(context.Context, *connect_go.Request[v1alpha1.DeletePackageRepositoryRequest]) (*connect_go.Response[v1alpha1.DeletePackageRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService.DeletePackageRepository is not implemented"))
}

func (UnimplementedHelmRepositoriesServiceHandler) GetPackageRepositoryPermissions(context.Context, *connect_go.Request[v1alpha1.GetPackageRepositoryPermissionsRequest]) (*connect_go.Response[v1alpha1.GetPackageRepositoryPermissionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.helm.packages.v1alpha1.HelmRepositoriesService.GetPackageRepositoryPermissions is not implemented"))
}
