// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: kubeappsapis/plugins/resources/v1alpha1/resources.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourcesServiceClient is the client API for ResourcesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourcesServiceClient interface {
	GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (ResourcesService_GetResourcesClient, error)
	GetServiceAccountNames(ctx context.Context, in *GetServiceAccountNamesRequest, opts ...grpc.CallOption) (*GetServiceAccountNamesResponse, error)
	GetNamespaceNames(ctx context.Context, in *GetNamespaceNamesRequest, opts ...grpc.CallOption) (*GetNamespaceNamesResponse, error)
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	CheckNamespaceExists(ctx context.Context, in *CheckNamespaceExistsRequest, opts ...grpc.CallOption) (*CheckNamespaceExistsResponse, error)
	GetSecretNames(ctx context.Context, in *GetSecretNamesRequest, opts ...grpc.CallOption) (*GetSecretNamesResponse, error)
	CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error)
	CanI(ctx context.Context, in *CanIRequest, opts ...grpc.CallOption) (*CanIResponse, error)
}

type resourcesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourcesServiceClient(cc grpc.ClientConnInterface) ResourcesServiceClient {
	return &resourcesServiceClient{cc}
}

func (c *resourcesServiceClient) GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (ResourcesService_GetResourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourcesService_ServiceDesc.Streams[0], "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/GetResources", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourcesServiceGetResourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourcesService_GetResourcesClient interface {
	Recv() (*GetResourcesResponse, error)
	grpc.ClientStream
}

type resourcesServiceGetResourcesClient struct {
	grpc.ClientStream
}

func (x *resourcesServiceGetResourcesClient) Recv() (*GetResourcesResponse, error) {
	m := new(GetResourcesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourcesServiceClient) GetServiceAccountNames(ctx context.Context, in *GetServiceAccountNamesRequest, opts ...grpc.CallOption) (*GetServiceAccountNamesResponse, error) {
	out := new(GetServiceAccountNamesResponse)
	err := c.cc.Invoke(ctx, "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/GetServiceAccountNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesServiceClient) GetNamespaceNames(ctx context.Context, in *GetNamespaceNamesRequest, opts ...grpc.CallOption) (*GetNamespaceNamesResponse, error) {
	out := new(GetNamespaceNamesResponse)
	err := c.cc.Invoke(ctx, "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/GetNamespaceNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesServiceClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) {
	out := new(CreateNamespaceResponse)
	err := c.cc.Invoke(ctx, "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesServiceClient) CheckNamespaceExists(ctx context.Context, in *CheckNamespaceExistsRequest, opts ...grpc.CallOption) (*CheckNamespaceExistsResponse, error) {
	out := new(CheckNamespaceExistsResponse)
	err := c.cc.Invoke(ctx, "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/CheckNamespaceExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesServiceClient) GetSecretNames(ctx context.Context, in *GetSecretNamesRequest, opts ...grpc.CallOption) (*GetSecretNamesResponse, error) {
	out := new(GetSecretNamesResponse)
	err := c.cc.Invoke(ctx, "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/GetSecretNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesServiceClient) CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error) {
	out := new(CreateSecretResponse)
	err := c.cc.Invoke(ctx, "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/CreateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesServiceClient) CanI(ctx context.Context, in *CanIRequest, opts ...grpc.CallOption) (*CanIResponse, error) {
	out := new(CanIResponse)
	err := c.cc.Invoke(ctx, "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/CanI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourcesServiceServer is the server API for ResourcesService service.
// All implementations should embed UnimplementedResourcesServiceServer
// for forward compatibility
type ResourcesServiceServer interface {
	GetResources(*GetResourcesRequest, ResourcesService_GetResourcesServer) error
	GetServiceAccountNames(context.Context, *GetServiceAccountNamesRequest) (*GetServiceAccountNamesResponse, error)
	GetNamespaceNames(context.Context, *GetNamespaceNamesRequest) (*GetNamespaceNamesResponse, error)
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	CheckNamespaceExists(context.Context, *CheckNamespaceExistsRequest) (*CheckNamespaceExistsResponse, error)
	GetSecretNames(context.Context, *GetSecretNamesRequest) (*GetSecretNamesResponse, error)
	CreateSecret(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error)
	CanI(context.Context, *CanIRequest) (*CanIResponse, error)
}

// UnimplementedResourcesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedResourcesServiceServer struct {
}

func (UnimplementedResourcesServiceServer) GetResources(*GetResourcesRequest, ResourcesService_GetResourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}
func (UnimplementedResourcesServiceServer) GetServiceAccountNames(context.Context, *GetServiceAccountNamesRequest) (*GetServiceAccountNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceAccountNames not implemented")
}
func (UnimplementedResourcesServiceServer) GetNamespaceNames(context.Context, *GetNamespaceNamesRequest) (*GetNamespaceNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceNames not implemented")
}
func (UnimplementedResourcesServiceServer) CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedResourcesServiceServer) CheckNamespaceExists(context.Context, *CheckNamespaceExistsRequest) (*CheckNamespaceExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNamespaceExists not implemented")
}
func (UnimplementedResourcesServiceServer) GetSecretNames(context.Context, *GetSecretNamesRequest) (*GetSecretNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecretNames not implemented")
}
func (UnimplementedResourcesServiceServer) CreateSecret(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (UnimplementedResourcesServiceServer) CanI(context.Context, *CanIRequest) (*CanIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanI not implemented")
}

// UnsafeResourcesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourcesServiceServer will
// result in compilation errors.
type UnsafeResourcesServiceServer interface {
	mustEmbedUnimplementedResourcesServiceServer()
}

func RegisterResourcesServiceServer(s grpc.ServiceRegistrar, srv ResourcesServiceServer) {
	s.RegisterService(&ResourcesService_ServiceDesc, srv)
}

func _ResourcesService_GetResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetResourcesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourcesServiceServer).GetResources(m, &resourcesServiceGetResourcesServer{stream})
}

type ResourcesService_GetResourcesServer interface {
	Send(*GetResourcesResponse) error
	grpc.ServerStream
}

type resourcesServiceGetResourcesServer struct {
	grpc.ServerStream
}

func (x *resourcesServiceGetResourcesServer) Send(m *GetResourcesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ResourcesService_GetServiceAccountNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceAccountNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServiceServer).GetServiceAccountNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/GetServiceAccountNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServiceServer).GetServiceAccountNames(ctx, req.(*GetServiceAccountNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcesService_GetNamespaceNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServiceServer).GetNamespaceNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/GetNamespaceNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServiceServer).GetNamespaceNames(ctx, req.(*GetNamespaceNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcesService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServiceServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcesService_CheckNamespaceExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckNamespaceExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServiceServer).CheckNamespaceExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/CheckNamespaceExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServiceServer).CheckNamespaceExists(ctx, req.(*CheckNamespaceExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcesService_GetSecretNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServiceServer).GetSecretNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/GetSecretNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServiceServer).GetSecretNames(ctx, req.(*GetSecretNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcesService_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServiceServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/CreateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServiceServer).CreateSecret(ctx, req.(*CreateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcesService_CanI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServiceServer).CanI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/CanI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServiceServer).CanI(ctx, req.(*CanIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourcesService_ServiceDesc is the grpc.ServiceDesc for ResourcesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourcesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubeappsapis.plugins.resources.v1alpha1.ResourcesService",
	HandlerType: (*ResourcesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceAccountNames",
			Handler:    _ResourcesService_GetServiceAccountNames_Handler,
		},
		{
			MethodName: "GetNamespaceNames",
			Handler:    _ResourcesService_GetNamespaceNames_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _ResourcesService_CreateNamespace_Handler,
		},
		{
			MethodName: "CheckNamespaceExists",
			Handler:    _ResourcesService_CheckNamespaceExists_Handler,
		},
		{
			MethodName: "GetSecretNames",
			Handler:    _ResourcesService_GetSecretNames_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _ResourcesService_CreateSecret_Handler,
		},
		{
			MethodName: "CanI",
			Handler:    _ResourcesService_CanI_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetResources",
			Handler:       _ResourcesService_GetResources_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kubeappsapis/plugins/resources/v1alpha1/resources.proto",
}
