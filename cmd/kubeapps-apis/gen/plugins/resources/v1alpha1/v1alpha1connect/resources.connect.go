// Copyright 2021-2023 the Kubeapps contributors.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kubeappsapis/plugins/resources/v1alpha1/resources.proto

package v1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/gen/plugins/resources/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ResourcesServiceName is the fully-qualified name of the ResourcesService service.
	ResourcesServiceName = "kubeappsapis.plugins.resources.v1alpha1.ResourcesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ResourcesServiceGetResourcesProcedure is the fully-qualified name of the ResourcesService's
	// GetResources RPC.
	ResourcesServiceGetResourcesProcedure = "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/GetResources"
	// ResourcesServiceGetServiceAccountNamesProcedure is the fully-qualified name of the
	// ResourcesService's GetServiceAccountNames RPC.
	ResourcesServiceGetServiceAccountNamesProcedure = "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/GetServiceAccountNames"
	// ResourcesServiceGetNamespaceNamesProcedure is the fully-qualified name of the ResourcesService's
	// GetNamespaceNames RPC.
	ResourcesServiceGetNamespaceNamesProcedure = "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/GetNamespaceNames"
	// ResourcesServiceCreateNamespaceProcedure is the fully-qualified name of the ResourcesService's
	// CreateNamespace RPC.
	ResourcesServiceCreateNamespaceProcedure = "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/CreateNamespace"
	// ResourcesServiceCheckNamespaceExistsProcedure is the fully-qualified name of the
	// ResourcesService's CheckNamespaceExists RPC.
	ResourcesServiceCheckNamespaceExistsProcedure = "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/CheckNamespaceExists"
	// ResourcesServiceGetSecretNamesProcedure is the fully-qualified name of the ResourcesService's
	// GetSecretNames RPC.
	ResourcesServiceGetSecretNamesProcedure = "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/GetSecretNames"
	// ResourcesServiceCreateSecretProcedure is the fully-qualified name of the ResourcesService's
	// CreateSecret RPC.
	ResourcesServiceCreateSecretProcedure = "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/CreateSecret"
	// ResourcesServiceCanIProcedure is the fully-qualified name of the ResourcesService's CanI RPC.
	ResourcesServiceCanIProcedure = "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/CanI"
)

// ResourcesServiceClient is a client for the
// kubeappsapis.plugins.resources.v1alpha1.ResourcesService service.
type ResourcesServiceClient interface {
	GetResources(context.Context, *connect_go.Request[v1alpha1.GetResourcesRequest]) (*connect_go.ServerStreamForClient[v1alpha1.GetResourcesResponse], error)
	GetServiceAccountNames(context.Context, *connect_go.Request[v1alpha1.GetServiceAccountNamesRequest]) (*connect_go.Response[v1alpha1.GetServiceAccountNamesResponse], error)
	GetNamespaceNames(context.Context, *connect_go.Request[v1alpha1.GetNamespaceNamesRequest]) (*connect_go.Response[v1alpha1.GetNamespaceNamesResponse], error)
	CreateNamespace(context.Context, *connect_go.Request[v1alpha1.CreateNamespaceRequest]) (*connect_go.Response[v1alpha1.CreateNamespaceResponse], error)
	CheckNamespaceExists(context.Context, *connect_go.Request[v1alpha1.CheckNamespaceExistsRequest]) (*connect_go.Response[v1alpha1.CheckNamespaceExistsResponse], error)
	GetSecretNames(context.Context, *connect_go.Request[v1alpha1.GetSecretNamesRequest]) (*connect_go.Response[v1alpha1.GetSecretNamesResponse], error)
	CreateSecret(context.Context, *connect_go.Request[v1alpha1.CreateSecretRequest]) (*connect_go.Response[v1alpha1.CreateSecretResponse], error)
	CanI(context.Context, *connect_go.Request[v1alpha1.CanIRequest]) (*connect_go.Response[v1alpha1.CanIResponse], error)
}

// NewResourcesServiceClient constructs a client for the
// kubeappsapis.plugins.resources.v1alpha1.ResourcesService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewResourcesServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ResourcesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &resourcesServiceClient{
		getResources: connect_go.NewClient[v1alpha1.GetResourcesRequest, v1alpha1.GetResourcesResponse](
			httpClient,
			baseURL+ResourcesServiceGetResourcesProcedure,
			opts...,
		),
		getServiceAccountNames: connect_go.NewClient[v1alpha1.GetServiceAccountNamesRequest, v1alpha1.GetServiceAccountNamesResponse](
			httpClient,
			baseURL+ResourcesServiceGetServiceAccountNamesProcedure,
			opts...,
		),
		getNamespaceNames: connect_go.NewClient[v1alpha1.GetNamespaceNamesRequest, v1alpha1.GetNamespaceNamesResponse](
			httpClient,
			baseURL+ResourcesServiceGetNamespaceNamesProcedure,
			opts...,
		),
		createNamespace: connect_go.NewClient[v1alpha1.CreateNamespaceRequest, v1alpha1.CreateNamespaceResponse](
			httpClient,
			baseURL+ResourcesServiceCreateNamespaceProcedure,
			opts...,
		),
		checkNamespaceExists: connect_go.NewClient[v1alpha1.CheckNamespaceExistsRequest, v1alpha1.CheckNamespaceExistsResponse](
			httpClient,
			baseURL+ResourcesServiceCheckNamespaceExistsProcedure,
			opts...,
		),
		getSecretNames: connect_go.NewClient[v1alpha1.GetSecretNamesRequest, v1alpha1.GetSecretNamesResponse](
			httpClient,
			baseURL+ResourcesServiceGetSecretNamesProcedure,
			opts...,
		),
		createSecret: connect_go.NewClient[v1alpha1.CreateSecretRequest, v1alpha1.CreateSecretResponse](
			httpClient,
			baseURL+ResourcesServiceCreateSecretProcedure,
			opts...,
		),
		canI: connect_go.NewClient[v1alpha1.CanIRequest, v1alpha1.CanIResponse](
			httpClient,
			baseURL+ResourcesServiceCanIProcedure,
			opts...,
		),
	}
}

// resourcesServiceClient implements ResourcesServiceClient.
type resourcesServiceClient struct {
	getResources           *connect_go.Client[v1alpha1.GetResourcesRequest, v1alpha1.GetResourcesResponse]
	getServiceAccountNames *connect_go.Client[v1alpha1.GetServiceAccountNamesRequest, v1alpha1.GetServiceAccountNamesResponse]
	getNamespaceNames      *connect_go.Client[v1alpha1.GetNamespaceNamesRequest, v1alpha1.GetNamespaceNamesResponse]
	createNamespace        *connect_go.Client[v1alpha1.CreateNamespaceRequest, v1alpha1.CreateNamespaceResponse]
	checkNamespaceExists   *connect_go.Client[v1alpha1.CheckNamespaceExistsRequest, v1alpha1.CheckNamespaceExistsResponse]
	getSecretNames         *connect_go.Client[v1alpha1.GetSecretNamesRequest, v1alpha1.GetSecretNamesResponse]
	createSecret           *connect_go.Client[v1alpha1.CreateSecretRequest, v1alpha1.CreateSecretResponse]
	canI                   *connect_go.Client[v1alpha1.CanIRequest, v1alpha1.CanIResponse]
}

// GetResources calls kubeappsapis.plugins.resources.v1alpha1.ResourcesService.GetResources.
func (c *resourcesServiceClient) GetResources(ctx context.Context, req *connect_go.Request[v1alpha1.GetResourcesRequest]) (*connect_go.ServerStreamForClient[v1alpha1.GetResourcesResponse], error) {
	return c.getResources.CallServerStream(ctx, req)
}

// GetServiceAccountNames calls
// kubeappsapis.plugins.resources.v1alpha1.ResourcesService.GetServiceAccountNames.
func (c *resourcesServiceClient) GetServiceAccountNames(ctx context.Context, req *connect_go.Request[v1alpha1.GetServiceAccountNamesRequest]) (*connect_go.Response[v1alpha1.GetServiceAccountNamesResponse], error) {
	return c.getServiceAccountNames.CallUnary(ctx, req)
}

// GetNamespaceNames calls
// kubeappsapis.plugins.resources.v1alpha1.ResourcesService.GetNamespaceNames.
func (c *resourcesServiceClient) GetNamespaceNames(ctx context.Context, req *connect_go.Request[v1alpha1.GetNamespaceNamesRequest]) (*connect_go.Response[v1alpha1.GetNamespaceNamesResponse], error) {
	return c.getNamespaceNames.CallUnary(ctx, req)
}

// CreateNamespace calls kubeappsapis.plugins.resources.v1alpha1.ResourcesService.CreateNamespace.
func (c *resourcesServiceClient) CreateNamespace(ctx context.Context, req *connect_go.Request[v1alpha1.CreateNamespaceRequest]) (*connect_go.Response[v1alpha1.CreateNamespaceResponse], error) {
	return c.createNamespace.CallUnary(ctx, req)
}

// CheckNamespaceExists calls
// kubeappsapis.plugins.resources.v1alpha1.ResourcesService.CheckNamespaceExists.
func (c *resourcesServiceClient) CheckNamespaceExists(ctx context.Context, req *connect_go.Request[v1alpha1.CheckNamespaceExistsRequest]) (*connect_go.Response[v1alpha1.CheckNamespaceExistsResponse], error) {
	return c.checkNamespaceExists.CallUnary(ctx, req)
}

// GetSecretNames calls kubeappsapis.plugins.resources.v1alpha1.ResourcesService.GetSecretNames.
func (c *resourcesServiceClient) GetSecretNames(ctx context.Context, req *connect_go.Request[v1alpha1.GetSecretNamesRequest]) (*connect_go.Response[v1alpha1.GetSecretNamesResponse], error) {
	return c.getSecretNames.CallUnary(ctx, req)
}

// CreateSecret calls kubeappsapis.plugins.resources.v1alpha1.ResourcesService.CreateSecret.
func (c *resourcesServiceClient) CreateSecret(ctx context.Context, req *connect_go.Request[v1alpha1.CreateSecretRequest]) (*connect_go.Response[v1alpha1.CreateSecretResponse], error) {
	return c.createSecret.CallUnary(ctx, req)
}

// CanI calls kubeappsapis.plugins.resources.v1alpha1.ResourcesService.CanI.
func (c *resourcesServiceClient) CanI(ctx context.Context, req *connect_go.Request[v1alpha1.CanIRequest]) (*connect_go.Response[v1alpha1.CanIResponse], error) {
	return c.canI.CallUnary(ctx, req)
}

// ResourcesServiceHandler is an implementation of the
// kubeappsapis.plugins.resources.v1alpha1.ResourcesService service.
type ResourcesServiceHandler interface {
	GetResources(context.Context, *connect_go.Request[v1alpha1.GetResourcesRequest], *connect_go.ServerStream[v1alpha1.GetResourcesResponse]) error
	GetServiceAccountNames(context.Context, *connect_go.Request[v1alpha1.GetServiceAccountNamesRequest]) (*connect_go.Response[v1alpha1.GetServiceAccountNamesResponse], error)
	GetNamespaceNames(context.Context, *connect_go.Request[v1alpha1.GetNamespaceNamesRequest]) (*connect_go.Response[v1alpha1.GetNamespaceNamesResponse], error)
	CreateNamespace(context.Context, *connect_go.Request[v1alpha1.CreateNamespaceRequest]) (*connect_go.Response[v1alpha1.CreateNamespaceResponse], error)
	CheckNamespaceExists(context.Context, *connect_go.Request[v1alpha1.CheckNamespaceExistsRequest]) (*connect_go.Response[v1alpha1.CheckNamespaceExistsResponse], error)
	GetSecretNames(context.Context, *connect_go.Request[v1alpha1.GetSecretNamesRequest]) (*connect_go.Response[v1alpha1.GetSecretNamesResponse], error)
	CreateSecret(context.Context, *connect_go.Request[v1alpha1.CreateSecretRequest]) (*connect_go.Response[v1alpha1.CreateSecretResponse], error)
	CanI(context.Context, *connect_go.Request[v1alpha1.CanIRequest]) (*connect_go.Response[v1alpha1.CanIResponse], error)
}

// NewResourcesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewResourcesServiceHandler(svc ResourcesServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	resourcesServiceGetResourcesHandler := connect_go.NewServerStreamHandler(
		ResourcesServiceGetResourcesProcedure,
		svc.GetResources,
		opts...,
	)
	resourcesServiceGetServiceAccountNamesHandler := connect_go.NewUnaryHandler(
		ResourcesServiceGetServiceAccountNamesProcedure,
		svc.GetServiceAccountNames,
		opts...,
	)
	resourcesServiceGetNamespaceNamesHandler := connect_go.NewUnaryHandler(
		ResourcesServiceGetNamespaceNamesProcedure,
		svc.GetNamespaceNames,
		opts...,
	)
	resourcesServiceCreateNamespaceHandler := connect_go.NewUnaryHandler(
		ResourcesServiceCreateNamespaceProcedure,
		svc.CreateNamespace,
		opts...,
	)
	resourcesServiceCheckNamespaceExistsHandler := connect_go.NewUnaryHandler(
		ResourcesServiceCheckNamespaceExistsProcedure,
		svc.CheckNamespaceExists,
		opts...,
	)
	resourcesServiceGetSecretNamesHandler := connect_go.NewUnaryHandler(
		ResourcesServiceGetSecretNamesProcedure,
		svc.GetSecretNames,
		opts...,
	)
	resourcesServiceCreateSecretHandler := connect_go.NewUnaryHandler(
		ResourcesServiceCreateSecretProcedure,
		svc.CreateSecret,
		opts...,
	)
	resourcesServiceCanIHandler := connect_go.NewUnaryHandler(
		ResourcesServiceCanIProcedure,
		svc.CanI,
		opts...,
	)
	return "/kubeappsapis.plugins.resources.v1alpha1.ResourcesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ResourcesServiceGetResourcesProcedure:
			resourcesServiceGetResourcesHandler.ServeHTTP(w, r)
		case ResourcesServiceGetServiceAccountNamesProcedure:
			resourcesServiceGetServiceAccountNamesHandler.ServeHTTP(w, r)
		case ResourcesServiceGetNamespaceNamesProcedure:
			resourcesServiceGetNamespaceNamesHandler.ServeHTTP(w, r)
		case ResourcesServiceCreateNamespaceProcedure:
			resourcesServiceCreateNamespaceHandler.ServeHTTP(w, r)
		case ResourcesServiceCheckNamespaceExistsProcedure:
			resourcesServiceCheckNamespaceExistsHandler.ServeHTTP(w, r)
		case ResourcesServiceGetSecretNamesProcedure:
			resourcesServiceGetSecretNamesHandler.ServeHTTP(w, r)
		case ResourcesServiceCreateSecretProcedure:
			resourcesServiceCreateSecretHandler.ServeHTTP(w, r)
		case ResourcesServiceCanIProcedure:
			resourcesServiceCanIHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedResourcesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedResourcesServiceHandler struct{}

func (UnimplementedResourcesServiceHandler) GetResources(context.Context, *connect_go.Request[v1alpha1.GetResourcesRequest], *connect_go.ServerStream[v1alpha1.GetResourcesResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.resources.v1alpha1.ResourcesService.GetResources is not implemented"))
}

func (UnimplementedResourcesServiceHandler) GetServiceAccountNames(context.Context, *connect_go.Request[v1alpha1.GetServiceAccountNamesRequest]) (*connect_go.Response[v1alpha1.GetServiceAccountNamesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.resources.v1alpha1.ResourcesService.GetServiceAccountNames is not implemented"))
}

func (UnimplementedResourcesServiceHandler) GetNamespaceNames(context.Context, *connect_go.Request[v1alpha1.GetNamespaceNamesRequest]) (*connect_go.Response[v1alpha1.GetNamespaceNamesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.resources.v1alpha1.ResourcesService.GetNamespaceNames is not implemented"))
}

func (UnimplementedResourcesServiceHandler) CreateNamespace(context.Context, *connect_go.Request[v1alpha1.CreateNamespaceRequest]) (*connect_go.Response[v1alpha1.CreateNamespaceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.resources.v1alpha1.ResourcesService.CreateNamespace is not implemented"))
}

func (UnimplementedResourcesServiceHandler) CheckNamespaceExists(context.Context, *connect_go.Request[v1alpha1.CheckNamespaceExistsRequest]) (*connect_go.Response[v1alpha1.CheckNamespaceExistsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.resources.v1alpha1.ResourcesService.CheckNamespaceExists is not implemented"))
}

func (UnimplementedResourcesServiceHandler) GetSecretNames(context.Context, *connect_go.Request[v1alpha1.GetSecretNamesRequest]) (*connect_go.Response[v1alpha1.GetSecretNamesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.resources.v1alpha1.ResourcesService.GetSecretNames is not implemented"))
}

func (UnimplementedResourcesServiceHandler) CreateSecret(context.Context, *connect_go.Request[v1alpha1.CreateSecretRequest]) (*connect_go.Response[v1alpha1.CreateSecretResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.resources.v1alpha1.ResourcesService.CreateSecret is not implemented"))
}

func (UnimplementedResourcesServiceHandler) CanI(context.Context, *connect_go.Request[v1alpha1.CanIRequest]) (*connect_go.Response[v1alpha1.CanIResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.plugins.resources.v1alpha1.ResourcesService.CanI is not implemented"))
}
