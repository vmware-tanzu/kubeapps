// Copyright 2021-2022 the Kubeapps contributors.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: kubeappsapis/core/packages/v1alpha1/repositories.proto

package v1alpha1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v1alpha1 "github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/gen/core/plugins/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PackageRepositoryAuth_PackageRepositoryAuthType int32

const (
	PackageRepositoryAuth_PACKAGE_REPOSITORY_AUTH_TYPE_UNSPECIFIED          PackageRepositoryAuth_PackageRepositoryAuthType = 0
	PackageRepositoryAuth_PACKAGE_REPOSITORY_AUTH_TYPE_BASIC_AUTH           PackageRepositoryAuth_PackageRepositoryAuthType = 1 // uses UsernamePassword
	PackageRepositoryAuth_PACKAGE_REPOSITORY_AUTH_TYPE_TLS                  PackageRepositoryAuth_PackageRepositoryAuthType = 2 // uses TlsCertKey
	PackageRepositoryAuth_PACKAGE_REPOSITORY_AUTH_TYPE_BEARER               PackageRepositoryAuth_PackageRepositoryAuthType = 3 // uses header
	PackageRepositoryAuth_PACKAGE_REPOSITORY_AUTH_TYPE_AUTHORIZATION_HEADER PackageRepositoryAuth_PackageRepositoryAuthType = 4 // uses header
	PackageRepositoryAuth_PACKAGE_REPOSITORY_AUTH_TYPE_DOCKER_CONFIG_JSON   PackageRepositoryAuth_PackageRepositoryAuthType = 5 // uses DockerCredentials
	PackageRepositoryAuth_PACKAGE_REPOSITORY_AUTH_TYPE_SSH                  PackageRepositoryAuth_PackageRepositoryAuthType = 6 // uses SshCredentials
	PackageRepositoryAuth_PACKAGE_REPOSITORY_AUTH_TYPE_OPAQUE               PackageRepositoryAuth_PackageRepositoryAuthType = 7 // uses OpaqueCredentials
)

// Enum value maps for PackageRepositoryAuth_PackageRepositoryAuthType.
var (
	PackageRepositoryAuth_PackageRepositoryAuthType_name = map[int32]string{
		0: "PACKAGE_REPOSITORY_AUTH_TYPE_UNSPECIFIED",
		1: "PACKAGE_REPOSITORY_AUTH_TYPE_BASIC_AUTH",
		2: "PACKAGE_REPOSITORY_AUTH_TYPE_TLS",
		3: "PACKAGE_REPOSITORY_AUTH_TYPE_BEARER",
		4: "PACKAGE_REPOSITORY_AUTH_TYPE_AUTHORIZATION_HEADER",
		5: "PACKAGE_REPOSITORY_AUTH_TYPE_DOCKER_CONFIG_JSON",
		6: "PACKAGE_REPOSITORY_AUTH_TYPE_SSH",
		7: "PACKAGE_REPOSITORY_AUTH_TYPE_OPAQUE",
	}
	PackageRepositoryAuth_PackageRepositoryAuthType_value = map[string]int32{
		"PACKAGE_REPOSITORY_AUTH_TYPE_UNSPECIFIED":          0,
		"PACKAGE_REPOSITORY_AUTH_TYPE_BASIC_AUTH":           1,
		"PACKAGE_REPOSITORY_AUTH_TYPE_TLS":                  2,
		"PACKAGE_REPOSITORY_AUTH_TYPE_BEARER":               3,
		"PACKAGE_REPOSITORY_AUTH_TYPE_AUTHORIZATION_HEADER": 4,
		"PACKAGE_REPOSITORY_AUTH_TYPE_DOCKER_CONFIG_JSON":   5,
		"PACKAGE_REPOSITORY_AUTH_TYPE_SSH":                  6,
		"PACKAGE_REPOSITORY_AUTH_TYPE_OPAQUE":               7,
	}
)

func (x PackageRepositoryAuth_PackageRepositoryAuthType) Enum() *PackageRepositoryAuth_PackageRepositoryAuthType {
	p := new(PackageRepositoryAuth_PackageRepositoryAuthType)
	*p = x
	return p
}

func (x PackageRepositoryAuth_PackageRepositoryAuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageRepositoryAuth_PackageRepositoryAuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_enumTypes[0].Descriptor()
}

func (PackageRepositoryAuth_PackageRepositoryAuthType) Type() protoreflect.EnumType {
	return &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_enumTypes[0]
}

func (x PackageRepositoryAuth_PackageRepositoryAuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageRepositoryAuth_PackageRepositoryAuthType.Descriptor instead.
func (PackageRepositoryAuth_PackageRepositoryAuthType) EnumDescriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{2, 0}
}

// StatusReason
//
// Generic reasons why a package repository may be ready or not.
// These should make sense across different packaging plugins.
type PackageRepositoryStatus_StatusReason int32

const (
	PackageRepositoryStatus_STATUS_REASON_UNSPECIFIED PackageRepositoryStatus_StatusReason = 0
	PackageRepositoryStatus_STATUS_REASON_SUCCESS     PackageRepositoryStatus_StatusReason = 1
	PackageRepositoryStatus_STATUS_REASON_FAILED      PackageRepositoryStatus_StatusReason = 2
	PackageRepositoryStatus_STATUS_REASON_PENDING     PackageRepositoryStatus_StatusReason = 3
)

// Enum value maps for PackageRepositoryStatus_StatusReason.
var (
	PackageRepositoryStatus_StatusReason_name = map[int32]string{
		0: "STATUS_REASON_UNSPECIFIED",
		1: "STATUS_REASON_SUCCESS",
		2: "STATUS_REASON_FAILED",
		3: "STATUS_REASON_PENDING",
	}
	PackageRepositoryStatus_StatusReason_value = map[string]int32{
		"STATUS_REASON_UNSPECIFIED": 0,
		"STATUS_REASON_SUCCESS":     1,
		"STATUS_REASON_FAILED":      2,
		"STATUS_REASON_PENDING":     3,
	}
)

func (x PackageRepositoryStatus_StatusReason) Enum() *PackageRepositoryStatus_StatusReason {
	p := new(PackageRepositoryStatus_StatusReason)
	*p = x
	return p
}

func (x PackageRepositoryStatus_StatusReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageRepositoryStatus_StatusReason) Descriptor() protoreflect.EnumDescriptor {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_enumTypes[1].Descriptor()
}

func (PackageRepositoryStatus_StatusReason) Type() protoreflect.EnumType {
	return &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_enumTypes[1]
}

func (x PackageRepositoryStatus_StatusReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageRepositoryStatus_StatusReason.Descriptor instead.
func (PackageRepositoryStatus_StatusReason) EnumDescriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{15, 0}
}

// AddPackageRepositoryRequest
//
// Request for AddPackageRepository
type AddPackageRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target context where the package repository is intended to be
	// installed.
	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// A user-provided name for the package repository (e.g. bitnami)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A user-provided description. Optional
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Whether this repository is global or namespace-scoped. Optional.
	// By default, the value is false, i.e. the repository is global
	NamespaceScoped bool `protobuf:"varint,4,opt,name=namespace_scoped,json=namespaceScoped,proto3" json:"namespace_scoped,omitempty"`
	// Package storage type
	// In general, each plug-in will define an acceptable set of valid types
	// - for direct helm plug-in valid values are: "helm" and "oci"
	// - for flux plug-in valid values are: "helm" and "oci". In the
	//   future, we may add support for git and/or AWS s3-style buckets
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// A URL identifying the package repository location. Must contain at
	// least a protocol and host
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// The interval at which to check the upstream for updates (in time+unit)
	// Optional. Defaults to 10m if not specified
	Interval string `protobuf:"bytes,7,opt,name=interval,proto3" json:"interval,omitempty"`
	// TLS-specific parameters for connecting to a repository. Optional
	TlsConfig *PackageRepositoryTlsConfig `protobuf:"bytes,8,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	// authentication parameters for connecting to a repository. Optional
	Auth *PackageRepositoryAuth `protobuf:"bytes,9,opt,name=auth,proto3" json:"auth,omitempty"`
	// The plugin used to interact with this package repository.
	// This field should be omitted when the request is in the context of a
	// specific plugin.
	Plugin *v1alpha1.Plugin `protobuf:"bytes,10,opt,name=plugin,proto3" json:"plugin,omitempty"`
	// Custom data added by the plugin
	// A plugin can define custom details for data which is not yet, or
	// never will be specified in the core AddPackageRepositoryRequest
	// fields. The use of an `Any` field means that each plugin can define
	// the structure of this message as required, while still satisfying the
	// core interface.
	// See https://developers.google.com/protocol-buffers/docs/proto3#any
	// Just for reference, some of the examples that have been chosen not to
	// be part of the core API but rather plugin-specific details are:
	//   direct-helm:
	//      - image pull secrets
	//      - list of oci repositories
	//      - filter rules
	//      - sync job pod template
	CustomDetail *anypb.Any `protobuf:"bytes,11,opt,name=custom_detail,json=customDetail,proto3" json:"custom_detail,omitempty"`
}

func (x *AddPackageRepositoryRequest) Reset() {
	*x = AddPackageRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPackageRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPackageRepositoryRequest) ProtoMessage() {}

func (x *AddPackageRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPackageRepositoryRequest.ProtoReflect.Descriptor instead.
func (*AddPackageRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{0}
}

func (x *AddPackageRepositoryRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *AddPackageRepositoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddPackageRepositoryRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddPackageRepositoryRequest) GetNamespaceScoped() bool {
	if x != nil {
		return x.NamespaceScoped
	}
	return false
}

func (x *AddPackageRepositoryRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddPackageRepositoryRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddPackageRepositoryRequest) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *AddPackageRepositoryRequest) GetTlsConfig() *PackageRepositoryTlsConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

func (x *AddPackageRepositoryRequest) GetAuth() *PackageRepositoryAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *AddPackageRepositoryRequest) GetPlugin() *v1alpha1.Plugin {
	if x != nil {
		return x.Plugin
	}
	return nil
}

func (x *AddPackageRepositoryRequest) GetCustomDetail() *anypb.Any {
	if x != nil {
		return x.CustomDetail
	}
	return nil
}

// PackageRepositoryTlsConfig
//
type PackageRepositoryTlsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// whether or not to skip TLS verification
	// note that fluxv2 does not currently support this and will raise an
	// error should this flag be set to true
	InsecureSkipVerify bool `protobuf:"varint,1,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
	// Types that are assignable to PackageRepoTlsConfigOneOf:
	//	*PackageRepositoryTlsConfig_CertAuthority
	//	*PackageRepositoryTlsConfig_SecretRef
	PackageRepoTlsConfigOneOf isPackageRepositoryTlsConfig_PackageRepoTlsConfigOneOf `protobuf_oneof:"package_repo_tls_config_one_of"`
}

func (x *PackageRepositoryTlsConfig) Reset() {
	*x = PackageRepositoryTlsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageRepositoryTlsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageRepositoryTlsConfig) ProtoMessage() {}

func (x *PackageRepositoryTlsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageRepositoryTlsConfig.ProtoReflect.Descriptor instead.
func (*PackageRepositoryTlsConfig) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{1}
}

func (x *PackageRepositoryTlsConfig) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

func (m *PackageRepositoryTlsConfig) GetPackageRepoTlsConfigOneOf() isPackageRepositoryTlsConfig_PackageRepoTlsConfigOneOf {
	if m != nil {
		return m.PackageRepoTlsConfigOneOf
	}
	return nil
}

func (x *PackageRepositoryTlsConfig) GetCertAuthority() string {
	if x, ok := x.GetPackageRepoTlsConfigOneOf().(*PackageRepositoryTlsConfig_CertAuthority); ok {
		return x.CertAuthority
	}
	return ""
}

func (x *PackageRepositoryTlsConfig) GetSecretRef() *SecretKeyReference {
	if x, ok := x.GetPackageRepoTlsConfigOneOf().(*PackageRepositoryTlsConfig_SecretRef); ok {
		return x.SecretRef
	}
	return nil
}

type isPackageRepositoryTlsConfig_PackageRepoTlsConfigOneOf interface {
	isPackageRepositoryTlsConfig_PackageRepoTlsConfigOneOf()
}

type PackageRepositoryTlsConfig_CertAuthority struct {
	// certificate authority. Optional
	CertAuthority string `protobuf:"bytes,2,opt,name=cert_authority,json=certAuthority,proto3,oneof"`
}

type PackageRepositoryTlsConfig_SecretRef struct {
	// a reference to an existing secret that contains custom CA
	SecretRef *SecretKeyReference `protobuf:"bytes,3,opt,name=secret_ref,json=secretRef,proto3,oneof"`
}

func (*PackageRepositoryTlsConfig_CertAuthority) isPackageRepositoryTlsConfig_PackageRepoTlsConfigOneOf() {
}

func (*PackageRepositoryTlsConfig_SecretRef) isPackageRepositoryTlsConfig_PackageRepoTlsConfigOneOf() {
}

// PackageRepositoryAuth
//
// Authentication/authorization to provide client's identity when connecting
// to a package repository.
// There are 6 total distinct use cases we may support:
// 1) None (Public)
// 2) Basic Auth
// 3) Bearer Token
// 4) Custom Authorization Header
// 5) Docker Registry Credentials (for OCI only)
// 6) TLS certificate and key
//
// Note that (1)-(4) may be done over HTTP or HTTPs without any custom
// certificates or certificate authority
// (1) is handled by not not having PackageRepositoryAuth field on
//     the parent object
// a given plug-in may or may not support a given authentication type.
// For example
//  - direct-helm plug-in does not currently support (6), while flux does
//  - flux plug-in does not support (3) or (4) while direct-helm does
type PackageRepositoryAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type PackageRepositoryAuth_PackageRepositoryAuthType `protobuf:"varint,1,opt,name=type,proto3,enum=kubeappsapis.core.packages.v1alpha1.PackageRepositoryAuth_PackageRepositoryAuthType" json:"type,omitempty"`
	// Types that are assignable to PackageRepoAuthOneOf:
	//	*PackageRepositoryAuth_UsernamePassword
	//	*PackageRepositoryAuth_TlsCertKey
	//	*PackageRepositoryAuth_DockerCreds
	//	*PackageRepositoryAuth_Header
	//	*PackageRepositoryAuth_SecretRef
	//	*PackageRepositoryAuth_SshCreds
	//	*PackageRepositoryAuth_OpaqueCreds
	PackageRepoAuthOneOf isPackageRepositoryAuth_PackageRepoAuthOneOf `protobuf_oneof:"package_repo_auth_one_of"`
	// pass_credentials allows the credentials from the SecretRef to be passed
	// on to a host that does not match the host as defined in URL.
	// This flag controls whether or not it is allowed to passing credentials
	// with requests to other domains linked from the repository.
	// This may be needed if the host of the advertised chart URLs in the
	// index differs from the defined URL. Optional
	PassCredentials bool `protobuf:"varint,7,opt,name=pass_credentials,json=passCredentials,proto3" json:"pass_credentials,omitempty"`
}

func (x *PackageRepositoryAuth) Reset() {
	*x = PackageRepositoryAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageRepositoryAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageRepositoryAuth) ProtoMessage() {}

func (x *PackageRepositoryAuth) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageRepositoryAuth.ProtoReflect.Descriptor instead.
func (*PackageRepositoryAuth) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{2}
}

func (x *PackageRepositoryAuth) GetType() PackageRepositoryAuth_PackageRepositoryAuthType {
	if x != nil {
		return x.Type
	}
	return PackageRepositoryAuth_PACKAGE_REPOSITORY_AUTH_TYPE_UNSPECIFIED
}

func (m *PackageRepositoryAuth) GetPackageRepoAuthOneOf() isPackageRepositoryAuth_PackageRepoAuthOneOf {
	if m != nil {
		return m.PackageRepoAuthOneOf
	}
	return nil
}

func (x *PackageRepositoryAuth) GetUsernamePassword() *UsernamePassword {
	if x, ok := x.GetPackageRepoAuthOneOf().(*PackageRepositoryAuth_UsernamePassword); ok {
		return x.UsernamePassword
	}
	return nil
}

func (x *PackageRepositoryAuth) GetTlsCertKey() *TlsCertKey {
	if x, ok := x.GetPackageRepoAuthOneOf().(*PackageRepositoryAuth_TlsCertKey); ok {
		return x.TlsCertKey
	}
	return nil
}

func (x *PackageRepositoryAuth) GetDockerCreds() *DockerCredentials {
	if x, ok := x.GetPackageRepoAuthOneOf().(*PackageRepositoryAuth_DockerCreds); ok {
		return x.DockerCreds
	}
	return nil
}

func (x *PackageRepositoryAuth) GetHeader() string {
	if x, ok := x.GetPackageRepoAuthOneOf().(*PackageRepositoryAuth_Header); ok {
		return x.Header
	}
	return ""
}

func (x *PackageRepositoryAuth) GetSecretRef() *SecretKeyReference {
	if x, ok := x.GetPackageRepoAuthOneOf().(*PackageRepositoryAuth_SecretRef); ok {
		return x.SecretRef
	}
	return nil
}

func (x *PackageRepositoryAuth) GetSshCreds() *SshCredentials {
	if x, ok := x.GetPackageRepoAuthOneOf().(*PackageRepositoryAuth_SshCreds); ok {
		return x.SshCreds
	}
	return nil
}

func (x *PackageRepositoryAuth) GetOpaqueCreds() *OpaqueCredentials {
	if x, ok := x.GetPackageRepoAuthOneOf().(*PackageRepositoryAuth_OpaqueCreds); ok {
		return x.OpaqueCreds
	}
	return nil
}

func (x *PackageRepositoryAuth) GetPassCredentials() bool {
	if x != nil {
		return x.PassCredentials
	}
	return false
}

type isPackageRepositoryAuth_PackageRepoAuthOneOf interface {
	isPackageRepositoryAuth_PackageRepoAuthOneOf()
}

type PackageRepositoryAuth_UsernamePassword struct {
	// username and plain text password
	UsernamePassword *UsernamePassword `protobuf:"bytes,2,opt,name=username_password,json=usernamePassword,proto3,oneof"`
}

type PackageRepositoryAuth_TlsCertKey struct {
	// certificate and key for TLS-based authentication
	TlsCertKey *TlsCertKey `protobuf:"bytes,3,opt,name=tls_cert_key,json=tlsCertKey,proto3,oneof"`
}

type PackageRepositoryAuth_DockerCreds struct {
	// docker credentials
	DockerCreds *DockerCredentials `protobuf:"bytes,4,opt,name=docker_creds,json=dockerCreds,proto3,oneof"`
}

type PackageRepositoryAuth_Header struct {
	// for Bearer Auth token value
	// for Custom Auth, complete value of "Authorization" header
	Header string `protobuf:"bytes,5,opt,name=header,proto3,oneof"`
}

type PackageRepositoryAuth_SecretRef struct {
	// a reference to an existing secret
	SecretRef *SecretKeyReference `protobuf:"bytes,6,opt,name=secret_ref,json=secretRef,proto3,oneof"`
}

type PackageRepositoryAuth_SshCreds struct {
	// SSH credentials
	SshCreds *SshCredentials `protobuf:"bytes,8,opt,name=ssh_creds,json=sshCreds,proto3,oneof"`
}

type PackageRepositoryAuth_OpaqueCreds struct {
	// opaque credentials
	OpaqueCreds *OpaqueCredentials `protobuf:"bytes,9,opt,name=opaque_creds,json=opaqueCreds,proto3,oneof"`
}

func (*PackageRepositoryAuth_UsernamePassword) isPackageRepositoryAuth_PackageRepoAuthOneOf() {}

func (*PackageRepositoryAuth_TlsCertKey) isPackageRepositoryAuth_PackageRepoAuthOneOf() {}

func (*PackageRepositoryAuth_DockerCreds) isPackageRepositoryAuth_PackageRepoAuthOneOf() {}

func (*PackageRepositoryAuth_Header) isPackageRepositoryAuth_PackageRepoAuthOneOf() {}

func (*PackageRepositoryAuth_SecretRef) isPackageRepositoryAuth_PackageRepoAuthOneOf() {}

func (*PackageRepositoryAuth_SshCreds) isPackageRepositoryAuth_PackageRepoAuthOneOf() {}

func (*PackageRepositoryAuth_OpaqueCreds) isPackageRepositoryAuth_PackageRepoAuthOneOf() {}

// UsernamePassword
//
type UsernamePassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In clear text
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// In clear text
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *UsernamePassword) Reset() {
	*x = UsernamePassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsernamePassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernamePassword) ProtoMessage() {}

func (x *UsernamePassword) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernamePassword.ProtoReflect.Descriptor instead.
func (*UsernamePassword) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{3}
}

func (x *UsernamePassword) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UsernamePassword) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// TlsCertKey
//
type TlsCertKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// certificate (identity). In clear text
	Cert string `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	// certificate key. In clear text
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TlsCertKey) Reset() {
	*x = TlsCertKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TlsCertKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsCertKey) ProtoMessage() {}

func (x *TlsCertKey) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsCertKey.ProtoReflect.Descriptor instead.
func (*TlsCertKey) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{4}
}

func (x *TlsCertKey) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *TlsCertKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// DockerCredentials
//
type DockerCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// server name
	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// username.
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// password. In clear text
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// email address
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *DockerCredentials) Reset() {
	*x = DockerCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerCredentials) ProtoMessage() {}

func (x *DockerCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerCredentials.ProtoReflect.Descriptor instead.
func (*DockerCredentials) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{5}
}

func (x *DockerCredentials) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *DockerCredentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DockerCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DockerCredentials) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

// SshCredentials
//
type SshCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// private key
	PrivateKey string `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// known hosts.
	KnownHosts string `protobuf:"bytes,2,opt,name=known_hosts,json=knownHosts,proto3" json:"known_hosts,omitempty"`
}

func (x *SshCredentials) Reset() {
	*x = SshCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshCredentials) ProtoMessage() {}

func (x *SshCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshCredentials.ProtoReflect.Descriptor instead.
func (*SshCredentials) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{6}
}

func (x *SshCredentials) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *SshCredentials) GetKnownHosts() string {
	if x != nil {
		return x.KnownHosts
	}
	return ""
}

// OpaqueCredentials
//
type OpaqueCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fields
	Data map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OpaqueCredentials) Reset() {
	*x = OpaqueCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpaqueCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpaqueCredentials) ProtoMessage() {}

func (x *OpaqueCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpaqueCredentials.ProtoReflect.Descriptor instead.
func (*OpaqueCredentials) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{7}
}

func (x *OpaqueCredentials) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

// SecretKeyReference
//
type SecretKeyReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of an existing secret in the same namespace as the object
	// that refers to it (e.g. PackageRepository), containing authentication
	// credentials for the said package repository.
	// - For HTTP/S basic auth the secret must be of type
	//   "kubernetes.io/basic-auth" or opaque and contain username and
	//   password fields
	// - For TLS the secret must be of type "kubernetes.io/tls" or opaque
	//   and contain a certFile and keyFile, and/or
	//   caCert fields.
	// - For Bearer or Custom Auth, the secret must be opaque, and
	//   the key must be provided
	// - For Docker Registry Credentials (OCI registries) the secret
	//   must of of type "kubernetes.io/dockerconfigjson"
	// For more details, refer to
	// https://kubernetes.io/docs/concepts/configuration/secret/
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. Must be provided when name refers to an opaque secret
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretKeyReference) Reset() {
	*x = SecretKeyReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretKeyReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretKeyReference) ProtoMessage() {}

func (x *SecretKeyReference) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretKeyReference.ProtoReflect.Descriptor instead.
func (*SecretKeyReference) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{8}
}

func (x *SecretKeyReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecretKeyReference) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// GetPackageRepositoryDetailRequest
//
// Request for GetPackageRepositoryDetail
type GetPackageRepositoryDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageRepoRef *PackageRepositoryReference `protobuf:"bytes,1,opt,name=package_repo_ref,json=packageRepoRef,proto3" json:"package_repo_ref,omitempty"`
}

func (x *GetPackageRepositoryDetailRequest) Reset() {
	*x = GetPackageRepositoryDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPackageRepositoryDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPackageRepositoryDetailRequest) ProtoMessage() {}

func (x *GetPackageRepositoryDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPackageRepositoryDetailRequest.ProtoReflect.Descriptor instead.
func (*GetPackageRepositoryDetailRequest) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{9}
}

func (x *GetPackageRepositoryDetailRequest) GetPackageRepoRef() *PackageRepositoryReference {
	if x != nil {
		return x.PackageRepoRef
	}
	return nil
}

// GetPackageRepositorySummariesRequest
//
// Request for PackageRepositorySummary
type GetPackageRepositorySummariesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The context (cluster/namespace) for the request.
	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *GetPackageRepositorySummariesRequest) Reset() {
	*x = GetPackageRepositorySummariesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPackageRepositorySummariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPackageRepositorySummariesRequest) ProtoMessage() {}

func (x *GetPackageRepositorySummariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPackageRepositorySummariesRequest.ProtoReflect.Descriptor instead.
func (*GetPackageRepositorySummariesRequest) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{10}
}

func (x *GetPackageRepositorySummariesRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

// UpdatePackageRepositoryRequest
//
// Request for UpdatePackageRepository
type UpdatePackageRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A reference uniquely identifying the package repository being updated.
	// The only required field
	PackageRepoRef *PackageRepositoryReference `protobuf:"bytes,1,opt,name=package_repo_ref,json=packageRepoRef,proto3" json:"package_repo_ref,omitempty"`
	// URL identifying the package repository location.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// A user-provided description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The interval at which to check the upstream for updates (in time+unit)
	// Optional. Defaults to 10m if not specified
	Interval string `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty"`
	// TLS-specific parameters for connecting to a repository. Optional
	TlsConfig *PackageRepositoryTlsConfig `protobuf:"bytes,5,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	// authentication parameters for connecting to a repository. Optional
	Auth *PackageRepositoryAuth `protobuf:"bytes,6,opt,name=auth,proto3" json:"auth,omitempty"`
	// Custom data added by the plugin
	// A plugin can define custom details for data which is not yet, or
	// never will be specified in the core AddPackageRepositoryRequest
	// fields. The use of an `Any` field means that each plugin can define
	// the structure of this message as required, while still satisfying the
	// core interface.
	// See https://developers.google.com/protocol-buffers/docs/proto3#any
	// Just for reference, some of the examples that have been chosen not to
	// be part of the core API but rather plugin-specific details are:
	//   direct-helm:
	//      - image pull secrets
	//      - list of oci repositories
	//      - filter rules
	//      - sync job pod template
	CustomDetail *anypb.Any `protobuf:"bytes,11,opt,name=custom_detail,json=customDetail,proto3" json:"custom_detail,omitempty"`
}

func (x *UpdatePackageRepositoryRequest) Reset() {
	*x = UpdatePackageRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePackageRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePackageRepositoryRequest) ProtoMessage() {}

func (x *UpdatePackageRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePackageRepositoryRequest.ProtoReflect.Descriptor instead.
func (*UpdatePackageRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{11}
}

func (x *UpdatePackageRepositoryRequest) GetPackageRepoRef() *PackageRepositoryReference {
	if x != nil {
		return x.PackageRepoRef
	}
	return nil
}

func (x *UpdatePackageRepositoryRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdatePackageRepositoryRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdatePackageRepositoryRequest) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *UpdatePackageRepositoryRequest) GetTlsConfig() *PackageRepositoryTlsConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

func (x *UpdatePackageRepositoryRequest) GetAuth() *PackageRepositoryAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *UpdatePackageRepositoryRequest) GetCustomDetail() *anypb.Any {
	if x != nil {
		return x.CustomDetail
	}
	return nil
}

// DeletePackageRepositoryRequest
//
// Request for DeletePackageRepository
type DeletePackageRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageRepoRef *PackageRepositoryReference `protobuf:"bytes,1,opt,name=package_repo_ref,json=packageRepoRef,proto3" json:"package_repo_ref,omitempty"`
}

func (x *DeletePackageRepositoryRequest) Reset() {
	*x = DeletePackageRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePackageRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePackageRepositoryRequest) ProtoMessage() {}

func (x *DeletePackageRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePackageRepositoryRequest.ProtoReflect.Descriptor instead.
func (*DeletePackageRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{12}
}

func (x *DeletePackageRepositoryRequest) GetPackageRepoRef() *PackageRepositoryReference {
	if x != nil {
		return x.PackageRepoRef
	}
	return nil
}

// PackageRepositoryReference
//
// A PackageRepositoryReference has the minimum information required to
// uniquely identify a package repository.
type PackageRepositoryReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The context (cluster/namespace) for the repository.
	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// The fully qualified identifier for the repository
	// (i.e. a unique name for the context).
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The plugin used to interact with this available package.
	// This field should be omitted when the request is in the context of a
	// specific plugin.
	Plugin *v1alpha1.Plugin `protobuf:"bytes,3,opt,name=plugin,proto3" json:"plugin,omitempty"`
}

func (x *PackageRepositoryReference) Reset() {
	*x = PackageRepositoryReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageRepositoryReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageRepositoryReference) ProtoMessage() {}

func (x *PackageRepositoryReference) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageRepositoryReference.ProtoReflect.Descriptor instead.
func (*PackageRepositoryReference) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{13}
}

func (x *PackageRepositoryReference) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *PackageRepositoryReference) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *PackageRepositoryReference) GetPlugin() *v1alpha1.Plugin {
	if x != nil {
		return x.Plugin
	}
	return nil
}

// AddPackageRepositoryResponse
//
// Response for AddPackageRepositoryRequest
type AddPackageRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: add example for API docs
	// option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
	//   example: '{"package_repo_ref": {}}'
	// };
	PackageRepoRef *PackageRepositoryReference `protobuf:"bytes,1,opt,name=package_repo_ref,json=packageRepoRef,proto3" json:"package_repo_ref,omitempty"`
}

func (x *AddPackageRepositoryResponse) Reset() {
	*x = AddPackageRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPackageRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPackageRepositoryResponse) ProtoMessage() {}

func (x *AddPackageRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPackageRepositoryResponse.ProtoReflect.Descriptor instead.
func (*AddPackageRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{14}
}

func (x *AddPackageRepositoryResponse) GetPackageRepoRef() *PackageRepositoryReference {
	if x != nil {
		return x.PackageRepoRef
	}
	return nil
}

// PackageRepositoryStatus
//
// A PackageRepositoryStatus reports on the current status of the repository.
type PackageRepositoryStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ready
	//
	// An indication of whether the repository is ready or not
	Ready bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	// Reason
	//
	// An enum indicating the reason for the current status.
	Reason PackageRepositoryStatus_StatusReason `protobuf:"varint,2,opt,name=reason,proto3,enum=kubeappsapis.core.packages.v1alpha1.PackageRepositoryStatus_StatusReason" json:"reason,omitempty"`
	// UserReason
	//
	// Optional text to return for user context, which may be plugin specific.
	UserReason string `protobuf:"bytes,3,opt,name=user_reason,json=userReason,proto3" json:"user_reason,omitempty"`
}

func (x *PackageRepositoryStatus) Reset() {
	*x = PackageRepositoryStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageRepositoryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageRepositoryStatus) ProtoMessage() {}

func (x *PackageRepositoryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageRepositoryStatus.ProtoReflect.Descriptor instead.
func (*PackageRepositoryStatus) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{15}
}

func (x *PackageRepositoryStatus) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *PackageRepositoryStatus) GetReason() PackageRepositoryStatus_StatusReason {
	if x != nil {
		return x.Reason
	}
	return PackageRepositoryStatus_STATUS_REASON_UNSPECIFIED
}

func (x *PackageRepositoryStatus) GetUserReason() string {
	if x != nil {
		return x.UserReason
	}
	return ""
}

// PackageRepositoryDetail
//
type PackageRepositoryDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A reference uniquely identifying the package repository.
	PackageRepoRef *PackageRepositoryReference `protobuf:"bytes,1,opt,name=package_repo_ref,json=packageRepoRef,proto3" json:"package_repo_ref,omitempty"`
	// A user-provided name for the package repository (e.g. bitnami)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A user-provided description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Whether this repository is global or namespace-scoped.
	NamespaceScoped bool `protobuf:"varint,4,opt,name=namespace_scoped,json=namespaceScoped,proto3" json:"namespace_scoped,omitempty"`
	// Package storage type
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// A URL identifying the package repository location.
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// The interval at which to check the upstream for updates (in time+unit)
	Interval string `protobuf:"bytes,7,opt,name=interval,proto3" json:"interval,omitempty"`
	// TLS-specific parameters for connecting to a repository.
	// If the cert authority was configured for this repository, then in the context
	// of GetPackageRepositoryDetail() operation, the PackageRepositoryTlsConfig will ALWAYS
	// contain an existing SecretKeyReference, rather that cert_authority field
	TlsConfig *PackageRepositoryTlsConfig `protobuf:"bytes,8,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	// authentication parameters for connecting to a repository.
	// If Basic Auth or TLS or Docker Creds Auth was configured for this repository,
	// then in the context of GetPackageRepositoryDetail() operation, the
	// PackageRepositoryAuth will ALWAYS contain an existing SecretKeyReference,
	// rather that string values that may have been used when package repository was created
	// field
	Auth *PackageRepositoryAuth `protobuf:"bytes,9,opt,name=auth,proto3" json:"auth,omitempty"`
	// Custom data added by the plugin
	CustomDetail *anypb.Any `protobuf:"bytes,10,opt,name=custom_detail,json=customDetail,proto3" json:"custom_detail,omitempty"`
	// current status of the repository which can include reconciliation
	// status, where relevant.
	Status *PackageRepositoryStatus `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PackageRepositoryDetail) Reset() {
	*x = PackageRepositoryDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageRepositoryDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageRepositoryDetail) ProtoMessage() {}

func (x *PackageRepositoryDetail) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageRepositoryDetail.ProtoReflect.Descriptor instead.
func (*PackageRepositoryDetail) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{16}
}

func (x *PackageRepositoryDetail) GetPackageRepoRef() *PackageRepositoryReference {
	if x != nil {
		return x.PackageRepoRef
	}
	return nil
}

func (x *PackageRepositoryDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PackageRepositoryDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PackageRepositoryDetail) GetNamespaceScoped() bool {
	if x != nil {
		return x.NamespaceScoped
	}
	return false
}

func (x *PackageRepositoryDetail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PackageRepositoryDetail) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PackageRepositoryDetail) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *PackageRepositoryDetail) GetTlsConfig() *PackageRepositoryTlsConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

func (x *PackageRepositoryDetail) GetAuth() *PackageRepositoryAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *PackageRepositoryDetail) GetCustomDetail() *anypb.Any {
	if x != nil {
		return x.CustomDetail
	}
	return nil
}

func (x *PackageRepositoryDetail) GetStatus() *PackageRepositoryStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// GetPackageRepositoryDetailResponse
//
// Response for GetPackageRepositoryDetail
type GetPackageRepositoryDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// package repository detail
	Detail *PackageRepositoryDetail `protobuf:"bytes,1,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *GetPackageRepositoryDetailResponse) Reset() {
	*x = GetPackageRepositoryDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPackageRepositoryDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPackageRepositoryDetailResponse) ProtoMessage() {}

func (x *GetPackageRepositoryDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPackageRepositoryDetailResponse.ProtoReflect.Descriptor instead.
func (*GetPackageRepositoryDetailResponse) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{17}
}

func (x *GetPackageRepositoryDetailResponse) GetDetail() *PackageRepositoryDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

// PackageRepositorySummary
//
type PackageRepositorySummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A reference uniquely identifying the package repository.
	PackageRepoRef *PackageRepositoryReference `protobuf:"bytes,1,opt,name=package_repo_ref,json=packageRepoRef,proto3" json:"package_repo_ref,omitempty"`
	// A user-provided name for the package repository (e.g. bitnami)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A user-provided description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Whether this repository is global or namespace-scoped.
	NamespaceScoped bool `protobuf:"varint,4,opt,name=namespace_scoped,json=namespaceScoped,proto3" json:"namespace_scoped,omitempty"`
	// Package storage type
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// URL identifying the package repository location.
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// current status of the repository which can include reconciliation
	// status, where relevant.
	Status *PackageRepositoryStatus `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	// existence of any authentication parameters for connecting to a repository.
	RequiresAuth bool `protobuf:"varint,8,opt,name=requires_auth,json=requiresAuth,proto3" json:"requires_auth,omitempty"`
}

func (x *PackageRepositorySummary) Reset() {
	*x = PackageRepositorySummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageRepositorySummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageRepositorySummary) ProtoMessage() {}

func (x *PackageRepositorySummary) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageRepositorySummary.ProtoReflect.Descriptor instead.
func (*PackageRepositorySummary) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{18}
}

func (x *PackageRepositorySummary) GetPackageRepoRef() *PackageRepositoryReference {
	if x != nil {
		return x.PackageRepoRef
	}
	return nil
}

func (x *PackageRepositorySummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PackageRepositorySummary) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PackageRepositorySummary) GetNamespaceScoped() bool {
	if x != nil {
		return x.NamespaceScoped
	}
	return false
}

func (x *PackageRepositorySummary) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PackageRepositorySummary) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PackageRepositorySummary) GetStatus() *PackageRepositoryStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PackageRepositorySummary) GetRequiresAuth() bool {
	if x != nil {
		return x.RequiresAuth
	}
	return false
}

// GetPackageRepositorySummariesResponse
//
// Response for GetPackageRepositorySummaries
type GetPackageRepositorySummariesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of PackageRepositorySummary
	PackageRepositorySummaries []*PackageRepositorySummary `protobuf:"bytes,1,rep,name=package_repository_summaries,json=packageRepositorySummaries,proto3" json:"package_repository_summaries,omitempty"`
}

func (x *GetPackageRepositorySummariesResponse) Reset() {
	*x = GetPackageRepositorySummariesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPackageRepositorySummariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPackageRepositorySummariesResponse) ProtoMessage() {}

func (x *GetPackageRepositorySummariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPackageRepositorySummariesResponse.ProtoReflect.Descriptor instead.
func (*GetPackageRepositorySummariesResponse) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{19}
}

func (x *GetPackageRepositorySummariesResponse) GetPackageRepositorySummaries() []*PackageRepositorySummary {
	if x != nil {
		return x.PackageRepositorySummaries
	}
	return nil
}

// UpdatePackageRepositoryResponse
//
// Response for UpdatePackageRepository
type UpdatePackageRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageRepoRef *PackageRepositoryReference `protobuf:"bytes,1,opt,name=package_repo_ref,json=packageRepoRef,proto3" json:"package_repo_ref,omitempty"`
}

func (x *UpdatePackageRepositoryResponse) Reset() {
	*x = UpdatePackageRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePackageRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePackageRepositoryResponse) ProtoMessage() {}

func (x *UpdatePackageRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePackageRepositoryResponse.ProtoReflect.Descriptor instead.
func (*UpdatePackageRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{20}
}

func (x *UpdatePackageRepositoryResponse) GetPackageRepoRef() *PackageRepositoryReference {
	if x != nil {
		return x.PackageRepoRef
	}
	return nil
}

// DeletePackageRepositoryResponse
//
// Response for DeletePackageRepository
type DeletePackageRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePackageRepositoryResponse) Reset() {
	*x = DeletePackageRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePackageRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePackageRepositoryResponse) ProtoMessage() {}

func (x *DeletePackageRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePackageRepositoryResponse.ProtoReflect.Descriptor instead.
func (*DeletePackageRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{21}
}

var File_kubeappsapis_core_packages_v1alpha1_repositories_proto protoreflect.FileDescriptor

var file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDesc = []byte{
	0x0a, 0x36, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70,
	0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x6b, 0x75, 0x62, 0x65,
	0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7, 0x04, 0x0a,
	0x1b, 0x41, 0x64, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x5e, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74, 0x6c,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70,
	0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xf3, 0x01, 0x0a, 0x1a, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6c, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69,
	0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x27, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x58, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x42, 0x20, 0x0a, 0x1e, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x22, 0x88, 0x09, 0x0a,
	0x15, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x68, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x64, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x48, 0x00, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x53, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52,
	0x0a, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x5b, 0x0a, 0x0c, 0x64,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x58, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70,
	0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x12, 0x52, 0x0a, 0x09,
	0x73, 0x73, 0x68, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x73, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x08, 0x73, 0x73, 0x68, 0x43, 0x72, 0x65, 0x64, 0x73,
	0x12, 0x5b, 0x0a, 0x0c, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70,
	0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x0b, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x19, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10,
	0x01, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x41, 0x43, 0x4b, 0x41,
	0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x41, 0x52, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x35, 0x0a, 0x31, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48,
	0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x41, 0x43, 0x4b, 0x41,
	0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20,
	0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x53, 0x48,
	0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x10, 0x07, 0x42, 0x1a, 0x0a, 0x18, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x22, 0x4a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x32, 0x0a, 0x0a, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x79, 0x0a, 0x11, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0x52, 0x0a, 0x0e, 0x53, 0x73, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x4f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x12, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x8e, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a,
	0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70,
	0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x66, 0x22, 0x6e, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xc6, 0x03, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x10, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x5e, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74, 0x6c, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x22, 0x8b, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x66, 0x22,
	0xc8, 0x01, 0x0a, 0x1a, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x46,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70,
	0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x1c, 0x41,
	0x64, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x10, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x65, 0x66, 0x22, 0xb2, 0x02, 0x0a, 0x17, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x61, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61,
	0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0xe8, 0x04, 0x0a, 0x17,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x69, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52,
	0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x5e, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7a, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x22, 0x87, 0x03, 0x0a, 0x18, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x69, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x22, 0xa8, 0x01, 0x0a,
	0x25, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x1c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x1a, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x10, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x65, 0x66, 0x22, 0x21, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x81, 0x0d, 0x0a, 0x13, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xcc, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x94, 0x03, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x46, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70,
	0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xe4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xdd, 0x01, 0x12, 0xda, 0x01, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x63, 0x2f, 0x7b, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x7d, 0x2f, 0x6e,
	0x73, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x72, 0x65, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x3d, 0x2a, 0x2a, 0x7d, 0x12, 0xe4, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x49, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x8e,
	0x03, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x44, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe7, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xe0, 0x01, 0x1a,
	0xda, 0x01, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x7b, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x63,
	0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72,
	0x65, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x7d, 0x2f, 0x6e, 0x73, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x2e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3d, 0x2a, 0x2a, 0x7d, 0x3a, 0x01, 0x2a, 0x12,
	0x8b, 0x03, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x44, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xdd, 0x01,
	0x2a, 0xda, 0x01, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x7b,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x2f,
	0x63, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x72, 0x65, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x7d, 0x2f, 0x6e, 0x73, 0x2f, 0x7b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3d, 0x2a, 0x2a, 0x7d, 0x42, 0x4f, 0x5a,
	0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x2d, 0x74, 0x61, 0x6e, 0x7a, 0x75, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70,
	0x73, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x2d, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescOnce sync.Once
	file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescData = file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDesc
)

func file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP() []byte {
	file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescOnce.Do(func() {
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescData = protoimpl.X.CompressGZIP(file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescData)
	})
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescData
}

var file_kubeappsapis_core_packages_v1alpha1_repositories_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_kubeappsapis_core_packages_v1alpha1_repositories_proto_goTypes = []interface{}{
	(PackageRepositoryAuth_PackageRepositoryAuthType)(0), // 0: kubeappsapis.core.packages.v1alpha1.PackageRepositoryAuth.PackageRepositoryAuthType
	(PackageRepositoryStatus_StatusReason)(0),            // 1: kubeappsapis.core.packages.v1alpha1.PackageRepositoryStatus.StatusReason
	(*AddPackageRepositoryRequest)(nil),                  // 2: kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryRequest
	(*PackageRepositoryTlsConfig)(nil),                   // 3: kubeappsapis.core.packages.v1alpha1.PackageRepositoryTlsConfig
	(*PackageRepositoryAuth)(nil),                        // 4: kubeappsapis.core.packages.v1alpha1.PackageRepositoryAuth
	(*UsernamePassword)(nil),                             // 5: kubeappsapis.core.packages.v1alpha1.UsernamePassword
	(*TlsCertKey)(nil),                                   // 6: kubeappsapis.core.packages.v1alpha1.TlsCertKey
	(*DockerCredentials)(nil),                            // 7: kubeappsapis.core.packages.v1alpha1.DockerCredentials
	(*SshCredentials)(nil),                               // 8: kubeappsapis.core.packages.v1alpha1.SshCredentials
	(*OpaqueCredentials)(nil),                            // 9: kubeappsapis.core.packages.v1alpha1.OpaqueCredentials
	(*SecretKeyReference)(nil),                           // 10: kubeappsapis.core.packages.v1alpha1.SecretKeyReference
	(*GetPackageRepositoryDetailRequest)(nil),            // 11: kubeappsapis.core.packages.v1alpha1.GetPackageRepositoryDetailRequest
	(*GetPackageRepositorySummariesRequest)(nil),         // 12: kubeappsapis.core.packages.v1alpha1.GetPackageRepositorySummariesRequest
	(*UpdatePackageRepositoryRequest)(nil),               // 13: kubeappsapis.core.packages.v1alpha1.UpdatePackageRepositoryRequest
	(*DeletePackageRepositoryRequest)(nil),               // 14: kubeappsapis.core.packages.v1alpha1.DeletePackageRepositoryRequest
	(*PackageRepositoryReference)(nil),                   // 15: kubeappsapis.core.packages.v1alpha1.PackageRepositoryReference
	(*AddPackageRepositoryResponse)(nil),                 // 16: kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryResponse
	(*PackageRepositoryStatus)(nil),                      // 17: kubeappsapis.core.packages.v1alpha1.PackageRepositoryStatus
	(*PackageRepositoryDetail)(nil),                      // 18: kubeappsapis.core.packages.v1alpha1.PackageRepositoryDetail
	(*GetPackageRepositoryDetailResponse)(nil),           // 19: kubeappsapis.core.packages.v1alpha1.GetPackageRepositoryDetailResponse
	(*PackageRepositorySummary)(nil),                     // 20: kubeappsapis.core.packages.v1alpha1.PackageRepositorySummary
	(*GetPackageRepositorySummariesResponse)(nil),        // 21: kubeappsapis.core.packages.v1alpha1.GetPackageRepositorySummariesResponse
	(*UpdatePackageRepositoryResponse)(nil),              // 22: kubeappsapis.core.packages.v1alpha1.UpdatePackageRepositoryResponse
	(*DeletePackageRepositoryResponse)(nil),              // 23: kubeappsapis.core.packages.v1alpha1.DeletePackageRepositoryResponse
	nil,                                                  // 24: kubeappsapis.core.packages.v1alpha1.OpaqueCredentials.DataEntry
	(*Context)(nil),                                      // 25: kubeappsapis.core.packages.v1alpha1.Context
	(*v1alpha1.Plugin)(nil),                              // 26: kubeappsapis.core.plugins.v1alpha1.Plugin
	(*anypb.Any)(nil),                                    // 27: google.protobuf.Any
}
var file_kubeappsapis_core_packages_v1alpha1_repositories_proto_depIdxs = []int32{
	25, // 0: kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryRequest.context:type_name -> kubeappsapis.core.packages.v1alpha1.Context
	3,  // 1: kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryRequest.tls_config:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryTlsConfig
	4,  // 2: kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryRequest.auth:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryAuth
	26, // 3: kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryRequest.plugin:type_name -> kubeappsapis.core.plugins.v1alpha1.Plugin
	27, // 4: kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryRequest.custom_detail:type_name -> google.protobuf.Any
	10, // 5: kubeappsapis.core.packages.v1alpha1.PackageRepositoryTlsConfig.secret_ref:type_name -> kubeappsapis.core.packages.v1alpha1.SecretKeyReference
	0,  // 6: kubeappsapis.core.packages.v1alpha1.PackageRepositoryAuth.type:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryAuth.PackageRepositoryAuthType
	5,  // 7: kubeappsapis.core.packages.v1alpha1.PackageRepositoryAuth.username_password:type_name -> kubeappsapis.core.packages.v1alpha1.UsernamePassword
	6,  // 8: kubeappsapis.core.packages.v1alpha1.PackageRepositoryAuth.tls_cert_key:type_name -> kubeappsapis.core.packages.v1alpha1.TlsCertKey
	7,  // 9: kubeappsapis.core.packages.v1alpha1.PackageRepositoryAuth.docker_creds:type_name -> kubeappsapis.core.packages.v1alpha1.DockerCredentials
	10, // 10: kubeappsapis.core.packages.v1alpha1.PackageRepositoryAuth.secret_ref:type_name -> kubeappsapis.core.packages.v1alpha1.SecretKeyReference
	8,  // 11: kubeappsapis.core.packages.v1alpha1.PackageRepositoryAuth.ssh_creds:type_name -> kubeappsapis.core.packages.v1alpha1.SshCredentials
	9,  // 12: kubeappsapis.core.packages.v1alpha1.PackageRepositoryAuth.opaque_creds:type_name -> kubeappsapis.core.packages.v1alpha1.OpaqueCredentials
	24, // 13: kubeappsapis.core.packages.v1alpha1.OpaqueCredentials.data:type_name -> kubeappsapis.core.packages.v1alpha1.OpaqueCredentials.DataEntry
	15, // 14: kubeappsapis.core.packages.v1alpha1.GetPackageRepositoryDetailRequest.package_repo_ref:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryReference
	25, // 15: kubeappsapis.core.packages.v1alpha1.GetPackageRepositorySummariesRequest.context:type_name -> kubeappsapis.core.packages.v1alpha1.Context
	15, // 16: kubeappsapis.core.packages.v1alpha1.UpdatePackageRepositoryRequest.package_repo_ref:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryReference
	3,  // 17: kubeappsapis.core.packages.v1alpha1.UpdatePackageRepositoryRequest.tls_config:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryTlsConfig
	4,  // 18: kubeappsapis.core.packages.v1alpha1.UpdatePackageRepositoryRequest.auth:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryAuth
	27, // 19: kubeappsapis.core.packages.v1alpha1.UpdatePackageRepositoryRequest.custom_detail:type_name -> google.protobuf.Any
	15, // 20: kubeappsapis.core.packages.v1alpha1.DeletePackageRepositoryRequest.package_repo_ref:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryReference
	25, // 21: kubeappsapis.core.packages.v1alpha1.PackageRepositoryReference.context:type_name -> kubeappsapis.core.packages.v1alpha1.Context
	26, // 22: kubeappsapis.core.packages.v1alpha1.PackageRepositoryReference.plugin:type_name -> kubeappsapis.core.plugins.v1alpha1.Plugin
	15, // 23: kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryResponse.package_repo_ref:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryReference
	1,  // 24: kubeappsapis.core.packages.v1alpha1.PackageRepositoryStatus.reason:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryStatus.StatusReason
	15, // 25: kubeappsapis.core.packages.v1alpha1.PackageRepositoryDetail.package_repo_ref:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryReference
	3,  // 26: kubeappsapis.core.packages.v1alpha1.PackageRepositoryDetail.tls_config:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryTlsConfig
	4,  // 27: kubeappsapis.core.packages.v1alpha1.PackageRepositoryDetail.auth:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryAuth
	27, // 28: kubeappsapis.core.packages.v1alpha1.PackageRepositoryDetail.custom_detail:type_name -> google.protobuf.Any
	17, // 29: kubeappsapis.core.packages.v1alpha1.PackageRepositoryDetail.status:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryStatus
	18, // 30: kubeappsapis.core.packages.v1alpha1.GetPackageRepositoryDetailResponse.detail:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryDetail
	15, // 31: kubeappsapis.core.packages.v1alpha1.PackageRepositorySummary.package_repo_ref:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryReference
	17, // 32: kubeappsapis.core.packages.v1alpha1.PackageRepositorySummary.status:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryStatus
	20, // 33: kubeappsapis.core.packages.v1alpha1.GetPackageRepositorySummariesResponse.package_repository_summaries:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositorySummary
	15, // 34: kubeappsapis.core.packages.v1alpha1.UpdatePackageRepositoryResponse.package_repo_ref:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryReference
	2,  // 35: kubeappsapis.core.packages.v1alpha1.RepositoriesService.AddPackageRepository:input_type -> kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryRequest
	11, // 36: kubeappsapis.core.packages.v1alpha1.RepositoriesService.GetPackageRepositoryDetail:input_type -> kubeappsapis.core.packages.v1alpha1.GetPackageRepositoryDetailRequest
	12, // 37: kubeappsapis.core.packages.v1alpha1.RepositoriesService.GetPackageRepositorySummaries:input_type -> kubeappsapis.core.packages.v1alpha1.GetPackageRepositorySummariesRequest
	13, // 38: kubeappsapis.core.packages.v1alpha1.RepositoriesService.UpdatePackageRepository:input_type -> kubeappsapis.core.packages.v1alpha1.UpdatePackageRepositoryRequest
	14, // 39: kubeappsapis.core.packages.v1alpha1.RepositoriesService.DeletePackageRepository:input_type -> kubeappsapis.core.packages.v1alpha1.DeletePackageRepositoryRequest
	16, // 40: kubeappsapis.core.packages.v1alpha1.RepositoriesService.AddPackageRepository:output_type -> kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryResponse
	19, // 41: kubeappsapis.core.packages.v1alpha1.RepositoriesService.GetPackageRepositoryDetail:output_type -> kubeappsapis.core.packages.v1alpha1.GetPackageRepositoryDetailResponse
	21, // 42: kubeappsapis.core.packages.v1alpha1.RepositoriesService.GetPackageRepositorySummaries:output_type -> kubeappsapis.core.packages.v1alpha1.GetPackageRepositorySummariesResponse
	22, // 43: kubeappsapis.core.packages.v1alpha1.RepositoriesService.UpdatePackageRepository:output_type -> kubeappsapis.core.packages.v1alpha1.UpdatePackageRepositoryResponse
	23, // 44: kubeappsapis.core.packages.v1alpha1.RepositoriesService.DeletePackageRepository:output_type -> kubeappsapis.core.packages.v1alpha1.DeletePackageRepositoryResponse
	40, // [40:45] is the sub-list for method output_type
	35, // [35:40] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_kubeappsapis_core_packages_v1alpha1_repositories_proto_init() }
func file_kubeappsapis_core_packages_v1alpha1_repositories_proto_init() {
	if File_kubeappsapis_core_packages_v1alpha1_repositories_proto != nil {
		return
	}
	file_kubeappsapis_core_packages_v1alpha1_packages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPackageRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageRepositoryTlsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageRepositoryAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsernamePassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TlsCertKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpaqueCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretKeyReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPackageRepositoryDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPackageRepositorySummariesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePackageRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePackageRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageRepositoryReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPackageRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageRepositoryStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageRepositoryDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPackageRepositoryDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageRepositorySummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPackageRepositorySummariesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePackageRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePackageRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PackageRepositoryTlsConfig_CertAuthority)(nil),
		(*PackageRepositoryTlsConfig_SecretRef)(nil),
	}
	file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*PackageRepositoryAuth_UsernamePassword)(nil),
		(*PackageRepositoryAuth_TlsCertKey)(nil),
		(*PackageRepositoryAuth_DockerCreds)(nil),
		(*PackageRepositoryAuth_Header)(nil),
		(*PackageRepositoryAuth_SecretRef)(nil),
		(*PackageRepositoryAuth_SshCreds)(nil),
		(*PackageRepositoryAuth_OpaqueCreds)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kubeappsapis_core_packages_v1alpha1_repositories_proto_goTypes,
		DependencyIndexes: file_kubeappsapis_core_packages_v1alpha1_repositories_proto_depIdxs,
		EnumInfos:         file_kubeappsapis_core_packages_v1alpha1_repositories_proto_enumTypes,
		MessageInfos:      file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes,
	}.Build()
	File_kubeappsapis_core_packages_v1alpha1_repositories_proto = out.File
	file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDesc = nil
	file_kubeappsapis_core_packages_v1alpha1_repositories_proto_goTypes = nil
	file_kubeappsapis_core_packages_v1alpha1_repositories_proto_depIdxs = nil
}
