// Copyright 2021-2022 the Kubeapps contributors.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: kubeappsapis/core/packages/v1alpha1/repositories.proto

package v1alpha1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v1alpha1 "github.com/kubeapps/kubeapps/cmd/kubeapps-apis/gen/core/plugins/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AddPackageRepositoryRequest
//
// Request for AddPackageRepository
type AddPackageRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The target context where the package repository is intended to be
	// installed.
	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	// A user-provided name for the package repository (e.g. bitnami)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A user-provided description. Optional
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Whether this repository is global or namespace-scoped. Optional.
	// By default, the value is false, i.e. the repository is global
	NamespaceScoped bool `protobuf:"varint,4,opt,name=namespace_scoped,json=namespaceScoped,proto3" json:"namespace_scoped,omitempty"`
	// Package storage type
	// In general, each plug-in will define an acceptable set of valid types
	// - for direct helm plug-in valid values are: helm, oci
	// - for flux plug-in currently only supported value is helm. In the
	//   future, we may add support for git and/or AWS s3-style buckets
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// A URL identifying the package repository location. Must contain at
	// least a protocol and host
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// The interval at which to check the upstream for updates (in seconds)
	// Optional. Defaults to 10m if not specified
	Interval uint32 `protobuf:"varint,7,opt,name=interval,proto3" json:"interval,omitempty"`
	// TLS-specific parameters for connecting to a repository. Optional
	TlsConfig *PackageRepositoryTlsConfig `protobuf:"bytes,8,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	// The plugin used to interact with this package repository.
	// This field should be omitted when the request is in the context of a
	// specific plugin.
	Plugin *v1alpha1.Plugin `protobuf:"bytes,10,opt,name=plugin,proto3" json:"plugin,omitempty"`
}

func (x *AddPackageRepositoryRequest) Reset() {
	*x = AddPackageRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPackageRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPackageRepositoryRequest) ProtoMessage() {}

func (x *AddPackageRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPackageRepositoryRequest.ProtoReflect.Descriptor instead.
func (*AddPackageRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{0}
}

func (x *AddPackageRepositoryRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *AddPackageRepositoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddPackageRepositoryRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddPackageRepositoryRequest) GetNamespaceScoped() bool {
	if x != nil {
		return x.NamespaceScoped
	}
	return false
}

func (x *AddPackageRepositoryRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddPackageRepositoryRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddPackageRepositoryRequest) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *AddPackageRepositoryRequest) GetTlsConfig() *PackageRepositoryTlsConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

func (x *AddPackageRepositoryRequest) GetPlugin() *v1alpha1.Plugin {
	if x != nil {
		return x.Plugin
	}
	return nil
}

// PackageRepositoryTlsConfig
//
type PackageRepositoryTlsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// whether or not to skip TLS verification
	// note that fluxv2 does not currently support this and will raise an
	// error should this flag be set to true
	InsecureSkipVerify bool `protobuf:"varint,1,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
	// Types that are assignable to PackageRepoTlsConfigOneOf:
	//	*PackageRepositoryTlsConfig_CertAuthority
	//	*PackageRepositoryTlsConfig_SecretRef
	PackageRepoTlsConfigOneOf isPackageRepositoryTlsConfig_PackageRepoTlsConfigOneOf `protobuf_oneof:"package_repo_tls_config_one_of"`
}

func (x *PackageRepositoryTlsConfig) Reset() {
	*x = PackageRepositoryTlsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageRepositoryTlsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageRepositoryTlsConfig) ProtoMessage() {}

func (x *PackageRepositoryTlsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageRepositoryTlsConfig.ProtoReflect.Descriptor instead.
func (*PackageRepositoryTlsConfig) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{1}
}

func (x *PackageRepositoryTlsConfig) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

func (m *PackageRepositoryTlsConfig) GetPackageRepoTlsConfigOneOf() isPackageRepositoryTlsConfig_PackageRepoTlsConfigOneOf {
	if m != nil {
		return m.PackageRepoTlsConfigOneOf
	}
	return nil
}

func (x *PackageRepositoryTlsConfig) GetCertAuthority() string {
	if x, ok := x.GetPackageRepoTlsConfigOneOf().(*PackageRepositoryTlsConfig_CertAuthority); ok {
		return x.CertAuthority
	}
	return ""
}

func (x *PackageRepositoryTlsConfig) GetSecretRef() *SecretKeyReference {
	if x, ok := x.GetPackageRepoTlsConfigOneOf().(*PackageRepositoryTlsConfig_SecretRef); ok {
		return x.SecretRef
	}
	return nil
}

type isPackageRepositoryTlsConfig_PackageRepoTlsConfigOneOf interface {
	isPackageRepositoryTlsConfig_PackageRepoTlsConfigOneOf()
}

type PackageRepositoryTlsConfig_CertAuthority struct {
	// certificate authority. Optional
	CertAuthority string `protobuf:"bytes,2,opt,name=cert_authority,json=certAuthority,proto3,oneof"`
}

type PackageRepositoryTlsConfig_SecretRef struct {
	// a reference to an existing secret that contains custom CA
	SecretRef *SecretKeyReference `protobuf:"bytes,3,opt,name=secret_ref,json=secretRef,proto3,oneof"`
}

func (*PackageRepositoryTlsConfig_CertAuthority) isPackageRepositoryTlsConfig_PackageRepoTlsConfigOneOf() {
}

func (*PackageRepositoryTlsConfig_SecretRef) isPackageRepositoryTlsConfig_PackageRepoTlsConfigOneOf() {
}

// SecretKeyReference
//
type SecretKeyReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of an existing secret in the pod namespace containing
	// authentication credentials for the package repository.
	// - For HTTP/S basic auth the secret must be of type
	//   "kubernetes.io/basic-auth" and contain username and
	//   password fields.
	// - For TLS the secret must be of type "kubernetes.io/tls"
	//   contain a certFile and keyFile, and/or
	//   caCert fields.
	// - For Bearer or Custom Auth, the secret must be opaque, and
	//   the key must be provided
	// - For Docker Registry Credentials (OCI registries) the secret
	//   must of of type "kubernetes.io/dockerconfigjson‚Äù
	// For more details, refer to
	// https://kubernetes.io/docs/concepts/configuration/secret/
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. Must be provided when name refers to an opaque secret
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SecretKeyReference) Reset() {
	*x = SecretKeyReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretKeyReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretKeyReference) ProtoMessage() {}

func (x *SecretKeyReference) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretKeyReference.ProtoReflect.Descriptor instead.
func (*SecretKeyReference) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{2}
}

func (x *SecretKeyReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecretKeyReference) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// AddPackageRepositoryResponse
//
// Response for AddPackageRepositoryRequest
type AddPackageRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddPackageRepositoryResponse) Reset() {
	*x = AddPackageRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPackageRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPackageRepositoryResponse) ProtoMessage() {}

func (x *AddPackageRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPackageRepositoryResponse.ProtoReflect.Descriptor instead.
func (*AddPackageRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP(), []int{3}
}

var File_kubeappsapis_core_packages_v1alpha1_repositories_proto protoreflect.FileDescriptor

var file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDesc = []byte{
	0x0a, 0x36, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70,
	0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x6b, 0x75, 0x62, 0x65,
	0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x03, 0x0a,
	0x1b, 0x41, 0x64, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x5e, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74, 0x6c,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70,
	0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0xf3, 0x01, 0x0a, 0x1a,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x27, 0x0a, 0x0e,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x42,
	0x20, 0x0a, 0x1e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x6f,
	0x66, 0x22, 0x3a, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x1e, 0x0a,
	0x1c, 0x41, 0x64, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe4, 0x01,
	0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xcc, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x40,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x41, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x3a, 0x01, 0x2a, 0x42, 0x4b, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70, 0x73, 0x2f, 0x6b, 0x75, 0x62, 0x65,
	0x61, 0x70, 0x70, 0x73, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x61, 0x70, 0x70,
	0x73, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescOnce sync.Once
	file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescData = file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDesc
)

func file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescGZIP() []byte {
	file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescOnce.Do(func() {
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescData = protoimpl.X.CompressGZIP(file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescData)
	})
	return file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDescData
}

var file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kubeappsapis_core_packages_v1alpha1_repositories_proto_goTypes = []interface{}{
	(*AddPackageRepositoryRequest)(nil),  // 0: kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryRequest
	(*PackageRepositoryTlsConfig)(nil),   // 1: kubeappsapis.core.packages.v1alpha1.PackageRepositoryTlsConfig
	(*SecretKeyReference)(nil),           // 2: kubeappsapis.core.packages.v1alpha1.SecretKeyReference
	(*AddPackageRepositoryResponse)(nil), // 3: kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryResponse
	(*Context)(nil),                      // 4: kubeappsapis.core.packages.v1alpha1.Context
	(*v1alpha1.Plugin)(nil),              // 5: kubeappsapis.core.plugins.v1alpha1.Plugin
}
var file_kubeappsapis_core_packages_v1alpha1_repositories_proto_depIdxs = []int32{
	4, // 0: kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryRequest.context:type_name -> kubeappsapis.core.packages.v1alpha1.Context
	1, // 1: kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryRequest.tls_config:type_name -> kubeappsapis.core.packages.v1alpha1.PackageRepositoryTlsConfig
	5, // 2: kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryRequest.plugin:type_name -> kubeappsapis.core.plugins.v1alpha1.Plugin
	2, // 3: kubeappsapis.core.packages.v1alpha1.PackageRepositoryTlsConfig.secret_ref:type_name -> kubeappsapis.core.packages.v1alpha1.SecretKeyReference
	0, // 4: kubeappsapis.core.packages.v1alpha1.RepositoriesService.AddPackageRepository:input_type -> kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryRequest
	3, // 5: kubeappsapis.core.packages.v1alpha1.RepositoriesService.AddPackageRepository:output_type -> kubeappsapis.core.packages.v1alpha1.AddPackageRepositoryResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_kubeappsapis_core_packages_v1alpha1_repositories_proto_init() }
func file_kubeappsapis_core_packages_v1alpha1_repositories_proto_init() {
	if File_kubeappsapis_core_packages_v1alpha1_repositories_proto != nil {
		return
	}
	file_kubeappsapis_core_packages_v1alpha1_packages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPackageRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageRepositoryTlsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretKeyReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPackageRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PackageRepositoryTlsConfig_CertAuthority)(nil),
		(*PackageRepositoryTlsConfig_SecretRef)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kubeappsapis_core_packages_v1alpha1_repositories_proto_goTypes,
		DependencyIndexes: file_kubeappsapis_core_packages_v1alpha1_repositories_proto_depIdxs,
		MessageInfos:      file_kubeappsapis_core_packages_v1alpha1_repositories_proto_msgTypes,
	}.Build()
	File_kubeappsapis_core_packages_v1alpha1_repositories_proto = out.File
	file_kubeappsapis_core_packages_v1alpha1_repositories_proto_rawDesc = nil
	file_kubeappsapis_core_packages_v1alpha1_repositories_proto_goTypes = nil
	file_kubeappsapis_core_packages_v1alpha1_repositories_proto_depIdxs = nil
}
