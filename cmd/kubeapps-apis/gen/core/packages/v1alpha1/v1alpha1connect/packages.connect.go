// Copyright 2021-2023 the Kubeapps contributors.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kubeappsapis/core/packages/v1alpha1/packages.proto

package v1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/vmware-tanzu/kubeapps/cmd/kubeapps-apis/gen/core/packages/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PackagesServiceName is the fully-qualified name of the PackagesService service.
	PackagesServiceName = "kubeappsapis.core.packages.v1alpha1.PackagesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PackagesServiceGetAvailablePackageSummariesProcedure is the fully-qualified name of the
	// PackagesService's GetAvailablePackageSummaries RPC.
	PackagesServiceGetAvailablePackageSummariesProcedure = "/kubeappsapis.core.packages.v1alpha1.PackagesService/GetAvailablePackageSummaries"
	// PackagesServiceGetAvailablePackageDetailProcedure is the fully-qualified name of the
	// PackagesService's GetAvailablePackageDetail RPC.
	PackagesServiceGetAvailablePackageDetailProcedure = "/kubeappsapis.core.packages.v1alpha1.PackagesService/GetAvailablePackageDetail"
	// PackagesServiceGetAvailablePackageVersionsProcedure is the fully-qualified name of the
	// PackagesService's GetAvailablePackageVersions RPC.
	PackagesServiceGetAvailablePackageVersionsProcedure = "/kubeappsapis.core.packages.v1alpha1.PackagesService/GetAvailablePackageVersions"
	// PackagesServiceGetAvailablePackageMetadatasProcedure is the fully-qualified name of the
	// PackagesService's GetAvailablePackageMetadatas RPC.
	PackagesServiceGetAvailablePackageMetadatasProcedure = "/kubeappsapis.core.packages.v1alpha1.PackagesService/GetAvailablePackageMetadatas"
	// PackagesServiceGetInstalledPackageSummariesProcedure is the fully-qualified name of the
	// PackagesService's GetInstalledPackageSummaries RPC.
	PackagesServiceGetInstalledPackageSummariesProcedure = "/kubeappsapis.core.packages.v1alpha1.PackagesService/GetInstalledPackageSummaries"
	// PackagesServiceGetInstalledPackageDetailProcedure is the fully-qualified name of the
	// PackagesService's GetInstalledPackageDetail RPC.
	PackagesServiceGetInstalledPackageDetailProcedure = "/kubeappsapis.core.packages.v1alpha1.PackagesService/GetInstalledPackageDetail"
	// PackagesServiceCreateInstalledPackageProcedure is the fully-qualified name of the
	// PackagesService's CreateInstalledPackage RPC.
	PackagesServiceCreateInstalledPackageProcedure = "/kubeappsapis.core.packages.v1alpha1.PackagesService/CreateInstalledPackage"
	// PackagesServiceUpdateInstalledPackageProcedure is the fully-qualified name of the
	// PackagesService's UpdateInstalledPackage RPC.
	PackagesServiceUpdateInstalledPackageProcedure = "/kubeappsapis.core.packages.v1alpha1.PackagesService/UpdateInstalledPackage"
	// PackagesServiceDeleteInstalledPackageProcedure is the fully-qualified name of the
	// PackagesService's DeleteInstalledPackage RPC.
	PackagesServiceDeleteInstalledPackageProcedure = "/kubeappsapis.core.packages.v1alpha1.PackagesService/DeleteInstalledPackage"
	// PackagesServiceGetInstalledPackageResourceRefsProcedure is the fully-qualified name of the
	// PackagesService's GetInstalledPackageResourceRefs RPC.
	PackagesServiceGetInstalledPackageResourceRefsProcedure = "/kubeappsapis.core.packages.v1alpha1.PackagesService/GetInstalledPackageResourceRefs"
)

// PackagesServiceClient is a client for the kubeappsapis.core.packages.v1alpha1.PackagesService
// service.
type PackagesServiceClient interface {
	GetAvailablePackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error)
	GetAvailablePackageDetail(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error)
	GetAvailablePackageVersions(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error)
	GetAvailablePackageMetadatas(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageMetadatasRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageMetadatasResponse], error)
	GetInstalledPackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error)
	GetInstalledPackageDetail(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error)
	CreateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error)
	UpdateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error)
	DeleteInstalledPackage(context.Context, *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error)
	GetInstalledPackageResourceRefs(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error)
}

// NewPackagesServiceClient constructs a client for the
// kubeappsapis.core.packages.v1alpha1.PackagesService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPackagesServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PackagesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &packagesServiceClient{
		getAvailablePackageSummaries: connect_go.NewClient[v1alpha1.GetAvailablePackageSummariesRequest, v1alpha1.GetAvailablePackageSummariesResponse](
			httpClient,
			baseURL+PackagesServiceGetAvailablePackageSummariesProcedure,
			opts...,
		),
		getAvailablePackageDetail: connect_go.NewClient[v1alpha1.GetAvailablePackageDetailRequest, v1alpha1.GetAvailablePackageDetailResponse](
			httpClient,
			baseURL+PackagesServiceGetAvailablePackageDetailProcedure,
			opts...,
		),
		getAvailablePackageVersions: connect_go.NewClient[v1alpha1.GetAvailablePackageVersionsRequest, v1alpha1.GetAvailablePackageVersionsResponse](
			httpClient,
			baseURL+PackagesServiceGetAvailablePackageVersionsProcedure,
			opts...,
		),
		getAvailablePackageMetadatas: connect_go.NewClient[v1alpha1.GetAvailablePackageMetadatasRequest, v1alpha1.GetAvailablePackageMetadatasResponse](
			httpClient,
			baseURL+PackagesServiceGetAvailablePackageMetadatasProcedure,
			opts...,
		),
		getInstalledPackageSummaries: connect_go.NewClient[v1alpha1.GetInstalledPackageSummariesRequest, v1alpha1.GetInstalledPackageSummariesResponse](
			httpClient,
			baseURL+PackagesServiceGetInstalledPackageSummariesProcedure,
			opts...,
		),
		getInstalledPackageDetail: connect_go.NewClient[v1alpha1.GetInstalledPackageDetailRequest, v1alpha1.GetInstalledPackageDetailResponse](
			httpClient,
			baseURL+PackagesServiceGetInstalledPackageDetailProcedure,
			opts...,
		),
		createInstalledPackage: connect_go.NewClient[v1alpha1.CreateInstalledPackageRequest, v1alpha1.CreateInstalledPackageResponse](
			httpClient,
			baseURL+PackagesServiceCreateInstalledPackageProcedure,
			opts...,
		),
		updateInstalledPackage: connect_go.NewClient[v1alpha1.UpdateInstalledPackageRequest, v1alpha1.UpdateInstalledPackageResponse](
			httpClient,
			baseURL+PackagesServiceUpdateInstalledPackageProcedure,
			opts...,
		),
		deleteInstalledPackage: connect_go.NewClient[v1alpha1.DeleteInstalledPackageRequest, v1alpha1.DeleteInstalledPackageResponse](
			httpClient,
			baseURL+PackagesServiceDeleteInstalledPackageProcedure,
			opts...,
		),
		getInstalledPackageResourceRefs: connect_go.NewClient[v1alpha1.GetInstalledPackageResourceRefsRequest, v1alpha1.GetInstalledPackageResourceRefsResponse](
			httpClient,
			baseURL+PackagesServiceGetInstalledPackageResourceRefsProcedure,
			opts...,
		),
	}
}

// packagesServiceClient implements PackagesServiceClient.
type packagesServiceClient struct {
	getAvailablePackageSummaries    *connect_go.Client[v1alpha1.GetAvailablePackageSummariesRequest, v1alpha1.GetAvailablePackageSummariesResponse]
	getAvailablePackageDetail       *connect_go.Client[v1alpha1.GetAvailablePackageDetailRequest, v1alpha1.GetAvailablePackageDetailResponse]
	getAvailablePackageVersions     *connect_go.Client[v1alpha1.GetAvailablePackageVersionsRequest, v1alpha1.GetAvailablePackageVersionsResponse]
	getAvailablePackageMetadatas    *connect_go.Client[v1alpha1.GetAvailablePackageMetadatasRequest, v1alpha1.GetAvailablePackageMetadatasResponse]
	getInstalledPackageSummaries    *connect_go.Client[v1alpha1.GetInstalledPackageSummariesRequest, v1alpha1.GetInstalledPackageSummariesResponse]
	getInstalledPackageDetail       *connect_go.Client[v1alpha1.GetInstalledPackageDetailRequest, v1alpha1.GetInstalledPackageDetailResponse]
	createInstalledPackage          *connect_go.Client[v1alpha1.CreateInstalledPackageRequest, v1alpha1.CreateInstalledPackageResponse]
	updateInstalledPackage          *connect_go.Client[v1alpha1.UpdateInstalledPackageRequest, v1alpha1.UpdateInstalledPackageResponse]
	deleteInstalledPackage          *connect_go.Client[v1alpha1.DeleteInstalledPackageRequest, v1alpha1.DeleteInstalledPackageResponse]
	getInstalledPackageResourceRefs *connect_go.Client[v1alpha1.GetInstalledPackageResourceRefsRequest, v1alpha1.GetInstalledPackageResourceRefsResponse]
}

// GetAvailablePackageSummaries calls
// kubeappsapis.core.packages.v1alpha1.PackagesService.GetAvailablePackageSummaries.
func (c *packagesServiceClient) GetAvailablePackageSummaries(ctx context.Context, req *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error) {
	return c.getAvailablePackageSummaries.CallUnary(ctx, req)
}

// GetAvailablePackageDetail calls
// kubeappsapis.core.packages.v1alpha1.PackagesService.GetAvailablePackageDetail.
func (c *packagesServiceClient) GetAvailablePackageDetail(ctx context.Context, req *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error) {
	return c.getAvailablePackageDetail.CallUnary(ctx, req)
}

// GetAvailablePackageVersions calls
// kubeappsapis.core.packages.v1alpha1.PackagesService.GetAvailablePackageVersions.
func (c *packagesServiceClient) GetAvailablePackageVersions(ctx context.Context, req *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error) {
	return c.getAvailablePackageVersions.CallUnary(ctx, req)
}

// GetAvailablePackageMetadatas calls
// kubeappsapis.core.packages.v1alpha1.PackagesService.GetAvailablePackageMetadatas.
func (c *packagesServiceClient) GetAvailablePackageMetadatas(ctx context.Context, req *connect_go.Request[v1alpha1.GetAvailablePackageMetadatasRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageMetadatasResponse], error) {
	return c.getAvailablePackageMetadatas.CallUnary(ctx, req)
}

// GetInstalledPackageSummaries calls
// kubeappsapis.core.packages.v1alpha1.PackagesService.GetInstalledPackageSummaries.
func (c *packagesServiceClient) GetInstalledPackageSummaries(ctx context.Context, req *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error) {
	return c.getInstalledPackageSummaries.CallUnary(ctx, req)
}

// GetInstalledPackageDetail calls
// kubeappsapis.core.packages.v1alpha1.PackagesService.GetInstalledPackageDetail.
func (c *packagesServiceClient) GetInstalledPackageDetail(ctx context.Context, req *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error) {
	return c.getInstalledPackageDetail.CallUnary(ctx, req)
}

// CreateInstalledPackage calls
// kubeappsapis.core.packages.v1alpha1.PackagesService.CreateInstalledPackage.
func (c *packagesServiceClient) CreateInstalledPackage(ctx context.Context, req *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error) {
	return c.createInstalledPackage.CallUnary(ctx, req)
}

// UpdateInstalledPackage calls
// kubeappsapis.core.packages.v1alpha1.PackagesService.UpdateInstalledPackage.
func (c *packagesServiceClient) UpdateInstalledPackage(ctx context.Context, req *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error) {
	return c.updateInstalledPackage.CallUnary(ctx, req)
}

// DeleteInstalledPackage calls
// kubeappsapis.core.packages.v1alpha1.PackagesService.DeleteInstalledPackage.
func (c *packagesServiceClient) DeleteInstalledPackage(ctx context.Context, req *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error) {
	return c.deleteInstalledPackage.CallUnary(ctx, req)
}

// GetInstalledPackageResourceRefs calls
// kubeappsapis.core.packages.v1alpha1.PackagesService.GetInstalledPackageResourceRefs.
func (c *packagesServiceClient) GetInstalledPackageResourceRefs(ctx context.Context, req *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error) {
	return c.getInstalledPackageResourceRefs.CallUnary(ctx, req)
}

// PackagesServiceHandler is an implementation of the
// kubeappsapis.core.packages.v1alpha1.PackagesService service.
type PackagesServiceHandler interface {
	GetAvailablePackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error)
	GetAvailablePackageDetail(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error)
	GetAvailablePackageVersions(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error)
	GetAvailablePackageMetadatas(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageMetadatasRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageMetadatasResponse], error)
	GetInstalledPackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error)
	GetInstalledPackageDetail(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error)
	CreateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error)
	UpdateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error)
	DeleteInstalledPackage(context.Context, *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error)
	GetInstalledPackageResourceRefs(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error)
}

// NewPackagesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPackagesServiceHandler(svc PackagesServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	packagesServiceGetAvailablePackageSummariesHandler := connect_go.NewUnaryHandler(
		PackagesServiceGetAvailablePackageSummariesProcedure,
		svc.GetAvailablePackageSummaries,
		opts...,
	)
	packagesServiceGetAvailablePackageDetailHandler := connect_go.NewUnaryHandler(
		PackagesServiceGetAvailablePackageDetailProcedure,
		svc.GetAvailablePackageDetail,
		opts...,
	)
	packagesServiceGetAvailablePackageVersionsHandler := connect_go.NewUnaryHandler(
		PackagesServiceGetAvailablePackageVersionsProcedure,
		svc.GetAvailablePackageVersions,
		opts...,
	)
	packagesServiceGetAvailablePackageMetadatasHandler := connect_go.NewUnaryHandler(
		PackagesServiceGetAvailablePackageMetadatasProcedure,
		svc.GetAvailablePackageMetadatas,
		opts...,
	)
	packagesServiceGetInstalledPackageSummariesHandler := connect_go.NewUnaryHandler(
		PackagesServiceGetInstalledPackageSummariesProcedure,
		svc.GetInstalledPackageSummaries,
		opts...,
	)
	packagesServiceGetInstalledPackageDetailHandler := connect_go.NewUnaryHandler(
		PackagesServiceGetInstalledPackageDetailProcedure,
		svc.GetInstalledPackageDetail,
		opts...,
	)
	packagesServiceCreateInstalledPackageHandler := connect_go.NewUnaryHandler(
		PackagesServiceCreateInstalledPackageProcedure,
		svc.CreateInstalledPackage,
		opts...,
	)
	packagesServiceUpdateInstalledPackageHandler := connect_go.NewUnaryHandler(
		PackagesServiceUpdateInstalledPackageProcedure,
		svc.UpdateInstalledPackage,
		opts...,
	)
	packagesServiceDeleteInstalledPackageHandler := connect_go.NewUnaryHandler(
		PackagesServiceDeleteInstalledPackageProcedure,
		svc.DeleteInstalledPackage,
		opts...,
	)
	packagesServiceGetInstalledPackageResourceRefsHandler := connect_go.NewUnaryHandler(
		PackagesServiceGetInstalledPackageResourceRefsProcedure,
		svc.GetInstalledPackageResourceRefs,
		opts...,
	)
	return "/kubeappsapis.core.packages.v1alpha1.PackagesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PackagesServiceGetAvailablePackageSummariesProcedure:
			packagesServiceGetAvailablePackageSummariesHandler.ServeHTTP(w, r)
		case PackagesServiceGetAvailablePackageDetailProcedure:
			packagesServiceGetAvailablePackageDetailHandler.ServeHTTP(w, r)
		case PackagesServiceGetAvailablePackageVersionsProcedure:
			packagesServiceGetAvailablePackageVersionsHandler.ServeHTTP(w, r)
		case PackagesServiceGetAvailablePackageMetadatasProcedure:
			packagesServiceGetAvailablePackageMetadatasHandler.ServeHTTP(w, r)
		case PackagesServiceGetInstalledPackageSummariesProcedure:
			packagesServiceGetInstalledPackageSummariesHandler.ServeHTTP(w, r)
		case PackagesServiceGetInstalledPackageDetailProcedure:
			packagesServiceGetInstalledPackageDetailHandler.ServeHTTP(w, r)
		case PackagesServiceCreateInstalledPackageProcedure:
			packagesServiceCreateInstalledPackageHandler.ServeHTTP(w, r)
		case PackagesServiceUpdateInstalledPackageProcedure:
			packagesServiceUpdateInstalledPackageHandler.ServeHTTP(w, r)
		case PackagesServiceDeleteInstalledPackageProcedure:
			packagesServiceDeleteInstalledPackageHandler.ServeHTTP(w, r)
		case PackagesServiceGetInstalledPackageResourceRefsProcedure:
			packagesServiceGetInstalledPackageResourceRefsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPackagesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPackagesServiceHandler struct{}

func (UnimplementedPackagesServiceHandler) GetAvailablePackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageSummariesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.core.packages.v1alpha1.PackagesService.GetAvailablePackageSummaries is not implemented"))
}

func (UnimplementedPackagesServiceHandler) GetAvailablePackageDetail(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageDetailRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.core.packages.v1alpha1.PackagesService.GetAvailablePackageDetail is not implemented"))
}

func (UnimplementedPackagesServiceHandler) GetAvailablePackageVersions(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageVersionsRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageVersionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.core.packages.v1alpha1.PackagesService.GetAvailablePackageVersions is not implemented"))
}

func (UnimplementedPackagesServiceHandler) GetAvailablePackageMetadatas(context.Context, *connect_go.Request[v1alpha1.GetAvailablePackageMetadatasRequest]) (*connect_go.Response[v1alpha1.GetAvailablePackageMetadatasResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.core.packages.v1alpha1.PackagesService.GetAvailablePackageMetadatas is not implemented"))
}

func (UnimplementedPackagesServiceHandler) GetInstalledPackageSummaries(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageSummariesRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageSummariesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.core.packages.v1alpha1.PackagesService.GetInstalledPackageSummaries is not implemented"))
}

func (UnimplementedPackagesServiceHandler) GetInstalledPackageDetail(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageDetailRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageDetailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.core.packages.v1alpha1.PackagesService.GetInstalledPackageDetail is not implemented"))
}

func (UnimplementedPackagesServiceHandler) CreateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.CreateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.CreateInstalledPackageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.core.packages.v1alpha1.PackagesService.CreateInstalledPackage is not implemented"))
}

func (UnimplementedPackagesServiceHandler) UpdateInstalledPackage(context.Context, *connect_go.Request[v1alpha1.UpdateInstalledPackageRequest]) (*connect_go.Response[v1alpha1.UpdateInstalledPackageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.core.packages.v1alpha1.PackagesService.UpdateInstalledPackage is not implemented"))
}

func (UnimplementedPackagesServiceHandler) DeleteInstalledPackage(context.Context, *connect_go.Request[v1alpha1.DeleteInstalledPackageRequest]) (*connect_go.Response[v1alpha1.DeleteInstalledPackageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.core.packages.v1alpha1.PackagesService.DeleteInstalledPackage is not implemented"))
}

func (UnimplementedPackagesServiceHandler) GetInstalledPackageResourceRefs(context.Context, *connect_go.Request[v1alpha1.GetInstalledPackageResourceRefsRequest]) (*connect_go.Response[v1alpha1.GetInstalledPackageResourceRefsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("kubeappsapis.core.packages.v1alpha1.PackagesService.GetInstalledPackageResourceRefs is not implemented"))
}
