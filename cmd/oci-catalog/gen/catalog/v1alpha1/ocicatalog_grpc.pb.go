// Copyright 2023 the Kubeapps contributors.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ocicatalog/v1alpha1/ocicatalog.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OCICatalogService_ListRepositoriesForRegistry_FullMethodName = "/ocicatalog.v1alpha1.OCICatalogService/ListRepositoriesForRegistry"
	OCICatalogService_ListTagsForRepository_FullMethodName       = "/ocicatalog.v1alpha1.OCICatalogService/ListTagsForRepository"
)

// OCICatalogServiceClient is the client API for OCICatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OCICatalogServiceClient interface {
	ListRepositoriesForRegistry(ctx context.Context, in *ListRepositoriesForRegistryRequest, opts ...grpc.CallOption) (OCICatalogService_ListRepositoriesForRegistryClient, error)
	ListTagsForRepository(ctx context.Context, in *ListTagsForRepositoryRequest, opts ...grpc.CallOption) (OCICatalogService_ListTagsForRepositoryClient, error)
}

type oCICatalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOCICatalogServiceClient(cc grpc.ClientConnInterface) OCICatalogServiceClient {
	return &oCICatalogServiceClient{cc}
}

func (c *oCICatalogServiceClient) ListRepositoriesForRegistry(ctx context.Context, in *ListRepositoriesForRegistryRequest, opts ...grpc.CallOption) (OCICatalogService_ListRepositoriesForRegistryClient, error) {
	stream, err := c.cc.NewStream(ctx, &OCICatalogService_ServiceDesc.Streams[0], OCICatalogService_ListRepositoriesForRegistry_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &oCICatalogServiceListRepositoriesForRegistryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OCICatalogService_ListRepositoriesForRegistryClient interface {
	Recv() (*Repository, error)
	grpc.ClientStream
}

type oCICatalogServiceListRepositoriesForRegistryClient struct {
	grpc.ClientStream
}

func (x *oCICatalogServiceListRepositoriesForRegistryClient) Recv() (*Repository, error) {
	m := new(Repository)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oCICatalogServiceClient) ListTagsForRepository(ctx context.Context, in *ListTagsForRepositoryRequest, opts ...grpc.CallOption) (OCICatalogService_ListTagsForRepositoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &OCICatalogService_ServiceDesc.Streams[1], OCICatalogService_ListTagsForRepository_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &oCICatalogServiceListTagsForRepositoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OCICatalogService_ListTagsForRepositoryClient interface {
	Recv() (*Tag, error)
	grpc.ClientStream
}

type oCICatalogServiceListTagsForRepositoryClient struct {
	grpc.ClientStream
}

func (x *oCICatalogServiceListTagsForRepositoryClient) Recv() (*Tag, error) {
	m := new(Tag)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OCICatalogServiceServer is the server API for OCICatalogService service.
// All implementations must embed UnimplementedOCICatalogServiceServer
// for forward compatibility
type OCICatalogServiceServer interface {
	ListRepositoriesForRegistry(*ListRepositoriesForRegistryRequest, OCICatalogService_ListRepositoriesForRegistryServer) error
	ListTagsForRepository(*ListTagsForRepositoryRequest, OCICatalogService_ListTagsForRepositoryServer) error
	mustEmbedUnimplementedOCICatalogServiceServer()
}

// UnimplementedOCICatalogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOCICatalogServiceServer struct {
}

func (UnimplementedOCICatalogServiceServer) ListRepositoriesForRegistry(*ListRepositoriesForRegistryRequest, OCICatalogService_ListRepositoriesForRegistryServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRepositoriesForRegistry not implemented")
}
func (UnimplementedOCICatalogServiceServer) ListTagsForRepository(*ListTagsForRepositoryRequest, OCICatalogService_ListTagsForRepositoryServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTagsForRepository not implemented")
}
func (UnimplementedOCICatalogServiceServer) mustEmbedUnimplementedOCICatalogServiceServer() {}

// UnsafeOCICatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OCICatalogServiceServer will
// result in compilation errors.
type UnsafeOCICatalogServiceServer interface {
	mustEmbedUnimplementedOCICatalogServiceServer()
}

func RegisterOCICatalogServiceServer(s grpc.ServiceRegistrar, srv OCICatalogServiceServer) {
	s.RegisterService(&OCICatalogService_ServiceDesc, srv)
}

func _OCICatalogService_ListRepositoriesForRegistry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRepositoriesForRegistryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OCICatalogServiceServer).ListRepositoriesForRegistry(m, &oCICatalogServiceListRepositoriesForRegistryServer{stream})
}

type OCICatalogService_ListRepositoriesForRegistryServer interface {
	Send(*Repository) error
	grpc.ServerStream
}

type oCICatalogServiceListRepositoriesForRegistryServer struct {
	grpc.ServerStream
}

func (x *oCICatalogServiceListRepositoriesForRegistryServer) Send(m *Repository) error {
	return x.ServerStream.SendMsg(m)
}

func _OCICatalogService_ListTagsForRepository_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTagsForRepositoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OCICatalogServiceServer).ListTagsForRepository(m, &oCICatalogServiceListTagsForRepositoryServer{stream})
}

type OCICatalogService_ListTagsForRepositoryServer interface {
	Send(*Tag) error
	grpc.ServerStream
}

type oCICatalogServiceListTagsForRepositoryServer struct {
	grpc.ServerStream
}

func (x *oCICatalogServiceListTagsForRepositoryServer) Send(m *Tag) error {
	return x.ServerStream.SendMsg(m)
}

// OCICatalogService_ServiceDesc is the grpc.ServiceDesc for OCICatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OCICatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocicatalog.v1alpha1.OCICatalogService",
	HandlerType: (*OCICatalogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListRepositoriesForRegistry",
			Handler:       _OCICatalogService_ListRepositoriesForRegistry_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTagsForRepository",
			Handler:       _OCICatalogService_ListTagsForRepository_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ocicatalog/v1alpha1/ocicatalog.proto",
}
