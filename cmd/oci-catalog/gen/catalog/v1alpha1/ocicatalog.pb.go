// Copyright 2023 the Kubeapps contributors.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: ocicatalog/v1alpha1/ocicatalog.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RegistryProvider
//
// Optionally specify the registry provider when known.
type RegistryProvider int32

const (
	RegistryProvider_REGISTRY_PROVIDER_UNSPECIFIED RegistryProvider = 0
	RegistryProvider_REGISTRY_PROVIDER_DOCKER_HUB  RegistryProvider = 1
	RegistryProvider_REGISTRY_PROVIDER_HARBOR      RegistryProvider = 2
)

// Enum value maps for RegistryProvider.
var (
	RegistryProvider_name = map[int32]string{
		0: "REGISTRY_PROVIDER_UNSPECIFIED",
		1: "REGISTRY_PROVIDER_DOCKER_HUB",
		2: "REGISTRY_PROVIDER_HARBOR",
	}
	RegistryProvider_value = map[string]int32{
		"REGISTRY_PROVIDER_UNSPECIFIED": 0,
		"REGISTRY_PROVIDER_DOCKER_HUB":  1,
		"REGISTRY_PROVIDER_HARBOR":      2,
	}
)

func (x RegistryProvider) Enum() *RegistryProvider {
	p := new(RegistryProvider)
	*p = x
	return p
}

func (x RegistryProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegistryProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_ocicatalog_v1alpha1_ocicatalog_proto_enumTypes[0].Descriptor()
}

func (RegistryProvider) Type() protoreflect.EnumType {
	return &file_ocicatalog_v1alpha1_ocicatalog_proto_enumTypes[0]
}

func (x RegistryProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegistryProvider.Descriptor instead.
func (RegistryProvider) EnumDescriptor() ([]byte, []int) {
	return file_ocicatalog_v1alpha1_ocicatalog_proto_rawDescGZIP(), []int{0}
}

// ListRepositoriesForRegistryRequest
//
// Request for listing repositories of a registry or a namespaced registry.
type ListRepositoriesForRegistryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The OCI registry for which the repositories should be listed.
	Registry string `protobuf:"bytes,1,opt,name=registry,proto3" json:"registry,omitempty"`
	// An optional namespace within which to list repositories.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// An optional list of content types to filter.
	ContentTypes []string `protobuf:"bytes,3,rep,name=content_types,json=contentTypes,proto3" json:"content_types,omitempty"`
	// Perhaps switch to be a one-of, so when testing, can pass a token
	// directly? Though wouldn't want this to be used or available in prod.
	KubernetesSecret string `protobuf:"bytes,4,opt,name=kubernetes_secret,json=kubernetesSecret,proto3" json:"kubernetes_secret,omitempty"`
	// In self-hosted registry examples, such as a self-hosted Harbor registry,
	// there will be no information in the URL that can be used to determine
	// the provider (and hence, which strategy / API to use). The optional
	// registry_provider field can be used to explicitly identify the provider.
	RegistryProvider RegistryProvider `protobuf:"varint,5,opt,name=registry_provider,json=registryProvider,proto3,enum=ocicatalog.v1alpha1.RegistryProvider" json:"registry_provider,omitempty"`
}

func (x *ListRepositoriesForRegistryRequest) Reset() {
	*x = ListRepositoriesForRegistryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocicatalog_v1alpha1_ocicatalog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoriesForRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoriesForRegistryRequest) ProtoMessage() {}

func (x *ListRepositoriesForRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocicatalog_v1alpha1_ocicatalog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoriesForRegistryRequest.ProtoReflect.Descriptor instead.
func (*ListRepositoriesForRegistryRequest) Descriptor() ([]byte, []int) {
	return file_ocicatalog_v1alpha1_ocicatalog_proto_rawDescGZIP(), []int{0}
}

func (x *ListRepositoriesForRegistryRequest) GetRegistry() string {
	if x != nil {
		return x.Registry
	}
	return ""
}

func (x *ListRepositoriesForRegistryRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListRepositoriesForRegistryRequest) GetContentTypes() []string {
	if x != nil {
		return x.ContentTypes
	}
	return nil
}

func (x *ListRepositoriesForRegistryRequest) GetKubernetesSecret() string {
	if x != nil {
		return x.KubernetesSecret
	}
	return ""
}

func (x *ListRepositoriesForRegistryRequest) GetRegistryProvider() RegistryProvider {
	if x != nil {
		return x.RegistryProvider
	}
	return RegistryProvider_REGISTRY_PROVIDER_UNSPECIFIED
}

// Repository
//
// Uniquely identifies an OCI repository.
type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registry  string `protobuf:"bytes,1,opt,name=registry,proto3" json:"registry,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocicatalog_v1alpha1_ocicatalog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_ocicatalog_v1alpha1_ocicatalog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_ocicatalog_v1alpha1_ocicatalog_proto_rawDescGZIP(), []int{1}
}

func (x *Repository) GetRegistry() string {
	if x != nil {
		return x.Registry
	}
	return ""
}

func (x *Repository) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ListTagsForRepositoryRequest
//
// Identifies the repository for which tags are to be listed. Can be
// extended in the future with other options.
type ListTagsForRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository       *Repository      `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	RegistryProvider RegistryProvider `protobuf:"varint,2,opt,name=registry_provider,json=registryProvider,proto3,enum=ocicatalog.v1alpha1.RegistryProvider" json:"registry_provider,omitempty"`
}

func (x *ListTagsForRepositoryRequest) Reset() {
	*x = ListTagsForRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocicatalog_v1alpha1_ocicatalog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTagsForRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTagsForRepositoryRequest) ProtoMessage() {}

func (x *ListTagsForRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocicatalog_v1alpha1_ocicatalog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTagsForRepositoryRequest.ProtoReflect.Descriptor instead.
func (*ListTagsForRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_ocicatalog_v1alpha1_ocicatalog_proto_rawDescGZIP(), []int{2}
}

func (x *ListTagsForRepositoryRequest) GetRepository() *Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *ListTagsForRepositoryRequest) GetRegistryProvider() RegistryProvider {
	if x != nil {
		return x.RegistryProvider
	}
	return RegistryProvider_REGISTRY_PROVIDER_UNSPECIFIED
}

// Tag
//
// Simple tag for a repository.
type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocicatalog_v1alpha1_ocicatalog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_ocicatalog_v1alpha1_ocicatalog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_ocicatalog_v1alpha1_ocicatalog_proto_rawDescGZIP(), []int{3}
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_ocicatalog_v1alpha1_ocicatalog_proto protoreflect.FileDescriptor

var file_ocicatalog_v1alpha1_ocicatalog_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6f, 0x63, 0x69, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f, 0x63, 0x69, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6f, 0x63, 0x69, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0x84, 0x02, 0x0a, 0x22,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x52,
	0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x63, 0x69, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x22, 0x5a, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb3,
	0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x69, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x52, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x63,
	0x69, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x22, 0x19, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a,
	0x75, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x43, 0x4b,
	0x45, 0x52, 0x5f, 0x48, 0x55, 0x42, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x48, 0x41,
	0x52, 0x42, 0x4f, 0x52, 0x10, 0x02, 0x32, 0xf6, 0x01, 0x0a, 0x11, 0x4f, 0x43, 0x49, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x37, 0x2e, 0x6f, 0x63,
	0x69, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6f, 0x63, 0x69, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x61, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x31, 0x2e, 0x6f, 0x63, 0x69, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x73, 0x46,
	0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6f, 0x63, 0x69, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x30, 0x01, 0x42,
	0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x2d, 0x74, 0x61, 0x6e, 0x7a, 0x75, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x61,
	0x70, 0x70, 0x73, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x6f, 0x63, 0x69, 0x2d, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocicatalog_v1alpha1_ocicatalog_proto_rawDescOnce sync.Once
	file_ocicatalog_v1alpha1_ocicatalog_proto_rawDescData = file_ocicatalog_v1alpha1_ocicatalog_proto_rawDesc
)

func file_ocicatalog_v1alpha1_ocicatalog_proto_rawDescGZIP() []byte {
	file_ocicatalog_v1alpha1_ocicatalog_proto_rawDescOnce.Do(func() {
		file_ocicatalog_v1alpha1_ocicatalog_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocicatalog_v1alpha1_ocicatalog_proto_rawDescData)
	})
	return file_ocicatalog_v1alpha1_ocicatalog_proto_rawDescData
}

var file_ocicatalog_v1alpha1_ocicatalog_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ocicatalog_v1alpha1_ocicatalog_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ocicatalog_v1alpha1_ocicatalog_proto_goTypes = []any{
	(RegistryProvider)(0),                      // 0: ocicatalog.v1alpha1.RegistryProvider
	(*ListRepositoriesForRegistryRequest)(nil), // 1: ocicatalog.v1alpha1.ListRepositoriesForRegistryRequest
	(*Repository)(nil),                         // 2: ocicatalog.v1alpha1.Repository
	(*ListTagsForRepositoryRequest)(nil),       // 3: ocicatalog.v1alpha1.ListTagsForRepositoryRequest
	(*Tag)(nil),                                // 4: ocicatalog.v1alpha1.Tag
}
var file_ocicatalog_v1alpha1_ocicatalog_proto_depIdxs = []int32{
	0, // 0: ocicatalog.v1alpha1.ListRepositoriesForRegistryRequest.registry_provider:type_name -> ocicatalog.v1alpha1.RegistryProvider
	2, // 1: ocicatalog.v1alpha1.ListTagsForRepositoryRequest.repository:type_name -> ocicatalog.v1alpha1.Repository
	0, // 2: ocicatalog.v1alpha1.ListTagsForRepositoryRequest.registry_provider:type_name -> ocicatalog.v1alpha1.RegistryProvider
	1, // 3: ocicatalog.v1alpha1.OCICatalogService.ListRepositoriesForRegistry:input_type -> ocicatalog.v1alpha1.ListRepositoriesForRegistryRequest
	3, // 4: ocicatalog.v1alpha1.OCICatalogService.ListTagsForRepository:input_type -> ocicatalog.v1alpha1.ListTagsForRepositoryRequest
	2, // 5: ocicatalog.v1alpha1.OCICatalogService.ListRepositoriesForRegistry:output_type -> ocicatalog.v1alpha1.Repository
	4, // 6: ocicatalog.v1alpha1.OCICatalogService.ListTagsForRepository:output_type -> ocicatalog.v1alpha1.Tag
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_ocicatalog_v1alpha1_ocicatalog_proto_init() }
func file_ocicatalog_v1alpha1_ocicatalog_proto_init() {
	if File_ocicatalog_v1alpha1_ocicatalog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocicatalog_v1alpha1_ocicatalog_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListRepositoriesForRegistryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocicatalog_v1alpha1_ocicatalog_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocicatalog_v1alpha1_ocicatalog_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListTagsForRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocicatalog_v1alpha1_ocicatalog_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocicatalog_v1alpha1_ocicatalog_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ocicatalog_v1alpha1_ocicatalog_proto_goTypes,
		DependencyIndexes: file_ocicatalog_v1alpha1_ocicatalog_proto_depIdxs,
		EnumInfos:         file_ocicatalog_v1alpha1_ocicatalog_proto_enumTypes,
		MessageInfos:      file_ocicatalog_v1alpha1_ocicatalog_proto_msgTypes,
	}.Build()
	File_ocicatalog_v1alpha1_ocicatalog_proto = out.File
	file_ocicatalog_v1alpha1_ocicatalog_proto_rawDesc = nil
	file_ocicatalog_v1alpha1_ocicatalog_proto_goTypes = nil
	file_ocicatalog_v1alpha1_ocicatalog_proto_depIdxs = nil
}
