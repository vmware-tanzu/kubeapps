{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Override Kubernetes version",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.fullname",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname",
            "default": ""
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "enableIPv6": {
            "type": "boolean",
            "description": "Enable IPv6 configuration",
            "default": false
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the deployment",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the deployment",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable ingress record generation for Kubeapps",
                    "default": false
                },
                "apiVersion": {
                    "type": "string",
                    "description": "Force Ingress API version (automatically detected if not set)",
                    "default": ""
                },
                "hostname": {
                    "type": "string",
                    "description": "Default host for the ingress record",
                    "default": "kubeapps.local"
                },
                "path": {
                    "type": "string",
                    "description": "Default path for the ingress record",
                    "default": "/"
                },
                "pathType": {
                    "type": "string",
                    "description": "Ingress path type",
                    "default": "ImplementationSpecific"
                },
                "annotations": {
                    "type": "object",
                    "properties": {
                        "nginx": {
                            "type": "object",
                            "properties": {
                                "ingress": {
                                    "type": "object",
                                    "properties": {
                                        "kubernetes": {
                                            "type": "object",
                                            "properties": {
                                                "io/proxy-read-timeout": {
                                                    "type": "object",
                                                    "description": "",
                                                    "default": {
                                                        "nginx.ingress.kubernetes.io/proxy-read-timeout": "600"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS configuration for the host defined at `ingress.hostname` parameter",
                    "default": false
                },
                "selfSigned": {
                    "type": "boolean",
                    "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                    "default": false
                },
                "extraHosts": {
                    "type": "array",
                    "description": "An array with additional hostname(s) to be covered with the ingress record",
                    "default": [],
                    "items": {}
                },
                "extraPaths": {
                    "type": "array",
                    "description": "An array with additional arbitrary paths that may need to be added to the ingress under the main host",
                    "default": [],
                    "items": {}
                },
                "extraTls": {
                    "type": "array",
                    "description": "TLS configuration for additional hostname(s) to be covered with this ingress record",
                    "default": [],
                    "items": {}
                },
                "secrets": {
                    "type": "array",
                    "description": "Custom TLS certificates as secrets",
                    "default": [],
                    "items": {}
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                    "default": ""
                },
                "extraRules": {
                    "type": "array",
                    "description": "Additional rules to be covered with this ingress record",
                    "default": [],
                    "items": {}
                }
            }
        },
        "packaging": {
            "type": "object",
            "properties": {
                "helm": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable the standard Helm packaging.",
                            "default": true
                        }
                    }
                },
                "carvel": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable support for the Carvel (kapp-controller) packaging.",
                            "default": false
                        }
                    }
                },
                "flux": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable support for Flux (v2) packaging.",
                            "default": false
                        }
                    }
                }
            }
        },
        "frontend": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "NGINX image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "NGINX image repository",
                            "default": "bitnami/nginx"
                        },
                        "tag": {
                            "type": "string",
                            "description": "NGINX image tag (immutable tags are recommended)",
                            "default": "1.23.1-debian-11-r35"
                        },
                        "digest": {
                            "type": "string",
                            "description": "NGINX image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "NGINX image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "NGINX image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable image debug mode",
                            "default": false
                        }
                    }
                },
                "proxypassAccessTokenAsBearer": {
                    "type": "boolean",
                    "description": "Use access_token as the Bearer when talking to the k8s api server",
                    "default": false
                },
                "proxypassExtraSetHeader": {
                    "type": "string",
                    "description": "Set an additional proxy header for all requests proxied via NGINX",
                    "default": ""
                },
                "largeClientHeaderBuffers": {
                    "type": "string",
                    "description": "Set large_client_header_buffers in NGINX config",
                    "default": "4 32k"
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of frontend replicas to deploy",
                    "default": 2
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Frontend deployment strategy type.",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "The CPU limits for the NGINX container",
                                    "default": "250m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "The memory limits for the NGINX container",
                                    "default": "128Mi"
                                }
                            }
                        },
                        "requests": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "The requested CPU for the NGINX container",
                                    "default": "25m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "The requested memory for the NGINX container",
                                    "default": "32Mi"
                                }
                            }
                        }
                    }
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to the NGINX container",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for the NGINX container",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for the NGINX container",
                    "default": ""
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "NGINX HTTP container port",
                            "default": 8080
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled frontend pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set frontend pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled NGINX containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set NGINX container's Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set NGINX container's Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 60
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "Custom lifecycle hooks for frontend containers",
                    "default": {}
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for frontend pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for frontend pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority class name for frontend pods",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Custom host aliases for frontend pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for frontend pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for frontend container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the frontend pod",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the frontend pods",
                    "default": [],
                    "items": {}
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Frontend service type",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Frontend service HTTP port",
                                    "default": 80
                                }
                            }
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "string",
                                    "description": "Node port for HTTP",
                                    "default": ""
                                }
                            }
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Frontend service Cluster IP",
                            "default": ""
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "Frontend service Load Balancer IP",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Frontend service Load Balancer sources",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Frontend service external traffic policy",
                            "default": "Cluster"
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for frontend service",
                            "default": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                }
            }
        },
        "dashboard": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether Kubeapps Dashboard should be deployed or not",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Dashboard image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Dashboard image repository",
                            "default": "kubeapps/dashboard"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Dashboard image tag (immutable tags are recommended)",
                            "default": "latest"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Dashboard image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Dashboard image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Dashboard image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable image debug mode",
                            "default": false
                        }
                    }
                },
                "customStyle": {
                    "type": "string",
                    "description": "Custom CSS injected to the Dashboard to customize Kubeapps look and feel",
                    "default": ""
                },
                "customAppViews": {
                    "type": "array",
                    "description": "Package names to signal a custom app view",
                    "default": [],
                    "items": {}
                },
                "customComponents": {
                    "type": "string",
                    "description": "Custom Form components injected into the BasicDeploymentForm",
                    "default": ""
                },
                "remoteComponentsUrl": {
                    "type": "string",
                    "description": "Remote URL that can be used to load custom components vs loading from the local filesystem",
                    "default": ""
                },
                "skipAvailablePackageDetails": {
                    "type": "boolean",
                    "description": "Skip the package details view and go straight to the installation view of the latest version",
                    "default": false
                },
                "customLocale": {
                    "type": "string",
                    "description": "Custom translations injected to the Dashboard to customize the strings used in Kubeapps",
                    "default": ""
                },
                "defaultTheme": {
                    "type": "string",
                    "description": "Default theme used in the Dashboard if the user has not selected any theme yet.",
                    "default": ""
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Dashboard replicas to deploy",
                    "default": 2
                },
                "createNamespaceLabels": {
                    "type": "object",
                    "description": "Labels added to newly created namespaces",
                    "default": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Dashboard deployment strategy type.",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to the Dashboard container",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for the Dashboard container",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for the Dashboard container",
                    "default": ""
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Dashboard HTTP container port",
                            "default": 8080
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "The CPU limits for the Dashboard container",
                                    "default": "250m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "The memory limits for the Dashboard container",
                                    "default": "128Mi"
                                }
                            }
                        },
                        "requests": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "The requested CPU for the Dashboard container",
                                    "default": "25m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "The requested memory for the Dashboard container",
                                    "default": "32Mi"
                                }
                            }
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Dashboard pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Dashboard pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Dashboard containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Dashboard container's Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Dashboard container's Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 60
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "Custom lifecycle hooks for Dashboard containers",
                    "default": {}
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Dashboard pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Dashboard pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority class name for Dashboard pods",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Custom host aliases for Dashboard pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for Dashboard pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for Dashboard container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Dashboard pod",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Dashboard pods",
                    "default": [],
                    "items": {}
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Dashboard service HTTP port",
                                    "default": 8080
                                }
                            }
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for Dashboard service",
                            "default": {}
                        }
                    }
                }
            }
        },
        "apprepository": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Kubeapps AppRepository Controller image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Kubeapps AppRepository Controller image repository",
                            "default": "kubeapps/apprepository-controller"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Kubeapps AppRepository Controller image tag (immutable tags are recommended)",
                            "default": "latest"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Kubeapps AppRepository Controller image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Kubeapps AppRepository Controller image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Kubeapps AppRepository Controller image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "syncImage": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Kubeapps Asset Syncer image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Kubeapps Asset Syncer image repository",
                            "default": "kubeapps/asset-syncer"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Kubeapps Asset Syncer image tag (immutable tags are recommended)",
                            "default": "latest"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Kubeapps Asset Syncer image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Kubeapps Asset Syncer image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Kubeapps Asset Syncer image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "globalReposNamespaceSuffix": {
                    "type": "string",
                    "description": "Suffix for the namespace of global repos in the Helm plugin. Defaults to empty for backwards compatibility. Ignored if kubeappsapis.pluginConfig.helm.packages.v1alpha1.globalPackagingNamespace is set.",
                    "default": ""
                },
                "initialRepos": {
                    "type": "array",
                    "description": "",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": ""
                            },
                            "url": {
                                "type": "string",
                                "description": ""
                            }
                        }
                    }
                },
                "customAnnotations": {
                    "type": "object",
                    "description": "Custom annotations be added to each AppRepository-generated CronJob, Job and Pod",
                    "default": {}
                },
                "customLabels": {
                    "type": "object",
                    "description": "Custom labels be added to each AppRepository-generated CronJob, Job and Pod",
                    "default": {}
                },
                "initialReposProxy": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enables the proxy",
                            "default": false
                        },
                        "httpProxy": {
                            "type": "string",
                            "description": "URL for the http proxy",
                            "default": ""
                        },
                        "httpsProxy": {
                            "type": "string",
                            "description": "URL for the https proxy",
                            "default": ""
                        },
                        "noProxy": {
                            "type": "string",
                            "description": "URL to exclude from using the proxy",
                            "default": ""
                        }
                    }
                },
                "crontab": {
                    "type": "string",
                    "description": "Schedule for syncing App repositories (default to 10 minutes)",
                    "default": ""
                },
                "watchAllNamespaces": {
                    "type": "boolean",
                    "description": "Watch all namespaces to support separate AppRepositories per namespace",
                    "default": true
                },
                "extraFlags": {
                    "type": "array",
                    "description": "Additional command line flags for AppRepository Controller",
                    "default": [],
                    "items": {}
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of AppRepository Controller replicas to deploy",
                    "default": 1
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "AppRepository Controller deployment strategy type.",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "The CPU limits for the AppRepository Controller container",
                                    "default": "250m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "The memory limits for the AppRepository Controller container",
                                    "default": "128Mi"
                                }
                            }
                        },
                        "requests": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "The requested CPU for the AppRepository Controller container",
                                    "default": "25m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "The requested memory for the AppRepository Controller container",
                                    "default": "32Mi"
                                }
                            }
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled AppRepository Controller pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set AppRepository Controller pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled AppRepository Controller containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set AppRepository Controller container's Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set AppRepository Controller container's Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "Custom lifecycle hooks for AppRepository Controller containers",
                    "default": {}
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to AppRepository Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for AppRepository Controller pod(s)",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for AppRepository Controller pod(s)",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the AppRepository Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the AppRepository Controller container(s)",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for AppRepository Controller pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for AppRepository Controller pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority class name for AppRepository Controller pods",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Custom host aliases for AppRepository Controller pods",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the AppRepository Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the AppRepository Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "Name of the service account to use. If not set and create is true, a name is generated using the fullname template.",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                            "default": {}
                        }
                    }
                }
            }
        },
        "authProxy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether Kubeapps should configure OAuth login/logout",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "OAuth2 Proxy image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "OAuth2 Proxy image repository",
                            "default": "bitnami/oauth2-proxy"
                        },
                        "tag": {
                            "type": "string",
                            "description": "OAuth2 Proxy image tag (immutable tags are recommended)",
                            "default": "7.3.0-debian-11-r46"
                        },
                        "digest": {
                            "type": "string",
                            "description": "OAuth2 Proxy image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "OAuth2 Proxy image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "OAuth2 Proxy image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "external": {
                    "type": "boolean",
                    "description": "Use an external Auth Proxy instead of deploying its own one",
                    "default": false
                },
                "oauthLoginURI": {
                    "type": "string",
                    "description": "OAuth Login URI to which the Kubeapps frontend redirects for authn",
                    "default": "/oauth2/start"
                },
                "oauthLogoutURI": {
                    "type": "string",
                    "description": "OAuth Logout URI to which the Kubeapps frontend redirects for authn",
                    "default": "/oauth2/sign_out"
                },
                "skipKubeappsLoginPage": {
                    "type": "boolean",
                    "description": "Skip the Kubeapps login page when using OIDC and directly redirect to the IdP",
                    "default": false
                },
                "provider": {
                    "type": "string",
                    "description": "OAuth provider",
                    "default": ""
                },
                "clientID": {
                    "type": "string",
                    "description": "OAuth Client ID",
                    "default": ""
                },
                "clientSecret": {
                    "type": "string",
                    "description": "OAuth Client secret",
                    "default": ""
                },
                "cookieSecret": {
                    "type": "string",
                    "description": "Secret used by oauth2-proxy to encrypt any credentials",
                    "default": ""
                },
                "cookieRefresh": {
                    "type": "string",
                    "description": "Duration after which to refresh the cookie",
                    "default": "2m"
                },
                "scope": {
                    "type": "string",
                    "description": "OAuth scope specification",
                    "default": "openid email groups"
                },
                "emailDomain": {
                    "type": "string",
                    "description": "Allowed email domains",
                    "default": "*"
                },
                "extraFlags": {
                    "type": "array",
                    "description": "Additional command line flags for oauth2-proxy",
                    "default": [],
                    "items": {}
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Auth Proxy container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to the Auth Proxy container",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Auth Proxy containers(s)",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Auth Proxy containers(s)",
                    "default": ""
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Auth Proxy container(s)",
                    "default": [],
                    "items": {}
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "proxy": {
                            "type": "number",
                            "description": "Auth Proxy HTTP container port",
                            "default": 3000
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Auth Proxy containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Auth Proxy container's Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Auth Proxy container's Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "The CPU limits for the OAuth2 Proxy container",
                                    "default": "250m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "The memory limits for the OAuth2 Proxy container",
                                    "default": "128Mi"
                                }
                            }
                        },
                        "requests": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "The requested CPU for the OAuth2 Proxy container",
                                    "default": "25m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "The requested memory for the OAuth2 Proxy container",
                                    "default": "32Mi"
                                }
                            }
                        }
                    }
                }
            }
        },
        "pinnipedProxy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether Kubeapps should configure Pinniped Proxy",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Pinniped Proxy image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Pinniped Proxy image repository",
                            "default": "kubeapps/pinniped-proxy"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Pinniped Proxy image tag (immutable tags are recommended)",
                            "default": "latest"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Pinniped Proxy image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Pinniped Proxy image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Pinniped Proxy image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "defaultPinnipedNamespace": {
                    "type": "string",
                    "description": "Namespace in which pinniped concierge is installed",
                    "default": "pinniped-concierge"
                },
                "defaultAuthenticatorType": {
                    "type": "string",
                    "description": "Authenticator type",
                    "default": "JWTAuthenticator"
                },
                "defaultAuthenticatorName": {
                    "type": "string",
                    "description": "Authenticator name",
                    "default": "jwt-authenticator"
                },
                "defaultPinnipedAPISuffix": {
                    "type": "string",
                    "description": "API suffix",
                    "default": "pinniped.dev"
                },
                "tls": {
                    "type": "object",
                    "properties": {
                        "existingSecret": {
                            "type": "string",
                            "description": "TLS secret with which to proxy requests",
                            "default": ""
                        },
                        "caCertificate": {
                            "type": "string",
                            "description": "TLS CA cert config map which clients of pinniped proxy should use with TLS requests",
                            "default": ""
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "For the Pinniped Proxy container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to Pinniped Proxy container(s)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Pinniped Proxy container(s)",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Pinniped Proxy container(s)",
                    "default": ""
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Pinniped Proxy container(s)",
                    "default": [],
                    "items": {}
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "pinnipedProxy": {
                            "type": "number",
                            "description": "Pinniped Proxy container port",
                            "default": 3333
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Pinniped Proxy containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Pinniped Proxy container's Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Pinniped Proxy container's Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "The CPU limits for the Pinniped Proxy container",
                                    "default": "250m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "The memory limits for the Pinniped Proxy container",
                                    "default": "128Mi"
                                }
                            }
                        },
                        "requests": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "The requested CPU for the Pinniped Proxy container",
                                    "default": "25m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "The requested memory for the Pinniped Proxy container",
                                    "default": "32Mi"
                                }
                            }
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "pinnipedProxy": {
                                    "type": "number",
                                    "description": "Pinniped Proxy service port",
                                    "default": 3333
                                }
                            }
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for Pinniped Proxy service",
                            "default": {}
                        }
                    }
                }
            }
        },
        "clusters": {
            "type": "array",
            "description": "",
            "items": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": ""
                    },
                    "domain": {
                        "type": "string",
                        "description": ""
                    }
                }
            }
        },
        "featureFlags": {
            "type": "object",
            "properties": {
                "apiOnly": {
                    "type": "object",
                    "properties": {
                        "grpc": {
                            "type": "object",
                            "properties": {
                                "annotations": {
                                    "type": "object",
                                    "properties": {
                                        "nginx": {
                                            "type": "object",
                                            "properties": {
                                                "ingress": {
                                                    "type": "object",
                                                    "properties": {
                                                        "kubernetes": {
                                                            "type": "object",
                                                            "properties": {
                                                                "io/backend-protocol": {
                                                                    "type": "string",
                                                                    "description": "",
                                                                    "default": "GRPC"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable ingress for API operations only. Access to \"/\" will not be possible, so Dashboard will be unusable.",
                            "default": false
                        }
                    }
                },
                "operators": {
                    "type": "boolean",
                    "description": "Enable support for Operators in Kubeapps",
                    "default": false
                },
                "schemaEditor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable a visual editor for customizing the package schemas",
                            "default": false
                        }
                    }
                }
            }
        },
        "rbac": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether RBAC resources should be created",
                    "default": true
                }
            }
        },
        "postgresql": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Deploy a PostgreSQL server to satisfy the applications database requirements",
                    "default": true
                },
                "auth": {
                    "type": "object",
                    "properties": {
                        "postgresPassword": {
                            "type": "string",
                            "description": "Password for 'postgres' user",
                            "default": ""
                        },
                        "database": {
                            "type": "string",
                            "description": "Name for a custom database to create",
                            "default": "assets"
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of existing secret to use for PostgreSQL credentials",
                            "default": ""
                        }
                    }
                },
                "primary": {
                    "type": "object",
                    "properties": {
                        "persistence": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable PostgreSQL Primary data persistence using PVC",
                                    "default": false
                                }
                            }
                        }
                    }
                },
                "architecture": {
                    "type": "string",
                    "description": "PostgreSQL architecture (`standalone` or `replication`)",
                    "default": "standalone"
                },
                "securityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled PostgreSQL replicas pods' Security Context",
                            "default": false
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the PostgreSQL container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "The requested CPU for the PostgreSQL container",
                                    "default": "250m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "The requested memory for the PostgreSQL container",
                                    "default": "256Mi"
                                }
                            }
                        }
                    }
                }
            }
        },
        "kubeappsapis": {
            "type": "object",
            "properties": {
                "enabledPlugins": {
                    "type": "array",
                    "description": "Manually override which plugins are enabled for the Kubeapps-APIs service",
                    "default": [],
                    "items": {}
                },
                "pluginConfig": {
                    "type": "object",
                    "properties": {
                        "core": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "object",
                                    "properties": {
                                        "v1alpha1": {
                                            "type": "object",
                                            "properties": {
                                                "versionsInSummary": {
                                                    "type": "object",
                                                    "properties": {
                                                        "major": {
                                                            "type": "number",
                                                            "description": "Number of major versions to display in the summary",
                                                            "default": 3
                                                        },
                                                        "minor": {
                                                            "type": "number",
                                                            "description": "Number of minor versions to display in the summary",
                                                            "default": 3
                                                        },
                                                        "patch": {
                                                            "type": "number",
                                                            "description": "Number of patch versions to display in the summary",
                                                            "default": 3
                                                        }
                                                    }
                                                },
                                                "timeoutSeconds": {
                                                    "type": "number",
                                                    "description": "Value to wait for Kubernetes commands to complete",
                                                    "default": 300
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "helm": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "object",
                                    "properties": {
                                        "v1alpha1": {
                                            "type": "object",
                                            "properties": {
                                                "globalPackagingNamespace": {
                                                    "type": "string",
                                                    "description": "Custom global packaging namespace. Using this value will override the current \"kubeapps release namespace + suffix\" pattern and will create a new namespace if not exists.",
                                                    "default": ""
                                                },
                                                "userManagedSecrets": {
                                                    "type": "boolean",
                                                    "description": "Default policy for handling repository secrets, either managed by the user or by kubeapps-apis",
                                                    "default": false
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "kappController": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "object",
                                    "properties": {
                                        "v1alpha1": {
                                            "type": "object",
                                            "properties": {
                                                "defaultUpgradePolicy": {
                                                    "type": "string",
                                                    "description": "Default upgrade policy generating version constraints",
                                                    "default": "none"
                                                },
                                                "defaultPrereleasesVersionSelection": {
                                                    "type": "array",
                                                    "description": "Default policy for allowing prereleases containing one of the identifiers",
                                                    "default": null,
                                                    "nullable": true,
                                                    "items": {}
                                                },
                                                "defaultAllowDowngrades": {
                                                    "type": "boolean",
                                                    "description": "Default policy for allowing applications to be downgraded to previous versions",
                                                    "default": false
                                                },
                                                "globalPackagingNamespace": {
                                                    "type": "string",
                                                    "description": "Default global packaging namespace",
                                                    "default": "kapp-controller-packaging-global"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "flux": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "object",
                                    "properties": {
                                        "v1alpha1": {
                                            "type": "object",
                                            "properties": {
                                                "defaultUpgradePolicy": {
                                                    "type": "string",
                                                    "description": "Default upgrade policy generating version constraints",
                                                    "default": "none"
                                                },
                                                "userManagedSecrets": {
                                                    "type": "boolean",
                                                    "description": "Default policy for handling repository secrets, either managed by the user or by kubeapps-apis",
                                                    "default": false
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "resources": {
                            "type": "object",
                            "properties": {
                                "packages": {
                                    "type": "object",
                                    "properties": {
                                        "v1alpha1": {
                                            "type": "object",
                                            "properties": {
                                                "trustedNamespaces": {
                                                    "type": "object",
                                                    "properties": {
                                                        "headerName": {
                                                            "type": "string",
                                                            "description": "Optional header name for trusted namespaces",
                                                            "default": ""
                                                        },
                                                        "headerPattern": {
                                                            "type": "string",
                                                            "description": "Optional header pattern for trusted namespaces",
                                                            "default": ""
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Kubeapps-APIs image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Kubeapps-APIs image repository",
                            "default": "kubeapps/kubeapps-apis"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Kubeapps-APIs image tag (immutable tags are recommended)",
                            "default": "latest"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Kubeapps-APIs image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Kubeapps-APIs image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Kubeapps-APIs image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of frontend replicas to deploy",
                    "default": 2
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "KubeappsAPIs deployment strategy type.",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "extraFlags": {
                    "type": "array",
                    "description": "Additional command line flags for KubeappsAPIs",
                    "default": [],
                    "items": {}
                },
                "qps": {
                    "type": "string",
                    "description": "KubeappsAPIs Kubernetes API client QPS limit",
                    "default": "50.0"
                },
                "burst": {
                    "type": "string",
                    "description": "KubeappsAPIs Kubernetes API client Burst limit",
                    "default": "100"
                },
                "terminationGracePeriodSeconds": {
                    "type": "number",
                    "description": "The grace time period for sig term",
                    "default": 300
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to the KubeappsAPIs container",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for the KubeappsAPIs container",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for the KubeappsAPIs container",
                    "default": ""
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "KubeappsAPIs HTTP container port",
                            "default": 50051
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "The CPU limits for the KubeappsAPIs container",
                                    "default": "250m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "The memory limits for the KubeappsAPIs container",
                                    "default": "256Mi"
                                }
                            }
                        },
                        "requests": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "The requested CPU for the KubeappsAPIs container",
                                    "default": "25m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "The requested memory for the KubeappsAPIs container",
                                    "default": "32Mi"
                                }
                            }
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled KubeappsAPIs pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set KubeappsAPIs pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled KubeappsAPIs containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set KubeappsAPIs container's Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set KubeappsAPIs container's Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 60
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "Custom lifecycle hooks for KubeappsAPIs containers",
                    "default": {}
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the KubeappsAPIs pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the KubeappsAPIs container(s)",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for KubeappsAPIs pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for KubeappsAPIs pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority class name for KubeappsAPIs pods",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Custom host aliases for KubeappsAPIs pods",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the KubeappsAPIs pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the KubeappsAPIs pod(s)",
                    "default": [],
                    "items": {}
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "KubeappsAPIs service HTTP port",
                                    "default": 8080
                                }
                            }
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for KubeappsAPIs service",
                            "default": {}
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "Name of the service account to use. If not set and create is true, a name is generated using the fullname template.",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                            "default": {}
                        }
                    }
                }
            }
        },
        "redis": {
            "type": "object",
            "properties": {
                "auth": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable password authentication",
                            "default": true
                        },
                        "password": {
                            "type": "string",
                            "description": "Redis&reg; password",
                            "default": ""
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "The name of an existing secret with Redis&reg; credentials",
                            "default": ""
                        }
                    }
                },
                "architecture": {
                    "type": "string",
                    "description": "Redis(R) architecture (`standalone` or `replication`)",
                    "default": "standalone"
                },
                "master": {
                    "type": "object",
                    "properties": {
                        "extraFlags": {
                            "type": "array",
                            "description": "Array with additional command line flags for Redis&reg; master",
                            "default": [
                                "--maxmemory 200mb",
                                "--maxmemory-policy allkeys-lru"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "disableCommands": {
                            "type": "array",
                            "description": "Array with commands to deactivate on Redis&reg;",
                            "default": [],
                            "items": {}
                        },
                        "persistence": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable Redis&reg; master data persistence using PVC",
                                    "default": false
                                }
                            }
                        }
                    }
                },
                "replica": {
                    "type": "object",
                    "properties": {
                        "replicaCount": {
                            "type": "number",
                            "description": "Number of Redis&reg; replicas to deploy",
                            "default": 1
                        },
                        "extraFlags": {
                            "type": "array",
                            "description": "Array with additional command line flags for Redis&reg; replicas",
                            "default": [
                                "--maxmemory 200mb",
                                "--maxmemory-policy allkeys-lru"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "disableCommands": {
                            "type": "array",
                            "description": "Array with commands to deactivate on Redis&reg;",
                            "default": [],
                            "items": {}
                        },
                        "persistence": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable Redis&reg; replica data persistence using PVC",
                                    "default": false
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}