// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders a basic deployment with a disk size 1`] = `
<BasicDeploymentForm
  appValues=""
  deploymentEvent="install"
  handleBasicFormParamChange={[MockFunction]}
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "size",
        "render": "slider",
        "type": "string",
        "value": "10Gi",
      },
    ]
  }
>
  <div
    className="deployment-form-tabs-data"
  >
    <div
      key="size-0"
    >
      <Param
        allParams={
          Array [
            Object {
              "path": "size",
              "render": "slider",
              "type": "string",
              "value": "10Gi",
            },
          ]
        }
        appValues=""
        deploymentEvent="install"
        handleBasicFormParamChange={[MockFunction]}
        handleValuesChange={[MockFunction]}
        id="size-0"
        param={
          Object {
            "path": "size",
            "render": "slider",
            "type": "string",
            "value": "10Gi",
          }
        }
        params={
          Array [
            Object {
              "path": "size",
              "render": "slider",
              "type": "string",
              "value": "10Gi",
            },
          ]
        }
      >
        <div
          className="basic-deployment-form-param"
          hidden={false}
          key="size-0"
        >
          <SliderParam
            handleBasicFormParamChange={[MockFunction]}
            id="size-0"
            label="size"
            max={1000}
            min={1}
            param={
              Object {
                "path": "size",
                "render": "slider",
                "type": "string",
                "value": "10Gi",
              }
            }
            step={1}
            unit=""
          >
            <div>
              <label
                htmlFor="size-0"
              >
                <span
                  className="centered deployment-form-label deployment-form-label-text-param"
                >
                  size
                </span>
                <div
                  className="slider-block"
                >
                  <div
                    className="slider-content"
                  >
                    <Slider
                      default={10}
                      max={1000}
                      min={1}
                      onChange={[Function]}
                      onUpdate={[Function]}
                      sliderStyle={
                        Object {
                          "margin": "1.2em 0 1.2em 0",
                          "width": "100%",
                        }
                      }
                      step={1}
                      values={10}
                    >
                      <Slider
                        domain={
                          Array [
                            1,
                            1000,
                          ]
                        }
                        mode={1}
                        onChange={[Function]}
                        onUpdate={[Function]}
                        rootStyle={
                          Object {
                            "margin": "1.2em 0 1.2em 0",
                            "position": "relative",
                            "width": "100%",
                          }
                        }
                        step={1}
                        values={
                          Array [
                            10,
                          ]
                        }
                      >
                        <div
                          style={
                            Object {
                              "margin": "1.2em 0 1.2em 0",
                              "position": "relative",
                              "width": "100%",
                            }
                          }
                        >
                          <Rail
                            activeHandleID=""
                            emitKeyboard={[Function]}
                            emitMouse={[Function]}
                            emitTouch={[Function]}
                            getEventData={[Function]}
                            handles={
                              Array [
                                Object {
                                  "id": "$$-0",
                                  "percent": 0.9009009009009009,
                                  "value": 10,
                                },
                              ]
                            }
                            key=".0"
                            scale={
                              LinearScale {
                                "domain": Array [
                                  1,
                                  1000,
                                ],
                                "interpolator": [Function],
                                "range": Array [
                                  0,
                                  100,
                                ],
                              }
                            }
                          >
                            <div
                              onMouseDown={[Function]}
                              onTouchStart={[Function]}
                              style={
                                Object {
                                  "backgroundColor": "rgb(155,155,155)",
                                  "borderRadius": 7,
                                  "cursor": "pointer",
                                  "height": 14,
                                  "position": "absolute",
                                  "width": "100%",
                                }
                              }
                            />
                          </Rail>
                          <Handles
                            activeHandleID=""
                            emitKeyboard={[Function]}
                            emitMouse={[Function]}
                            emitTouch={[Function]}
                            getEventData={[Function]}
                            handles={
                              Array [
                                Object {
                                  "id": "$$-0",
                                  "percent": 0.9009009009009009,
                                  "value": 10,
                                },
                              ]
                            }
                            key=".1"
                            scale={
                              LinearScale {
                                "domain": Array [
                                  1,
                                  1000,
                                ],
                                "interpolator": [Function],
                                "range": Array [
                                  0,
                                  100,
                                ],
                              }
                            }
                          >
                            <div
                              className="slider-handles"
                            >
                              <Handle
                                domain={
                                  Array [
                                    1,
                                    1000,
                                  ]
                                }
                                getHandleProps={[Function]}
                                handle={
                                  Object {
                                    "id": "$$-0",
                                    "percent": 0.9009009009009009,
                                    "value": 10,
                                  }
                                }
                                key="$$-0"
                              >
                                <div
                                  aria-valuemax={1000}
                                  aria-valuemin={1}
                                  aria-valuenow={10}
                                  onKeyDown={[Function]}
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                  role="slider"
                                  style={
                                    Object {
                                      "backgroundColor": "#34568f",
                                      "borderRadius": "50%",
                                      "boxShadow": "1px 1px 1px 1px rgba(0, 0, 0, 0.2)",
                                      "cursor": "pointer",
                                      "height": 24,
                                      "left": "0.9009009009009009%",
                                      "marginLeft": "-11px",
                                      "marginTop": "-6px",
                                      "position": "absolute",
                                      "width": 24,
                                      "zIndex": 2,
                                    }
                                  }
                                />
                              </Handle>
                            </div>
                          </Handles>
                          <Tracks
                            activeHandleID=""
                            emitKeyboard={[Function]}
                            emitMouse={[Function]}
                            emitTouch={[Function]}
                            getEventData={[Function]}
                            handles={
                              Array [
                                Object {
                                  "id": "$$-0",
                                  "percent": 0.9009009009009009,
                                  "value": 10,
                                },
                              ]
                            }
                            key=".2"
                            right={false}
                            scale={
                              LinearScale {
                                "domain": Array [
                                  1,
                                  1000,
                                ],
                                "interpolator": [Function],
                                "range": Array [
                                  0,
                                  100,
                                ],
                              }
                            }
                          >
                            <div
                              className="slider-tracks"
                            >
                              <Track
                                getTrackProps={[Function]}
                                key="$-$$-0"
                                source={
                                  Object {
                                    "id": "$",
                                    "percent": 0,
                                    "value": 1,
                                  }
                                }
                                target={
                                  Object {
                                    "id": "$$-0",
                                    "percent": 0.9009009009009009,
                                    "value": 10,
                                  }
                                }
                              >
                                <div
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                  style={
                                    Object {
                                      "backgroundColor": "#7aa0c4",
                                      "borderRadius": 7,
                                      "cursor": "pointer",
                                      "height": 14,
                                      "left": "0%",
                                      "position": "absolute",
                                      "width": "0.9009009009009009%",
                                      "zIndex": 1,
                                    }
                                  }
                                />
                              </Track>
                            </div>
                          </Tracks>
                        </div>
                      </Slider>
                    </Slider>
                  </div>
                  <div
                    className="slider-input-and-unit"
                  >
                    <input
                      className="slider-input clr-input"
                      id="size-0"
                      onChange={[Function]}
                      value={10}
                    />
                    <span
                      className="margin-l-normal"
                    />
                  </div>
                </div>
              </label>
            </div>
          </SliderParam>
        </div>
      </Param>
      <hr
        className="param-separator"
      />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a email 1`] = `
<BasicDeploymentForm
  appValues=""
  deploymentEvent="install"
  handleBasicFormParamChange={[MockFunction]}
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "wordpressEmail",
        "value": "user@example.com",
      },
    ]
  }
>
  <div
    className="deployment-form-tabs-data"
  >
    <div
      key="wordpressEmail-0"
    >
      <Param
        allParams={
          Array [
            Object {
              "path": "wordpressEmail",
              "value": "user@example.com",
            },
          ]
        }
        appValues=""
        deploymentEvent="install"
        handleBasicFormParamChange={[MockFunction]}
        handleValuesChange={[MockFunction]}
        id="wordpressEmail-0"
        param={
          Object {
            "path": "wordpressEmail",
            "value": "user@example.com",
          }
        }
        params={
          Array [
            Object {
              "path": "wordpressEmail",
              "value": "user@example.com",
            },
          ]
        }
      >
        <div
          className="basic-deployment-form-param"
          hidden={false}
          key="wordpressEmail-0"
        >
          <TextParam
            handleBasicFormParamChange={[MockFunction]}
            id="wordpressEmail-0"
            inputType="string"
            label="wordpressEmail"
            param={
              Object {
                "path": "wordpressEmail",
                "value": "user@example.com",
              }
            }
          >
            <div>
              <label
                className="centered deployment-form-label deployment-form-label-text-param"
                htmlFor="wordpressEmail-0"
              >
                wordpressEmail
              </label>
              <input
                className="clr-input deployment-form-text-input"
                id="wordpressEmail-0"
                onChange={[Function]}
                type="string"
                value="user@example.com"
              />
            </div>
          </TextParam>
        </div>
      </Param>
      <hr
        className="param-separator"
      />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a generic boolean 1`] = `
<BasicDeploymentForm
  appValues=""
  deploymentEvent="install"
  handleBasicFormParamChange={[MockFunction]}
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "enableMetrics",
        "type": "boolean",
        "value": true,
      },
    ]
  }
>
  <div
    className="deployment-form-tabs-data"
  >
    <div
      key="enableMetrics-0"
    >
      <Param
        allParams={
          Array [
            Object {
              "path": "enableMetrics",
              "type": "boolean",
              "value": true,
            },
          ]
        }
        appValues=""
        deploymentEvent="install"
        handleBasicFormParamChange={[MockFunction]}
        handleValuesChange={[MockFunction]}
        id="enableMetrics-0"
        param={
          Object {
            "path": "enableMetrics",
            "type": "boolean",
            "value": true,
          }
        }
        params={
          Array [
            Object {
              "path": "enableMetrics",
              "type": "boolean",
              "value": true,
            },
          ]
        }
      >
        <div
          className="basic-deployment-form-param"
          hidden={false}
          key="enableMetrics-0"
        >
          <BooleanParam
            handleBasicFormParamChange={[MockFunction]}
            id="enableMetrics-0"
            label="enableMetrics"
            param={
              Object {
                "path": "enableMetrics",
                "type": "boolean",
                "value": true,
              }
            }
          >
            <label
              htmlFor="enableMetrics-0"
            >
              <div>
                <ReactSwitch
                  activeBoxShadow="0 0 2px 3px #3bf"
                  boxShadow={null}
                  checked={true}
                  checkedIcon={false}
                  className="react-switch"
                  disabled={false}
                  height={20}
                  id="enableMetrics-0"
                  offColor="#888"
                  offHandleColor="#fff"
                  onChange={[Function]}
                  onColor="#5aa220"
                  onHandleColor="#fff"
                  uncheckedIcon={false}
                  width={40}
                >
                  <div
                    className="react-switch"
                    style={
                      Object {
                        "MozTransition": "opacity 0.25s",
                        "MozUserSelect": "none",
                        "WebkitTapHighlightColor": "rgba(0, 0, 0, 0)",
                        "WebkitTransition": "opacity 0.25s",
                        "WebkitUserSelect": "none",
                        "borderRadius": 10,
                        "direction": "ltr",
                        "display": "inline-block",
                        "msUserSelect": "none",
                        "opacity": 1,
                        "position": "relative",
                        "textAlign": "left",
                        "touchAction": "none",
                        "transition": "opacity 0.25s",
                        "userSelect": "none",
                      }
                    }
                  >
                    <div
                      className="react-switch-bg"
                      onClick={[Function]}
                      onMouseDown={[Function]}
                      style={
                        Object {
                          "MozTransition": "background 0.25s",
                          "WebkitTransition": "background 0.25s",
                          "background": "#5aa220",
                          "borderRadius": 10,
                          "cursor": "pointer",
                          "height": 20,
                          "margin": 0,
                          "position": "relative",
                          "transition": "background 0.25s",
                          "width": 40,
                        }
                      }
                    />
                    <div
                      className="react-switch-handle"
                      onClick={[Function]}
                      onMouseDown={[Function]}
                      onTouchCancel={[Function]}
                      onTouchEnd={[Function]}
                      onTouchMove={[Function]}
                      onTouchStart={[Function]}
                      style={
                        Object {
                          "MozTransition": "background-color 0.25s, transform 0.25s, box-shadow 0.15s",
                          "WebkitTransition": "background-color 0.25s, transform 0.25s, box-shadow 0.15s",
                          "background": "#ffffff",
                          "border": 0,
                          "borderRadius": "50%",
                          "boxShadow": null,
                          "cursor": "pointer",
                          "display": "inline-block",
                          "height": 18,
                          "outline": 0,
                          "position": "absolute",
                          "top": 1,
                          "transform": "translateX(21px)",
                          "transition": "background-color 0.25s, transform 0.25s, box-shadow 0.15s",
                          "width": 18,
                        }
                      }
                    />
                    <input
                      aria-checked={true}
                      checked={true}
                      disabled={false}
                      id="enableMetrics-0"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      onKeyUp={[Function]}
                      role="switch"
                      style={
                        Object {
                          "border": 0,
                          "clip": "rect(0 0 0 0)",
                          "height": 1,
                          "margin": -1,
                          "overflow": "hidden",
                          "padding": 0,
                          "position": "absolute",
                          "width": 1,
                        }
                      }
                      type="checkbox"
                    />
                  </div>
                </ReactSwitch>
                <span
                  className="deployment-form-label"
                >
                  enableMetrics
                </span>
              </div>
            </label>
          </BooleanParam>
        </div>
      </Param>
      <hr
        className="param-separator"
      />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a generic number 1`] = `
<BasicDeploymentForm
  appValues=""
  deploymentEvent="install"
  handleBasicFormParamChange={[MockFunction]}
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "replicas",
        "type": "integer",
        "value": 1,
      },
    ]
  }
>
  <div
    className="deployment-form-tabs-data"
  >
    <div
      key="replicas-0"
    >
      <Param
        allParams={
          Array [
            Object {
              "path": "replicas",
              "type": "integer",
              "value": 1,
            },
          ]
        }
        appValues=""
        deploymentEvent="install"
        handleBasicFormParamChange={[MockFunction]}
        handleValuesChange={[MockFunction]}
        id="replicas-0"
        param={
          Object {
            "path": "replicas",
            "type": "integer",
            "value": 1,
          }
        }
        params={
          Array [
            Object {
              "path": "replicas",
              "type": "integer",
              "value": 1,
            },
          ]
        }
      >
        <div
          className="basic-deployment-form-param"
          hidden={false}
          key="replicas-0"
        >
          <TextParam
            handleBasicFormParamChange={[MockFunction]}
            id="replicas-0"
            inputType="number"
            label="replicas"
            param={
              Object {
                "path": "replicas",
                "type": "integer",
                "value": 1,
              }
            }
          >
            <div>
              <label
                className="centered deployment-form-label deployment-form-label-text-param"
                htmlFor="replicas-0"
              >
                replicas
              </label>
              <input
                className="clr-input deployment-form-text-input"
                id="replicas-0"
                onChange={[Function]}
                type="number"
                value={1}
              />
            </div>
          </TextParam>
        </div>
      </Param>
      <hr
        className="param-separator"
      />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a generic string 1`] = `
<BasicDeploymentForm
  appValues=""
  deploymentEvent="install"
  handleBasicFormParamChange={[MockFunction]}
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "blogName",
        "type": "string",
        "value": "my-blog",
      },
    ]
  }
>
  <div
    className="deployment-form-tabs-data"
  >
    <div
      key="blogName-0"
    >
      <Param
        allParams={
          Array [
            Object {
              "path": "blogName",
              "type": "string",
              "value": "my-blog",
            },
          ]
        }
        appValues=""
        deploymentEvent="install"
        handleBasicFormParamChange={[MockFunction]}
        handleValuesChange={[MockFunction]}
        id="blogName-0"
        param={
          Object {
            "path": "blogName",
            "type": "string",
            "value": "my-blog",
          }
        }
        params={
          Array [
            Object {
              "path": "blogName",
              "type": "string",
              "value": "my-blog",
            },
          ]
        }
      >
        <div
          className="basic-deployment-form-param"
          hidden={false}
          key="blogName-0"
        >
          <TextParam
            handleBasicFormParamChange={[MockFunction]}
            id="blogName-0"
            inputType="string"
            label="blogName"
            param={
              Object {
                "path": "blogName",
                "type": "string",
                "value": "my-blog",
              }
            }
          >
            <div>
              <label
                className="centered deployment-form-label deployment-form-label-text-param"
                htmlFor="blogName-0"
              >
                blogName
              </label>
              <input
                className="clr-input deployment-form-text-input"
                id="blogName-0"
                onChange={[Function]}
                type="string"
                value="my-blog"
              />
            </div>
          </TextParam>
        </div>
      </Param>
      <hr
        className="param-separator"
      />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a integer disk size 1`] = `
<BasicDeploymentForm
  appValues=""
  deploymentEvent="install"
  handleBasicFormParamChange={[MockFunction]}
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "size",
        "render": "slider",
        "type": "integer",
        "value": 10,
      },
    ]
  }
>
  <div
    className="deployment-form-tabs-data"
  >
    <div
      key="size-0"
    >
      <Param
        allParams={
          Array [
            Object {
              "path": "size",
              "render": "slider",
              "type": "integer",
              "value": 10,
            },
          ]
        }
        appValues=""
        deploymentEvent="install"
        handleBasicFormParamChange={[MockFunction]}
        handleValuesChange={[MockFunction]}
        id="size-0"
        param={
          Object {
            "path": "size",
            "render": "slider",
            "type": "integer",
            "value": 10,
          }
        }
        params={
          Array [
            Object {
              "path": "size",
              "render": "slider",
              "type": "integer",
              "value": 10,
            },
          ]
        }
      >
        <div
          className="basic-deployment-form-param"
          hidden={false}
          key="size-0"
        >
          <SliderParam
            handleBasicFormParamChange={[MockFunction]}
            id="size-0"
            label="size"
            max={1000}
            min={1}
            param={
              Object {
                "path": "size",
                "render": "slider",
                "type": "integer",
                "value": 10,
              }
            }
            step={1}
            unit=""
          >
            <div>
              <label
                htmlFor="size-0"
              >
                <span
                  className="centered deployment-form-label deployment-form-label-text-param"
                >
                  size
                </span>
                <div
                  className="slider-block"
                >
                  <div
                    className="slider-content"
                  >
                    <Slider
                      default={10}
                      max={1000}
                      min={1}
                      onChange={[Function]}
                      onUpdate={[Function]}
                      sliderStyle={
                        Object {
                          "margin": "1.2em 0 1.2em 0",
                          "width": "100%",
                        }
                      }
                      step={1}
                      values={10}
                    >
                      <Slider
                        domain={
                          Array [
                            1,
                            1000,
                          ]
                        }
                        mode={1}
                        onChange={[Function]}
                        onUpdate={[Function]}
                        rootStyle={
                          Object {
                            "margin": "1.2em 0 1.2em 0",
                            "position": "relative",
                            "width": "100%",
                          }
                        }
                        step={1}
                        values={
                          Array [
                            10,
                          ]
                        }
                      >
                        <div
                          style={
                            Object {
                              "margin": "1.2em 0 1.2em 0",
                              "position": "relative",
                              "width": "100%",
                            }
                          }
                        >
                          <Rail
                            activeHandleID=""
                            emitKeyboard={[Function]}
                            emitMouse={[Function]}
                            emitTouch={[Function]}
                            getEventData={[Function]}
                            handles={
                              Array [
                                Object {
                                  "id": "$$-0",
                                  "percent": 0.9009009009009009,
                                  "value": 10,
                                },
                              ]
                            }
                            key=".0"
                            scale={
                              LinearScale {
                                "domain": Array [
                                  1,
                                  1000,
                                ],
                                "interpolator": [Function],
                                "range": Array [
                                  0,
                                  100,
                                ],
                              }
                            }
                          >
                            <div
                              onMouseDown={[Function]}
                              onTouchStart={[Function]}
                              style={
                                Object {
                                  "backgroundColor": "rgb(155,155,155)",
                                  "borderRadius": 7,
                                  "cursor": "pointer",
                                  "height": 14,
                                  "position": "absolute",
                                  "width": "100%",
                                }
                              }
                            />
                          </Rail>
                          <Handles
                            activeHandleID=""
                            emitKeyboard={[Function]}
                            emitMouse={[Function]}
                            emitTouch={[Function]}
                            getEventData={[Function]}
                            handles={
                              Array [
                                Object {
                                  "id": "$$-0",
                                  "percent": 0.9009009009009009,
                                  "value": 10,
                                },
                              ]
                            }
                            key=".1"
                            scale={
                              LinearScale {
                                "domain": Array [
                                  1,
                                  1000,
                                ],
                                "interpolator": [Function],
                                "range": Array [
                                  0,
                                  100,
                                ],
                              }
                            }
                          >
                            <div
                              className="slider-handles"
                            >
                              <Handle
                                domain={
                                  Array [
                                    1,
                                    1000,
                                  ]
                                }
                                getHandleProps={[Function]}
                                handle={
                                  Object {
                                    "id": "$$-0",
                                    "percent": 0.9009009009009009,
                                    "value": 10,
                                  }
                                }
                                key="$$-0"
                              >
                                <div
                                  aria-valuemax={1000}
                                  aria-valuemin={1}
                                  aria-valuenow={10}
                                  onKeyDown={[Function]}
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                  role="slider"
                                  style={
                                    Object {
                                      "backgroundColor": "#34568f",
                                      "borderRadius": "50%",
                                      "boxShadow": "1px 1px 1px 1px rgba(0, 0, 0, 0.2)",
                                      "cursor": "pointer",
                                      "height": 24,
                                      "left": "0.9009009009009009%",
                                      "marginLeft": "-11px",
                                      "marginTop": "-6px",
                                      "position": "absolute",
                                      "width": 24,
                                      "zIndex": 2,
                                    }
                                  }
                                />
                              </Handle>
                            </div>
                          </Handles>
                          <Tracks
                            activeHandleID=""
                            emitKeyboard={[Function]}
                            emitMouse={[Function]}
                            emitTouch={[Function]}
                            getEventData={[Function]}
                            handles={
                              Array [
                                Object {
                                  "id": "$$-0",
                                  "percent": 0.9009009009009009,
                                  "value": 10,
                                },
                              ]
                            }
                            key=".2"
                            right={false}
                            scale={
                              LinearScale {
                                "domain": Array [
                                  1,
                                  1000,
                                ],
                                "interpolator": [Function],
                                "range": Array [
                                  0,
                                  100,
                                ],
                              }
                            }
                          >
                            <div
                              className="slider-tracks"
                            >
                              <Track
                                getTrackProps={[Function]}
                                key="$-$$-0"
                                source={
                                  Object {
                                    "id": "$",
                                    "percent": 0,
                                    "value": 1,
                                  }
                                }
                                target={
                                  Object {
                                    "id": "$$-0",
                                    "percent": 0.9009009009009009,
                                    "value": 10,
                                  }
                                }
                              >
                                <div
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                  style={
                                    Object {
                                      "backgroundColor": "#7aa0c4",
                                      "borderRadius": 7,
                                      "cursor": "pointer",
                                      "height": 14,
                                      "left": "0%",
                                      "position": "absolute",
                                      "width": "0.9009009009009009%",
                                      "zIndex": 1,
                                    }
                                  }
                                />
                              </Track>
                            </div>
                          </Tracks>
                        </div>
                      </Slider>
                    </Slider>
                  </div>
                  <div
                    className="slider-input-and-unit"
                  >
                    <input
                      className="slider-input clr-input"
                      id="size-0"
                      onChange={[Function]}
                      value={10}
                    />
                    <span
                      className="margin-l-normal"
                    />
                  </div>
                </div>
              </label>
            </div>
          </SliderParam>
        </div>
      </Param>
      <hr
        className="param-separator"
      />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a number disk size 1`] = `
<BasicDeploymentForm
  appValues=""
  deploymentEvent="install"
  handleBasicFormParamChange={[MockFunction]}
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "size",
        "render": "slider",
        "type": "number",
        "value": 10,
      },
    ]
  }
>
  <div
    className="deployment-form-tabs-data"
  >
    <div
      key="size-0"
    >
      <Param
        allParams={
          Array [
            Object {
              "path": "size",
              "render": "slider",
              "type": "number",
              "value": 10,
            },
          ]
        }
        appValues=""
        deploymentEvent="install"
        handleBasicFormParamChange={[MockFunction]}
        handleValuesChange={[MockFunction]}
        id="size-0"
        param={
          Object {
            "path": "size",
            "render": "slider",
            "type": "number",
            "value": 10,
          }
        }
        params={
          Array [
            Object {
              "path": "size",
              "render": "slider",
              "type": "number",
              "value": 10,
            },
          ]
        }
      >
        <div
          className="basic-deployment-form-param"
          hidden={false}
          key="size-0"
        >
          <SliderParam
            handleBasicFormParamChange={[MockFunction]}
            id="size-0"
            label="size"
            max={1000}
            min={1}
            param={
              Object {
                "path": "size",
                "render": "slider",
                "type": "number",
                "value": 10,
              }
            }
            step={1}
            unit=""
          >
            <div>
              <label
                htmlFor="size-0"
              >
                <span
                  className="centered deployment-form-label deployment-form-label-text-param"
                >
                  size
                </span>
                <div
                  className="slider-block"
                >
                  <div
                    className="slider-content"
                  >
                    <Slider
                      default={10}
                      max={1000}
                      min={1}
                      onChange={[Function]}
                      onUpdate={[Function]}
                      sliderStyle={
                        Object {
                          "margin": "1.2em 0 1.2em 0",
                          "width": "100%",
                        }
                      }
                      step={1}
                      values={10}
                    >
                      <Slider
                        domain={
                          Array [
                            1,
                            1000,
                          ]
                        }
                        mode={1}
                        onChange={[Function]}
                        onUpdate={[Function]}
                        rootStyle={
                          Object {
                            "margin": "1.2em 0 1.2em 0",
                            "position": "relative",
                            "width": "100%",
                          }
                        }
                        step={1}
                        values={
                          Array [
                            10,
                          ]
                        }
                      >
                        <div
                          style={
                            Object {
                              "margin": "1.2em 0 1.2em 0",
                              "position": "relative",
                              "width": "100%",
                            }
                          }
                        >
                          <Rail
                            activeHandleID=""
                            emitKeyboard={[Function]}
                            emitMouse={[Function]}
                            emitTouch={[Function]}
                            getEventData={[Function]}
                            handles={
                              Array [
                                Object {
                                  "id": "$$-0",
                                  "percent": 0.9009009009009009,
                                  "value": 10,
                                },
                              ]
                            }
                            key=".0"
                            scale={
                              LinearScale {
                                "domain": Array [
                                  1,
                                  1000,
                                ],
                                "interpolator": [Function],
                                "range": Array [
                                  0,
                                  100,
                                ],
                              }
                            }
                          >
                            <div
                              onMouseDown={[Function]}
                              onTouchStart={[Function]}
                              style={
                                Object {
                                  "backgroundColor": "rgb(155,155,155)",
                                  "borderRadius": 7,
                                  "cursor": "pointer",
                                  "height": 14,
                                  "position": "absolute",
                                  "width": "100%",
                                }
                              }
                            />
                          </Rail>
                          <Handles
                            activeHandleID=""
                            emitKeyboard={[Function]}
                            emitMouse={[Function]}
                            emitTouch={[Function]}
                            getEventData={[Function]}
                            handles={
                              Array [
                                Object {
                                  "id": "$$-0",
                                  "percent": 0.9009009009009009,
                                  "value": 10,
                                },
                              ]
                            }
                            key=".1"
                            scale={
                              LinearScale {
                                "domain": Array [
                                  1,
                                  1000,
                                ],
                                "interpolator": [Function],
                                "range": Array [
                                  0,
                                  100,
                                ],
                              }
                            }
                          >
                            <div
                              className="slider-handles"
                            >
                              <Handle
                                domain={
                                  Array [
                                    1,
                                    1000,
                                  ]
                                }
                                getHandleProps={[Function]}
                                handle={
                                  Object {
                                    "id": "$$-0",
                                    "percent": 0.9009009009009009,
                                    "value": 10,
                                  }
                                }
                                key="$$-0"
                              >
                                <div
                                  aria-valuemax={1000}
                                  aria-valuemin={1}
                                  aria-valuenow={10}
                                  onKeyDown={[Function]}
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                  role="slider"
                                  style={
                                    Object {
                                      "backgroundColor": "#34568f",
                                      "borderRadius": "50%",
                                      "boxShadow": "1px 1px 1px 1px rgba(0, 0, 0, 0.2)",
                                      "cursor": "pointer",
                                      "height": 24,
                                      "left": "0.9009009009009009%",
                                      "marginLeft": "-11px",
                                      "marginTop": "-6px",
                                      "position": "absolute",
                                      "width": 24,
                                      "zIndex": 2,
                                    }
                                  }
                                />
                              </Handle>
                            </div>
                          </Handles>
                          <Tracks
                            activeHandleID=""
                            emitKeyboard={[Function]}
                            emitMouse={[Function]}
                            emitTouch={[Function]}
                            getEventData={[Function]}
                            handles={
                              Array [
                                Object {
                                  "id": "$$-0",
                                  "percent": 0.9009009009009009,
                                  "value": 10,
                                },
                              ]
                            }
                            key=".2"
                            right={false}
                            scale={
                              LinearScale {
                                "domain": Array [
                                  1,
                                  1000,
                                ],
                                "interpolator": [Function],
                                "range": Array [
                                  0,
                                  100,
                                ],
                              }
                            }
                          >
                            <div
                              className="slider-tracks"
                            >
                              <Track
                                getTrackProps={[Function]}
                                key="$-$$-0"
                                source={
                                  Object {
                                    "id": "$",
                                    "percent": 0,
                                    "value": 1,
                                  }
                                }
                                target={
                                  Object {
                                    "id": "$$-0",
                                    "percent": 0.9009009009009009,
                                    "value": 10,
                                  }
                                }
                              >
                                <div
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                  style={
                                    Object {
                                      "backgroundColor": "#7aa0c4",
                                      "borderRadius": 7,
                                      "cursor": "pointer",
                                      "height": 14,
                                      "left": "0%",
                                      "position": "absolute",
                                      "width": "0.9009009009009009%",
                                      "zIndex": 1,
                                    }
                                  }
                                />
                              </Track>
                            </div>
                          </Tracks>
                        </div>
                      </Slider>
                    </Slider>
                  </div>
                  <div
                    className="slider-input-and-unit"
                  >
                    <input
                      className="slider-input clr-input"
                      id="size-0"
                      onChange={[Function]}
                      value={10}
                    />
                    <span
                      className="margin-l-normal"
                    />
                  </div>
                </div>
              </label>
            </div>
          </SliderParam>
        </div>
      </Param>
      <hr
        className="param-separator"
      />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a password 1`] = `
<BasicDeploymentForm
  appValues=""
  deploymentEvent="install"
  handleBasicFormParamChange={[MockFunction]}
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "wordpressPassword",
        "value": "sserpdrow",
      },
    ]
  }
>
  <div
    className="deployment-form-tabs-data"
  >
    <div
      key="wordpressPassword-0"
    >
      <Param
        allParams={
          Array [
            Object {
              "path": "wordpressPassword",
              "value": "sserpdrow",
            },
          ]
        }
        appValues=""
        deploymentEvent="install"
        handleBasicFormParamChange={[MockFunction]}
        handleValuesChange={[MockFunction]}
        id="wordpressPassword-0"
        param={
          Object {
            "path": "wordpressPassword",
            "value": "sserpdrow",
          }
        }
        params={
          Array [
            Object {
              "path": "wordpressPassword",
              "value": "sserpdrow",
            },
          ]
        }
      >
        <div
          className="basic-deployment-form-param"
          hidden={false}
          key="wordpressPassword-0"
        >
          <TextParam
            handleBasicFormParamChange={[MockFunction]}
            id="wordpressPassword-0"
            inputType="string"
            label="wordpressPassword"
            param={
              Object {
                "path": "wordpressPassword",
                "value": "sserpdrow",
              }
            }
          >
            <div>
              <label
                className="centered deployment-form-label deployment-form-label-text-param"
                htmlFor="wordpressPassword-0"
              >
                wordpressPassword
              </label>
              <input
                className="clr-input deployment-form-text-input"
                id="wordpressPassword-0"
                onChange={[Function]}
                type="string"
                value="sserpdrow"
              />
            </div>
          </TextParam>
        </div>
      </Param>
      <hr
        className="param-separator"
      />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a username 1`] = `
<BasicDeploymentForm
  appValues=""
  deploymentEvent="install"
  handleBasicFormParamChange={[MockFunction]}
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "wordpressUsername",
        "value": "user",
      },
    ]
  }
>
  <div
    className="deployment-form-tabs-data"
  >
    <div
      key="wordpressUsername-0"
    >
      <Param
        allParams={
          Array [
            Object {
              "path": "wordpressUsername",
              "value": "user",
            },
          ]
        }
        appValues=""
        deploymentEvent="install"
        handleBasicFormParamChange={[MockFunction]}
        handleValuesChange={[MockFunction]}
        id="wordpressUsername-0"
        param={
          Object {
            "path": "wordpressUsername",
            "value": "user",
          }
        }
        params={
          Array [
            Object {
              "path": "wordpressUsername",
              "value": "user",
            },
          ]
        }
      >
        <div
          className="basic-deployment-form-param"
          hidden={false}
          key="wordpressUsername-0"
        >
          <TextParam
            handleBasicFormParamChange={[MockFunction]}
            id="wordpressUsername-0"
            inputType="string"
            label="wordpressUsername"
            param={
              Object {
                "path": "wordpressUsername",
                "value": "user",
              }
            }
          >
            <div>
              <label
                className="centered deployment-form-label deployment-form-label-text-param"
                htmlFor="wordpressUsername-0"
              >
                wordpressUsername
              </label>
              <input
                className="clr-input deployment-form-text-input"
                id="wordpressUsername-0"
                onChange={[Function]}
                type="string"
                value="user"
              />
            </div>
          </TextParam>
        </div>
      </Param>
      <hr
        className="param-separator"
      />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with custom configuration 1`] = `
<BasicDeploymentForm
  appValues=""
  deploymentEvent="install"
  handleBasicFormParamChange={[MockFunction]}
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "configuration",
        "render": "textArea",
        "type": "string",
        "value": "First line
Second line",
      },
    ]
  }
>
  <div
    className="deployment-form-tabs-data"
  >
    <div
      key="configuration-0"
    >
      <Param
        allParams={
          Array [
            Object {
              "path": "configuration",
              "render": "textArea",
              "type": "string",
              "value": "First line
Second line",
            },
          ]
        }
        appValues=""
        deploymentEvent="install"
        handleBasicFormParamChange={[MockFunction]}
        handleValuesChange={[MockFunction]}
        id="configuration-0"
        param={
          Object {
            "path": "configuration",
            "render": "textArea",
            "type": "string",
            "value": "First line
Second line",
          }
        }
        params={
          Array [
            Object {
              "path": "configuration",
              "render": "textArea",
              "type": "string",
              "value": "First line
Second line",
            },
          ]
        }
      >
        <div
          className="basic-deployment-form-param"
          hidden={false}
          key="configuration-0"
        >
          <TextParam
            handleBasicFormParamChange={[MockFunction]}
            id="configuration-0"
            inputType="textarea"
            label="configuration"
            param={
              Object {
                "path": "configuration",
                "render": "textArea",
                "type": "string",
                "value": "First line
Second line",
              }
            }
          >
            <div>
              <label
                className="centered deployment-form-label deployment-form-label-text-param"
                htmlFor="configuration-0"
              >
                configuration
              </label>
              <textarea
                id="configuration-0"
                onChange={[Function]}
                value="First line
Second line"
              />
            </div>
          </TextParam>
        </div>
      </Param>
      <hr
        className="param-separator"
      />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with slider parameters 1`] = `
<BasicDeploymentForm
  appValues=""
  deploymentEvent="install"
  handleBasicFormParamChange={[MockFunction]}
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "size",
        "render": "slider",
        "sliderMax": 100,
        "sliderMin": 1,
        "sliderStep": 1,
        "sliderUnit": "Gi",
        "type": "string",
        "value": "10Gi",
      },
    ]
  }
>
  <div
    className="deployment-form-tabs-data"
  >
    <div
      key="size-0"
    >
      <Param
        allParams={
          Array [
            Object {
              "path": "size",
              "render": "slider",
              "sliderMax": 100,
              "sliderMin": 1,
              "sliderStep": 1,
              "sliderUnit": "Gi",
              "type": "string",
              "value": "10Gi",
            },
          ]
        }
        appValues=""
        deploymentEvent="install"
        handleBasicFormParamChange={[MockFunction]}
        handleValuesChange={[MockFunction]}
        id="size-0"
        param={
          Object {
            "path": "size",
            "render": "slider",
            "sliderMax": 100,
            "sliderMin": 1,
            "sliderStep": 1,
            "sliderUnit": "Gi",
            "type": "string",
            "value": "10Gi",
          }
        }
        params={
          Array [
            Object {
              "path": "size",
              "render": "slider",
              "sliderMax": 100,
              "sliderMin": 1,
              "sliderStep": 1,
              "sliderUnit": "Gi",
              "type": "string",
              "value": "10Gi",
            },
          ]
        }
      >
        <div
          className="basic-deployment-form-param"
          hidden={false}
          key="size-0"
        >
          <SliderParam
            handleBasicFormParamChange={[MockFunction]}
            id="size-0"
            label="size"
            max={100}
            min={1}
            param={
              Object {
                "path": "size",
                "render": "slider",
                "sliderMax": 100,
                "sliderMin": 1,
                "sliderStep": 1,
                "sliderUnit": "Gi",
                "type": "string",
                "value": "10Gi",
              }
            }
            step={1}
            unit="Gi"
          >
            <div>
              <label
                htmlFor="size-0"
              >
                <span
                  className="centered deployment-form-label deployment-form-label-text-param"
                >
                  size
                </span>
                <div
                  className="slider-block"
                >
                  <div
                    className="slider-content"
                  >
                    <Slider
                      default={10}
                      max={100}
                      min={1}
                      onChange={[Function]}
                      onUpdate={[Function]}
                      sliderStyle={
                        Object {
                          "margin": "1.2em 0 1.2em 0",
                          "width": "100%",
                        }
                      }
                      step={1}
                      values={10}
                    >
                      <Slider
                        domain={
                          Array [
                            1,
                            100,
                          ]
                        }
                        mode={1}
                        onChange={[Function]}
                        onUpdate={[Function]}
                        rootStyle={
                          Object {
                            "margin": "1.2em 0 1.2em 0",
                            "position": "relative",
                            "width": "100%",
                          }
                        }
                        step={1}
                        values={
                          Array [
                            10,
                          ]
                        }
                      >
                        <div
                          style={
                            Object {
                              "margin": "1.2em 0 1.2em 0",
                              "position": "relative",
                              "width": "100%",
                            }
                          }
                        >
                          <Rail
                            activeHandleID=""
                            emitKeyboard={[Function]}
                            emitMouse={[Function]}
                            emitTouch={[Function]}
                            getEventData={[Function]}
                            handles={
                              Array [
                                Object {
                                  "id": "$$-0",
                                  "percent": 9.090909090909092,
                                  "value": 10,
                                },
                              ]
                            }
                            key=".0"
                            scale={
                              LinearScale {
                                "domain": Array [
                                  1,
                                  100,
                                ],
                                "interpolator": [Function],
                                "range": Array [
                                  0,
                                  100,
                                ],
                              }
                            }
                          >
                            <div
                              onMouseDown={[Function]}
                              onTouchStart={[Function]}
                              style={
                                Object {
                                  "backgroundColor": "rgb(155,155,155)",
                                  "borderRadius": 7,
                                  "cursor": "pointer",
                                  "height": 14,
                                  "position": "absolute",
                                  "width": "100%",
                                }
                              }
                            />
                          </Rail>
                          <Handles
                            activeHandleID=""
                            emitKeyboard={[Function]}
                            emitMouse={[Function]}
                            emitTouch={[Function]}
                            getEventData={[Function]}
                            handles={
                              Array [
                                Object {
                                  "id": "$$-0",
                                  "percent": 9.090909090909092,
                                  "value": 10,
                                },
                              ]
                            }
                            key=".1"
                            scale={
                              LinearScale {
                                "domain": Array [
                                  1,
                                  100,
                                ],
                                "interpolator": [Function],
                                "range": Array [
                                  0,
                                  100,
                                ],
                              }
                            }
                          >
                            <div
                              className="slider-handles"
                            >
                              <Handle
                                domain={
                                  Array [
                                    1,
                                    100,
                                  ]
                                }
                                getHandleProps={[Function]}
                                handle={
                                  Object {
                                    "id": "$$-0",
                                    "percent": 9.090909090909092,
                                    "value": 10,
                                  }
                                }
                                key="$$-0"
                              >
                                <div
                                  aria-valuemax={100}
                                  aria-valuemin={1}
                                  aria-valuenow={10}
                                  onKeyDown={[Function]}
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                  role="slider"
                                  style={
                                    Object {
                                      "backgroundColor": "#34568f",
                                      "borderRadius": "50%",
                                      "boxShadow": "1px 1px 1px 1px rgba(0, 0, 0, 0.2)",
                                      "cursor": "pointer",
                                      "height": 24,
                                      "left": "9.090909090909092%",
                                      "marginLeft": "-11px",
                                      "marginTop": "-6px",
                                      "position": "absolute",
                                      "width": 24,
                                      "zIndex": 2,
                                    }
                                  }
                                />
                              </Handle>
                            </div>
                          </Handles>
                          <Tracks
                            activeHandleID=""
                            emitKeyboard={[Function]}
                            emitMouse={[Function]}
                            emitTouch={[Function]}
                            getEventData={[Function]}
                            handles={
                              Array [
                                Object {
                                  "id": "$$-0",
                                  "percent": 9.090909090909092,
                                  "value": 10,
                                },
                              ]
                            }
                            key=".2"
                            right={false}
                            scale={
                              LinearScale {
                                "domain": Array [
                                  1,
                                  100,
                                ],
                                "interpolator": [Function],
                                "range": Array [
                                  0,
                                  100,
                                ],
                              }
                            }
                          >
                            <div
                              className="slider-tracks"
                            >
                              <Track
                                getTrackProps={[Function]}
                                key="$-$$-0"
                                source={
                                  Object {
                                    "id": "$",
                                    "percent": 0,
                                    "value": 1,
                                  }
                                }
                                target={
                                  Object {
                                    "id": "$$-0",
                                    "percent": 9.090909090909092,
                                    "value": 10,
                                  }
                                }
                              >
                                <div
                                  onMouseDown={[Function]}
                                  onTouchStart={[Function]}
                                  style={
                                    Object {
                                      "backgroundColor": "#7aa0c4",
                                      "borderRadius": 7,
                                      "cursor": "pointer",
                                      "height": 14,
                                      "left": "0%",
                                      "position": "absolute",
                                      "width": "9.090909090909092%",
                                      "zIndex": 1,
                                    }
                                  }
                                />
                              </Track>
                            </div>
                          </Tracks>
                        </div>
                      </Slider>
                    </Slider>
                  </div>
                  <div
                    className="slider-input-and-unit"
                  >
                    <input
                      className="slider-input clr-input"
                      id="size-0"
                      onChange={[Function]}
                      value={10}
                    />
                    <span
                      className="margin-l-normal"
                    >
                      Gi
                    </span>
                  </div>
                </div>
              </label>
            </div>
          </SliderParam>
        </div>
      </Param>
      <hr
        className="param-separator"
      />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with username, password, email and a generic string 1`] = `
<BasicDeploymentForm
  appValues=""
  deploymentEvent="install"
  handleBasicFormParamChange={[MockFunction]}
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "wordpressUsername",
        "value": "user",
      },
      Object {
        "path": "wordpressPassword",
        "value": "sserpdrow",
      },
      Object {
        "path": "wordpressEmail",
        "value": "user@example.com",
      },
      Object {
        "path": "blogName",
        "type": "string",
        "value": "my-blog",
      },
    ]
  }
>
  <div
    className="deployment-form-tabs-data"
  >
    <div
      key="wordpressUsername-0"
    >
      <Param
        allParams={
          Array [
            Object {
              "path": "wordpressUsername",
              "value": "user",
            },
            Object {
              "path": "wordpressPassword",
              "value": "sserpdrow",
            },
            Object {
              "path": "wordpressEmail",
              "value": "user@example.com",
            },
            Object {
              "path": "blogName",
              "type": "string",
              "value": "my-blog",
            },
          ]
        }
        appValues=""
        deploymentEvent="install"
        handleBasicFormParamChange={[MockFunction]}
        handleValuesChange={[MockFunction]}
        id="wordpressUsername-0"
        param={
          Object {
            "path": "wordpressUsername",
            "value": "user",
          }
        }
        params={
          Array [
            Object {
              "path": "wordpressUsername",
              "value": "user",
            },
            Object {
              "path": "wordpressPassword",
              "value": "sserpdrow",
            },
            Object {
              "path": "wordpressEmail",
              "value": "user@example.com",
            },
            Object {
              "path": "blogName",
              "type": "string",
              "value": "my-blog",
            },
          ]
        }
      >
        <div
          className="basic-deployment-form-param"
          hidden={false}
          key="wordpressUsername-0"
        >
          <TextParam
            handleBasicFormParamChange={[MockFunction]}
            id="wordpressUsername-0"
            inputType="string"
            label="wordpressUsername"
            param={
              Object {
                "path": "wordpressUsername",
                "value": "user",
              }
            }
          >
            <div>
              <label
                className="centered deployment-form-label deployment-form-label-text-param"
                htmlFor="wordpressUsername-0"
              >
                wordpressUsername
              </label>
              <input
                className="clr-input deployment-form-text-input"
                id="wordpressUsername-0"
                onChange={[Function]}
                type="string"
                value="user"
              />
            </div>
          </TextParam>
        </div>
      </Param>
      <hr
        className="param-separator"
      />
    </div>
    <div
      key="wordpressPassword-1"
    >
      <Param
        allParams={
          Array [
            Object {
              "path": "wordpressUsername",
              "value": "user",
            },
            Object {
              "path": "wordpressPassword",
              "value": "sserpdrow",
            },
            Object {
              "path": "wordpressEmail",
              "value": "user@example.com",
            },
            Object {
              "path": "blogName",
              "type": "string",
              "value": "my-blog",
            },
          ]
        }
        appValues=""
        deploymentEvent="install"
        handleBasicFormParamChange={[MockFunction]}
        handleValuesChange={[MockFunction]}
        id="wordpressPassword-1"
        param={
          Object {
            "path": "wordpressPassword",
            "value": "sserpdrow",
          }
        }
        params={
          Array [
            Object {
              "path": "wordpressUsername",
              "value": "user",
            },
            Object {
              "path": "wordpressPassword",
              "value": "sserpdrow",
            },
            Object {
              "path": "wordpressEmail",
              "value": "user@example.com",
            },
            Object {
              "path": "blogName",
              "type": "string",
              "value": "my-blog",
            },
          ]
        }
      >
        <div
          className="basic-deployment-form-param"
          hidden={false}
          key="wordpressPassword-1"
        >
          <TextParam
            handleBasicFormParamChange={[MockFunction]}
            id="wordpressPassword-1"
            inputType="string"
            label="wordpressPassword"
            param={
              Object {
                "path": "wordpressPassword",
                "value": "sserpdrow",
              }
            }
          >
            <div>
              <label
                className="centered deployment-form-label deployment-form-label-text-param"
                htmlFor="wordpressPassword-1"
              >
                wordpressPassword
              </label>
              <input
                className="clr-input deployment-form-text-input"
                id="wordpressPassword-1"
                onChange={[Function]}
                type="string"
                value="sserpdrow"
              />
            </div>
          </TextParam>
        </div>
      </Param>
      <hr
        className="param-separator"
      />
    </div>
    <div
      key="wordpressEmail-2"
    >
      <Param
        allParams={
          Array [
            Object {
              "path": "wordpressUsername",
              "value": "user",
            },
            Object {
              "path": "wordpressPassword",
              "value": "sserpdrow",
            },
            Object {
              "path": "wordpressEmail",
              "value": "user@example.com",
            },
            Object {
              "path": "blogName",
              "type": "string",
              "value": "my-blog",
            },
          ]
        }
        appValues=""
        deploymentEvent="install"
        handleBasicFormParamChange={[MockFunction]}
        handleValuesChange={[MockFunction]}
        id="wordpressEmail-2"
        param={
          Object {
            "path": "wordpressEmail",
            "value": "user@example.com",
          }
        }
        params={
          Array [
            Object {
              "path": "wordpressUsername",
              "value": "user",
            },
            Object {
              "path": "wordpressPassword",
              "value": "sserpdrow",
            },
            Object {
              "path": "wordpressEmail",
              "value": "user@example.com",
            },
            Object {
              "path": "blogName",
              "type": "string",
              "value": "my-blog",
            },
          ]
        }
      >
        <div
          className="basic-deployment-form-param"
          hidden={false}
          key="wordpressEmail-2"
        >
          <TextParam
            handleBasicFormParamChange={[MockFunction]}
            id="wordpressEmail-2"
            inputType="string"
            label="wordpressEmail"
            param={
              Object {
                "path": "wordpressEmail",
                "value": "user@example.com",
              }
            }
          >
            <div>
              <label
                className="centered deployment-form-label deployment-form-label-text-param"
                htmlFor="wordpressEmail-2"
              >
                wordpressEmail
              </label>
              <input
                className="clr-input deployment-form-text-input"
                id="wordpressEmail-2"
                onChange={[Function]}
                type="string"
                value="user@example.com"
              />
            </div>
          </TextParam>
        </div>
      </Param>
      <hr
        className="param-separator"
      />
    </div>
    <div
      key="blogName-3"
    >
      <Param
        allParams={
          Array [
            Object {
              "path": "wordpressUsername",
              "value": "user",
            },
            Object {
              "path": "wordpressPassword",
              "value": "sserpdrow",
            },
            Object {
              "path": "wordpressEmail",
              "value": "user@example.com",
            },
            Object {
              "path": "blogName",
              "type": "string",
              "value": "my-blog",
            },
          ]
        }
        appValues=""
        deploymentEvent="install"
        handleBasicFormParamChange={[MockFunction]}
        handleValuesChange={[MockFunction]}
        id="blogName-3"
        param={
          Object {
            "path": "blogName",
            "type": "string",
            "value": "my-blog",
          }
        }
        params={
          Array [
            Object {
              "path": "wordpressUsername",
              "value": "user",
            },
            Object {
              "path": "wordpressPassword",
              "value": "sserpdrow",
            },
            Object {
              "path": "wordpressEmail",
              "value": "user@example.com",
            },
            Object {
              "path": "blogName",
              "type": "string",
              "value": "my-blog",
            },
          ]
        }
      >
        <div
          className="basic-deployment-form-param"
          hidden={false}
          key="blogName-3"
        >
          <TextParam
            handleBasicFormParamChange={[MockFunction]}
            id="blogName-3"
            inputType="string"
            label="blogName"
            param={
              Object {
                "path": "blogName",
                "type": "string",
                "value": "my-blog",
              }
            }
          >
            <div>
              <label
                className="centered deployment-form-label deployment-form-label-text-param"
                htmlFor="blogName-3"
              >
                blogName
              </label>
              <input
                className="clr-input deployment-form-text-input"
                id="blogName-3"
                onChange={[Function]}
                type="string"
                value="my-blog"
              />
            </div>
          </TextParam>
        </div>
      </Param>
      <hr
        className="param-separator"
      />
    </div>
  </div>
</BasicDeploymentForm>
`;
