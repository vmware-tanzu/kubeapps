// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders a multicheckbox 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <IntlProvider
    defaultFormats={Object {}}
    defaultLocale="en"
    fallbackOnEmptyString={true}
    formats={Object {}}
    key="en"
    locale="en"
    messages={
      Object {
        "Kubeapps": Array [
          Object {
            "type": 0,
            "value": "Kubeapps",
          },
        ],
        "Submit": Array [
          Object {
            "type": 0,
            "value": "Submit",
          },
        ],
        "Token": Array [
          Object {
            "type": 0,
            "value": "Token",
          },
        ],
        "error-login-token": Array [
          Object {
            "type": 0,
            "value": "There was an error connecting to the Kubernetes API. Please check that your token is valid.",
          },
        ],
        "login-desc-oidc": Array [
          Object {
            "type": 0,
            "value": "Your cluster operator has enabled login via an authentication provider.",
          },
        ],
        "login-desc-token": Array [
          Object {
            "type": 0,
            "value": "Your cluster operator should provide you with a Kubernetes API token.",
          },
        ],
        "login-oidc": Array [
          Object {
            "type": 0,
            "value": "Login via OIDC Provider",
          },
        ],
        "login-title-welcome": Array [
          Object {
            "type": 0,
            "value": "Welcome to",
          },
        ],
        "more-info": Array [
          Object {
            "type": 0,
            "value": "More Info",
          },
        ],
        "paste-token-here": Array [
          Object {
            "type": 0,
            "value": "Paste token here",
          },
        ],
      }
    }
    onError={[Function]}
    onWarn={[Function]}
    textComponent={Symbol(react.fragment)}
  >
    <BrowserRouter>
      <Router
        history={
          Object {
            "action": "POP",
            "block": [Function],
            "createHref": [Function],
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "length": 1,
            "listen": [Function],
            "location": Object {
              "hash": "",
              "pathname": "/",
              "search": "",
              "state": undefined,
            },
            "push": [Function],
            "replace": [Function],
          }
        }
      >
        <FilterGroup
          currentFilters={Array []}
          disabled={false}
          name="test"
          onAddFilter={[MockFunction]}
          onRemoveFilter={[MockFunction]}
          options={
            Array [
              "foo",
              "bar",
            ]
          }
        >
          <MultiCheckbox
            disabled={false}
            name="test"
            onChange={[Function]}
            options={
              Array [
                "foo",
                "bar",
              ]
            }
            value={Array []}
          >
            <div
              className="multicheckbox-wrapper"
            >
              <div
                key="0"
              >
                <CdsCheckbox>
                  <CdsCheckbox
                    _$Gl={null}
                  >
                    <cds-checkbox
                      _$Gl={null}
                    >
                      <label
                        htmlFor="test-0"
                      >
                        foo
                      </label>
                      <input
                        checked={false}
                        disabled={false}
                        id="test-0"
                        onChange={[Function]}
                        type="checkbox"
                        value="foo"
                      />
                    </cds-checkbox>
                  </CdsCheckbox>
                </CdsCheckbox>
              </div>
              <div
                key="1"
              >
                <CdsCheckbox>
                  <CdsCheckbox
                    _$Gl={null}
                  >
                    <cds-checkbox
                      _$Gl={null}
                    >
                      <label
                        htmlFor="test-1"
                      >
                        bar
                      </label>
                      <input
                        checked={false}
                        disabled={false}
                        id="test-1"
                        onChange={[Function]}
                        type="checkbox"
                        value="bar"
                      />
                    </cds-checkbox>
                  </CdsCheckbox>
                </CdsCheckbox>
              </div>
            </div>
          </MultiCheckbox>
        </FilterGroup>
      </Router>
    </BrowserRouter>
  </IntlProvider>
  ,
</Provider>
`;
