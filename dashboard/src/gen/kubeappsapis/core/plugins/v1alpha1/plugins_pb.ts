// Copyright 2021-2023 the Kubeapps contributors.
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file kubeappsapis/core/plugins/v1alpha1/plugins.proto (package kubeappsapis.core.plugins.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * GetConfiguredPluginsRequest
 *
 * Request for GetConfiguredPlugins
 *
 * @generated from message kubeappsapis.core.plugins.v1alpha1.GetConfiguredPluginsRequest
 */
export class GetConfiguredPluginsRequest extends Message<GetConfiguredPluginsRequest> {
  constructor(data?: PartialMessage<GetConfiguredPluginsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kubeappsapis.core.plugins.v1alpha1.GetConfiguredPluginsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetConfiguredPluginsRequest {
    return new GetConfiguredPluginsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetConfiguredPluginsRequest {
    return new GetConfiguredPluginsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetConfiguredPluginsRequest {
    return new GetConfiguredPluginsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetConfiguredPluginsRequest | PlainMessage<GetConfiguredPluginsRequest> | undefined,
    b: GetConfiguredPluginsRequest | PlainMessage<GetConfiguredPluginsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetConfiguredPluginsRequest, a, b);
  }
}

/**
 * GetConfiguredPluginsResponse
 *
 * Response for GetConfiguredPlugins
 *
 * @generated from message kubeappsapis.core.plugins.v1alpha1.GetConfiguredPluginsResponse
 */
export class GetConfiguredPluginsResponse extends Message<GetConfiguredPluginsResponse> {
  /**
   * Plugins
   *
   * List of Plugin
   *
   * @generated from field: repeated kubeappsapis.core.plugins.v1alpha1.Plugin plugins = 1;
   */
  plugins: Plugin[] = [];

  constructor(data?: PartialMessage<GetConfiguredPluginsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kubeappsapis.core.plugins.v1alpha1.GetConfiguredPluginsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugins", kind: "message", T: Plugin, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetConfiguredPluginsResponse {
    return new GetConfiguredPluginsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetConfiguredPluginsResponse {
    return new GetConfiguredPluginsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetConfiguredPluginsResponse {
    return new GetConfiguredPluginsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetConfiguredPluginsResponse | PlainMessage<GetConfiguredPluginsResponse> | undefined,
    b: GetConfiguredPluginsResponse | PlainMessage<GetConfiguredPluginsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetConfiguredPluginsResponse, a, b);
  }
}

/**
 * Plugin
 *
 * A plugin can implement multiple services and multiple versions of a service.
 *
 * @generated from message kubeappsapis.core.plugins.v1alpha1.Plugin
 */
export class Plugin extends Message<Plugin> {
  /**
   * Plugin name
   *
   * The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Plugin version
   *
   * The version of the plugin, such as v1alpha1
   *
   * @generated from field: string version = 2;
   */
  version = "";

  constructor(data?: PartialMessage<Plugin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "kubeappsapis.core.plugins.v1alpha1.Plugin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin {
    return new Plugin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJsonString(jsonString, options);
  }

  static equals(
    a: Plugin | PlainMessage<Plugin> | undefined,
    b: Plugin | PlainMessage<Plugin> | undefined,
  ): boolean {
    return proto3.util.equals(Plugin, a, b);
  }
}
