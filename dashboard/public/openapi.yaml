# Copyright 2021-2022 the Kubeapps contributors.
# SPDX-License-Identifier: Apache-2.0

openapi: 3.0.3
servers:
  - url: "{schema}://{url}:{port}"
    description: Development URL
    variables:
      schema:
        enum:
          - http
          - https
        default: http
        description: URL schema
      url:
        default: "127.0.0.1"
        description: Kubeapps URL
      port:
        default: "8080"
        description: Kubeapps port
info:
  description: |
    [![CircleCI](https://circleci.com/gh/kubeapps/kubeapps/tree/main.svg?style=svg)](https://circleci.com/gh/kubeapps/kubeapps/tree/main)

     [Kubeapps](https://github.com/kubeapps/kubeapps) is a web-based UI for deploying and managing applications in Kubernetes clusters.

     Note: this API documentation is still in an initial stage and is subject to change. Before coupling to it, please [drop us an issue](https://github.com/kubeapps/kubeapps/issues/new/choose) or reach us [via Slack](https://kubernetes.slack.com/messages/kubeapps) to know more about your use case and see how we can assist you.
     #### Developer Documentation
     - The [Kubeapps architecture overview](https://github.com/kubeapps/kubeapps/blob/main/docs/background/architecture.md).
     - The [Kubeapps Developer Documentation](https://github.com/kubeapps/kubeapps/blob/main/docs/reference/developer/README.md) for instructions on setting up the developer environment for developing on Kubeapps and its components.
     - The [Kubeapps Build Guide](https://github.com/kubeapps/kubeapps/blob/main/docs/reference/developer/build.md) for instructions on setting up the build environment and building Kubeapps from source.
  version: 0.1.0
  title: Kubeapps API
  termsOfService: "https://github.com/kubeapps/kubeapps/blob/main/LICENSE"
  license:
    name: Apache-2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: kubeops
    externalDocs:
      url: "https://github.com/kubeapps/kubeapps/tree/main/cmd/kubeops"
    description: "The kubeops component is a micro-service that creates an API endpoint for accessing the Helm API and Kubernetes resources."
  - name: PluginsService
  - name: PackagesService
  - name: FluxV2PackagesService
  - name: HelmPackagesService
  - name: KappControllerPackagesService
  - name: ResourcesService
externalDocs:
  description: Kubeapps GitHub repository
  url: "https://github.com/kubeapps/kubeapps"
paths:
  # Endpoints defined at pkg/http-handler/http-handler.go
  "/api/v1/clusters/{cluster}/can-i":
    post:
      tags:
        - kubeops
      summary: "CanI"
      description: ""
      operationId: "CanI"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceAttributes"
      responses:
        default:
          description: Default code/message response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AllowedResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
  "/api/v1/clusters/{cluster}/namespaces":
    get:
      tags:
        - kubeops
      summary: "GetNamespaces"
      description: ""
      operationId: "GetNamespaces"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
      responses:
        default:
          description: Default code/message response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                type: object
                properties:
                  namespaces:
                    type: array
                    items:
                      $ref: "#/components/schemas/Namespace"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/api/v1/clusters/{cluster}/apprepositories":
    get:
      tags:
        - kubeops
      summary: "ListAppRepositories"
      description: ""
      operationId: "ListAppRepositories"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
      responses:
        default:
          description: Default code/message response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AppRepositoryResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/api/v1/clusters/{cluster}/namespaces/{namespace}/apprepositories":
    get:
      tags:
        - kubeops
      summary: "ListAppRepositories_ns"
      description: ""
      operationId: "ListAppRepositories_ns"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Namespace name
      responses:
        default:
          description: Default code/message response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AppRepositoryResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - kubeops
      summary: "CreateAppRepository"
      description: ""
      operationId: "CreateAppRepository"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Namespace name
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppRepositoryRequest"
      responses:
        default:
          description: Default code/message response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AppRepositoryResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "422":
          description: Unprocessable entity
  "/api/v1/clusters/{cluster}/namespaces/{namespace}/apprepositories/validate":
    post:
      tags:
        - kubeops
      summary: "ValidateAppRepository"
      description: ""
      operationId: "ValidateAppRepository"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Namespace name
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppRepository"
      responses:
        default:
          description: Default code/message response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/ValidationResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/api/v1/clusters/{cluster}/namespaces/{namespace}/apprepositories/{name}":
    put:
      tags:
        - kubeops
      summary: "UpdateAppRepository"
      description: ""
      operationId: "UpdateAppRepository"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Namespace name
        - name: name
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Apprepository name
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppRepositoryRequest"
      responses:
        default:
          description: Default code/message response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AppRepositoryResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - kubeops
      summary: "DeleteAppRepository"
      description: ""
      operationId: "DeleteAppRepository"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Namespace name
        - name: name
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Apprepository name
      responses:
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
  "/api/v1/clusters/{cluster}/namespaces/{namespace}/apprepositories/{name}/refresh":
    post:
      tags:
        - kubeops
      summary: "RefreshAppRepository"
      description: ""
      operationId: "RefreshAppRepository"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Namespace name
        - name: name
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Apprepository name
      responses:
        default:
          description: Default code/message response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AppRepositoryResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/api/v1/clusters/{cluster}/namespaces/{namespace}/operator/{name}/logo":
    get:
      tags:
        - kubeops
      summary: "GetOperatorLogo"
      description: ""
      operationId: "GetOperatorLogo"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Namespace name
        - name: name
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Apprepository name
      responses:
        default:
          description: Default code/message response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Successful response
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/svg+xml:
              schema:
                type: string
        "500":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

  # Endpoints defined at cmd/kubeops/main.go
  "/api/kubeops/v1/clusters/{cluster}/releases":
    get:
      tags:
        - kubeops
      summary: "ListAllReleases"
      description: ""
      operationId: "ListAllReleases"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
      responses:
        default:
          description: Default code/message response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppOverview"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/api/kubeops/v1/clusters/{cluster}/namespaces/{namespace}/releases":
    get:
      tags:
        - kubeops
      summary: "ListReleases"
      description: ""
      operationId: "ListReleases"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Namespace name
      responses:
        default:
          description: Default code/message response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AppOverview"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - kubeops
      summary: "CreateRelease"
      description: ""
      operationId: "CreateRelease"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Namespace name
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Details"
      responses:
        default:
          description: Default code/message response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Release"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
  "/api/kubeops/v1/clusters/{cluster}/namespaces/{namespace}/releases/{releaseName}":
    get:
      tags:
        - kubeops
      summary: "GetRelease"
      description: ""
      operationId: "GetRelease"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Namespace name
        - name: releaseName
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Release name
      responses:
        default:
          description: Default code/message response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Release"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - kubeops
      summary: "DeleteRelease"
      description: ""
      operationId: "DeleteRelease"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Namespace name
        - name: releaseName
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Release name
      responses:
        default:
          description: Default code/message response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Successful response
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
    put:
      tags:
        - kubeops
      summary: "OperateRelease"
      description: ""
      operationId: "OperateRelease"
      parameters:
        - name: cluster
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Cluster name
        - name: namespace
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Namespace name
        - name: releaseName
          in: path
          required: true
          schema:
            type: string
            default: default
          description: Release name
        - name: action
          in: query
          schema:
            type: string
            enum: ["upgrade", "rollback"]
            default: upgrade
          description: Action to perform
        - name: revision
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 1
          description: Revision to rollback to (only if ?action=rollback)
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Details"
      responses:
        default:
          description: Default code/message response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Release"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

  # Temporarily manually extracted from /cmd/kubeapps-apis/docs/kubeapps-apis.swagger.json
  /apis/core/packages/v1alpha1/availablepackages:
    get:
      operationId: PackagesService_GetAvailablePackageSummaries
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetAvailablePackageSummariesRes\
                  ponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: context.cluster
          description: >-
            Cluster. A cluster name can be provided to target a specific cluster
            if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: query
          required: false
          schema:
            type: string
        - name: context.namespace
          description: >-
            Namespace. A namespace must be provided if the context of the
            operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: query
          required: false
          schema:
            type: string
        - name: filterOptions.query
          description: Text query. Text query for the request
          in: query
          required: false
          schema:
            type: string
        - name: filterOptions.categories
          description: Categories. Collection of categories for the request
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filterOptions.repositories
          description: Repositories. Collection of repositories where the packages belong to
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filterOptions.pkgVersion
          description: Package version. Package version for the request
          in: query
          required: false
          schema:
            type: string
        - name: filterOptions.appVersion
          description: App version. Packaged app version for the request
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageToken
          description: Page token. The client uses this field to request a specific page of
            the list results.
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageSize
          description: >-
            Page size. Clients use this field to specify the maximum number of
            results to be

            returned by the server. The server may further constrain the maximum number

            of results returned in a single page. If the page_size is 0, the server

            will decide the number of results to be returned.
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - PackagesService
  "/apis/core/packages/v1alpha1/availablepackages/plugin/{availablePackageRef.plugin.name}/{availablePackageRef.plugin.version}/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}":
    get:
      operationId: PackagesService_GetAvailablePackageDetail
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetAvailablePackageDetailRespon\
                  se"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: availablePackageRef.plugin.name
          description: >-
            Plugin name


            The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.plugin.version
          description: |-
            Plugin version

            The version of the plugin, such as v1alpha1
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.identifier
          description: >-
            Available package identifier


            The fully qualified identifier for the available package

            (ie. a unique name for the context). For some packaging systems

            (particularly those where an available package is backed by a CR) this

            will just be the name, but for others such as those where an available

            package is not backed by a CR (eg. standard helm) it may be necessary

            to include the repository in the name or even the repo namespace

            to ensure this is unique.

            For example two helm repositories can define

            an "apache" chart that is available globally, the names would need to

            encode that to be unique (ie. "repoA:apache" and "repoB:apache").
          in: path
          required: true
          schema:
            type: string
        - name: pkgVersion
          description: >-
            Optional specific version (or version reference) to request.

            By default the latest version (or latest version matching the reference)

            will be returned.
          in: query
          required: false
          schema:
            type: string
      tags:
        - PackagesService
  "/apis/core/packages/v1alpha1/availablepackages/plugin/{availablePackageRef.plugin.name}/{availablePackageRef.plugin.version}/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}/versions":
    get:
      operationId: PackagesService_GetAvailablePackageVersions
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetAvailablePackageVersionsResp\
                  onse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: availablePackageRef.plugin.name
          description: >-
            Plugin name


            The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.plugin.version
          description: |-
            Plugin version

            The version of the plugin, such as v1alpha1
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.identifier
          description: >-
            Available package identifier


            The fully qualified identifier for the available package

            (ie. a unique name for the context). For some packaging systems

            (particularly those where an available package is backed by a CR) this

            will just be the name, but for others such as those where an available

            package is not backed by a CR (eg. standard helm) it may be necessary

            to include the repository in the name or even the repo namespace

            to ensure this is unique.

            For example two helm repositories can define

            an "apache" chart that is available globally, the names would need to

            encode that to be unique (ie. "repoA:apache" and "repoB:apache").
          in: path
          required: true
          schema:
            type: string
        - name: pkgVersion
          description: >-
            Optional version reference for which full version history is
            required.  By

            default a summary of versions is returned as outlined in the response.

            Plugins can choose not to implement this and provide the summary only, it

            is provided for completeness only.
          in: query
          required: false
          schema:
            type: string
      tags:
        - PackagesService
  /apis/core/packages/v1alpha1/installedpackages:
    get:
      operationId: PackagesService_GetInstalledPackageSummaries
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetInstalledPackageSummariesRes\
                  ponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: context.cluster
          description: >-
            Cluster. A cluster name can be provided to target a specific cluster
            if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: query
          required: false
          schema:
            type: string
        - name: context.namespace
          description: >-
            Namespace. A namespace must be provided if the context of the
            operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageToken
          description: Page token. The client uses this field to request a specific page of
            the list results.
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageSize
          description: >-
            Page size. Clients use this field to specify the maximum number of
            results to be

            returned by the server. The server may further constrain the maximum number

            of results returned in a single page. If the page_size is 0, the server

            will decide the number of results to be returned.
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - PackagesService
    post:
      operationId: PackagesService_CreateInstalledPackage
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1CreateInstalledPackageResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        $ref: "#/components/requestBodies/v1alpha1CreateInstalledPackageRequest"
      tags:
        - PackagesService
  "/apis/core/packages/v1alpha1/installedpackages/plugin/{installedPackageRef.plugin.name}/{installedPackageRef.plugin.version}/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}":
    get:
      operationId: PackagesService_GetInstalledPackageDetail
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetInstalledPackageDetailRespon\
                  se"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.plugin.name
          description: >-
            Plugin name


            The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.plugin.version
          description: |-
            Plugin version

            The version of the plugin, such as v1alpha1
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
      tags:
        - PackagesService
    delete:
      operationId: PackagesService_DeleteInstalledPackage
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1DeleteInstalledPackageResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.plugin.name
          description: >-
            Plugin name


            The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.plugin.version
          description: |-
            Plugin version

            The version of the plugin, such as v1alpha1
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
      tags:
        - PackagesService
    put:
      operationId: PackagesService_UpdateInstalledPackage
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1UpdateInstalledPackageResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.plugin.name
          description: >-
            Plugin name


            The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.plugin.version
          description: |-
            Plugin version

            The version of the plugin, such as v1alpha1
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/v1alpha1UpdateInstalledPackageRequest"
      tags:
        - PackagesService
  "/apis/core/packages/v1alpha1/installedpackages/plugin/{installedPackageRef.plugin.name}/{installedPackageRef.plugin.version}/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}/resourcerefs":
    get:
      operationId: PackagesService_GetInstalledPackageResourceRefs
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetInstalledPackageResourceRefs\
                  Response"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.plugin.name
          description: >-
            Plugin name


            The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.plugin.version
          description: |-
            Plugin version

            The version of the plugin, such as v1alpha1
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
      tags:
        - PackagesService
  /apis/core/plugins/v1alpha1/configured-plugins:
    get:
      summary: GetConfiguredPlugins returns a map of short and longnames for the
        configured plugins.
      operationId: PluginsService_GetConfiguredPlugins
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetConfiguredPluginsResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      tags:
        - PluginsService
  /apis/plugins/fluxv2/packages/v1alpha1/availablepackages:
    get:
      summary: GetAvailablePackageSummaries returns the available packages managed by
        the 'fluxv2' plugin
      operationId: FluxV2PackagesService_GetAvailablePackageSummaries
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetAvailablePackageSummariesRes\
                  ponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: context.cluster
          description: >-
            Cluster. A cluster name can be provided to target a specific cluster
            if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: query
          required: false
          schema:
            type: string
        - name: context.namespace
          description: >-
            Namespace. A namespace must be provided if the context of the
            operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: query
          required: false
          schema:
            type: string
        - name: filterOptions.query
          description: Text query. Text query for the request
          in: query
          required: false
          schema:
            type: string
        - name: filterOptions.categories
          description: Categories. Collection of categories for the request
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filterOptions.repositories
          description: Repositories. Collection of repositories where the packages belong to
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filterOptions.pkgVersion
          description: Package version. Package version for the request
          in: query
          required: false
          schema:
            type: string
        - name: filterOptions.appVersion
          description: App version. Packaged app version for the request
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageToken
          description: Page token. The client uses this field to request a specific page of
            the list results.
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageSize
          description: >-
            Page size. Clients use this field to specify the maximum number of
            results to be

            returned by the server. The server may further constrain the maximum number

            of results returned in a single page. If the page_size is 0, the server

            will decide the number of results to be returned.
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - FluxV2PackagesService
  "/apis/plugins/fluxv2/packages/v1alpha1/availablepackages/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}":
    get:
      summary: GetAvailablePackageDetail returns the package metadata managed by the
        'fluxv2' plugin
      operationId: FluxV2PackagesService_GetAvailablePackageDetail
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetAvailablePackageDetailRespon\
                  se"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: availablePackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.identifier
          description: >-
            Available package identifier


            The fully qualified identifier for the available package

            (ie. a unique name for the context). For some packaging systems

            (particularly those where an available package is backed by a CR) this

            will just be the name, but for others such as those where an available

            package is not backed by a CR (eg. standard helm) it may be necessary

            to include the repository in the name or even the repo namespace

            to ensure this is unique.

            For example two helm repositories can define

            an "apache" chart that is available globally, the names would need to

            encode that to be unique (ie. "repoA:apache" and "repoB:apache").
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.plugin.name
          description: Plugin name. The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          in: query
          required: false
          schema:
            type: string
        - name: availablePackageRef.plugin.version
          description: Plugin version. The version of the plugin, such as v1alpha1
          in: query
          required: false
          schema:
            type: string
        - name: pkgVersion
          description: >-
            Optional specific version (or version reference) to request.

            By default the latest version (or latest version matching the reference)

            will be returned.
          in: query
          required: false
          schema:
            type: string
      tags:
        - FluxV2PackagesService
  "/apis/plugins/fluxv2/packages/v1alpha1/availablepackages/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}/versions":
    get:
      summary: GetAvailablePackageVersions returns the package versions managed by the
        'fluxv2' plugin
      operationId: FluxV2PackagesService_GetAvailablePackageVersions
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetAvailablePackageVersionsResp\
                  onse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: availablePackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.identifier
          description: >-
            Available package identifier


            The fully qualified identifier for the available package

            (ie. a unique name for the context). For some packaging systems

            (particularly those where an available package is backed by a CR) this

            will just be the name, but for others such as those where an available

            package is not backed by a CR (eg. standard helm) it may be necessary

            to include the repository in the name or even the repo namespace

            to ensure this is unique.

            For example two helm repositories can define

            an "apache" chart that is available globally, the names would need to

            encode that to be unique (ie. "repoA:apache" and "repoB:apache").
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.plugin.name
          description: Plugin name. The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          in: query
          required: false
          schema:
            type: string
        - name: availablePackageRef.plugin.version
          description: Plugin version. The version of the plugin, such as v1alpha1
          in: query
          required: false
          schema:
            type: string
        - name: pkgVersion
          description: >-
            Optional version reference for which full version history is
            required.  By

            default a summary of versions is returned as outlined in the response.

            Plugins can choose not to implement this and provide the summary only, it

            is provided for completeness only.
          in: query
          required: false
          schema:
            type: string
      tags:
        - FluxV2PackagesService
  /apis/plugins/fluxv2/packages/v1alpha1/installedpackages:
    get:
      summary: GetInstalledPackageSummaries returns the installed packages managed by
        the 'fluxv2' plugin
      operationId: FluxV2PackagesService_GetInstalledPackageSummaries
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetInstalledPackageSummariesRes\
                  ponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: context.cluster
          description: >-
            Cluster. A cluster name can be provided to target a specific cluster
            if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: query
          required: false
          schema:
            type: string
        - name: context.namespace
          description: >-
            Namespace. A namespace must be provided if the context of the
            operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageToken
          description: Page token. The client uses this field to request a specific page of
            the list results.
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageSize
          description: >-
            Page size. Clients use this field to specify the maximum number of
            results to be

            returned by the server. The server may further constrain the maximum number

            of results returned in a single page. If the page_size is 0, the server

            will decide the number of results to be returned.
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - FluxV2PackagesService
    post:
      summary: CreateInstalledPackage creates an installed package based on the request.
      operationId: FluxV2PackagesService_CreateInstalledPackage
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1CreateInstalledPackageResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        $ref: "#/components/requestBodies/v1alpha1CreateInstalledPackageRequest"
      tags:
        - FluxV2PackagesService
  "/apis/plugins/fluxv2/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}":
    get:
      summary: GetInstalledPackageDetail returns the requested installed package
        managed by the 'fluxv2' plugin
      operationId: FluxV2PackagesService_GetInstalledPackageDetail
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetInstalledPackageDetailRespon\
                  se"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.plugin.name
          description: Plugin name. The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          in: query
          required: false
          schema:
            type: string
        - name: installedPackageRef.plugin.version
          description: Plugin version. The version of the plugin, such as v1alpha1
          in: query
          required: false
          schema:
            type: string
      tags:
        - FluxV2PackagesService
    delete:
      summary: DeleteInstalledPackage deletes an installed package based on the request.
      operationId: FluxV2PackagesService_DeleteInstalledPackage
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1DeleteInstalledPackageResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.plugin.name
          description: Plugin name. The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          in: query
          required: false
          schema:
            type: string
        - name: installedPackageRef.plugin.version
          description: Plugin version. The version of the plugin, such as v1alpha1
          in: query
          required: false
          schema:
            type: string
      tags:
        - FluxV2PackagesService
    put:
      summary: UpdateInstalledPackage updates an installed package based on the request.
      operationId: FluxV2PackagesService_UpdateInstalledPackage
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1UpdateInstalledPackageResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/v1alpha1UpdateInstalledPackageRequest"
      tags:
        - FluxV2PackagesService
  "/apis/plugins/fluxv2/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}/resourcerefs":
    get:
      summary: >-
        GetInstalledPackageResourceRefs returns the references for the
        Kubernetes

        resources created by an installed package.
      operationId: FluxV2PackagesService_GetInstalledPackageResourceRefs
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetInstalledPackageResourceRefs\
                  Response"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.plugin.name
          description: Plugin name. The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          in: query
          required: false
          schema:
            type: string
        - name: installedPackageRef.plugin.version
          description: Plugin version. The version of the plugin, such as v1alpha1
          in: query
          required: false
          schema:
            type: string
      tags:
        - FluxV2PackagesService
  /apis/plugins/fluxv2/packages/v1alpha1/packagerepositories:
    get:
      summary: GetPackageRepositories returns the repositories managed by the 'fluxv2'
        plugin
      operationId: FluxV2PackagesService_GetPackageRepositories
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pluginsfluxv2packagesv1alpha1GetPackage\
                  RepositoriesResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: context.cluster
          description: >-
            Cluster. A cluster name can be provided to target a specific cluster
            if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: query
          required: false
          schema:
            type: string
        - name: context.namespace
          description: >-
            Namespace. A namespace must be provided if the context of the
            operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: query
          required: false
          schema:
            type: string
      tags:
        - FluxV2PackagesService
  /apis/plugins/helm/packages/v1alpha1/availablepackages:
    get:
      summary: GetAvailablePackageSummaries returns the available packages managed by
        the 'helm' plugin
      operationId: HelmPackagesService_GetAvailablePackageSummaries
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetAvailablePackageSummariesRes\
                  ponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: context.cluster
          description: >-
            Cluster. A cluster name can be provided to target a specific cluster
            if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: query
          required: false
          schema:
            type: string
        - name: context.namespace
          description: >-
            Namespace. A namespace must be provided if the context of the
            operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: query
          required: false
          schema:
            type: string
        - name: filterOptions.query
          description: Text query. Text query for the request
          in: query
          required: false
          schema:
            type: string
        - name: filterOptions.categories
          description: Categories. Collection of categories for the request
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filterOptions.repositories
          description: Repositories. Collection of repositories where the packages belong to
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filterOptions.pkgVersion
          description: Package version. Package version for the request
          in: query
          required: false
          schema:
            type: string
        - name: filterOptions.appVersion
          description: App version. Packaged app version for the request
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageToken
          description: Page token. The client uses this field to request a specific page of
            the list results.
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageSize
          description: >-
            Page size. Clients use this field to specify the maximum number of
            results to be

            returned by the server. The server may further constrain the maximum number

            of results returned in a single page. If the page_size is 0, the server

            will decide the number of results to be returned.
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - HelmPackagesService
  "/apis/plugins/helm/packages/v1alpha1/availablepackages/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}":
    get:
      summary: GetAvailablePackageDetail returns the package details managed by the
        'helm' plugin
      operationId: HelmPackagesService_GetAvailablePackageDetail
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetAvailablePackageDetailRespon\
                  se"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: availablePackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.identifier
          description: >-
            Available package identifier


            The fully qualified identifier for the available package

            (ie. a unique name for the context). For some packaging systems

            (particularly those where an available package is backed by a CR) this

            will just be the name, but for others such as those where an available

            package is not backed by a CR (eg. standard helm) it may be necessary

            to include the repository in the name or even the repo namespace

            to ensure this is unique.

            For example two helm repositories can define

            an "apache" chart that is available globally, the names would need to

            encode that to be unique (ie. "repoA:apache" and "repoB:apache").
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.plugin.name
          description: Plugin name. The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          in: query
          required: false
          schema:
            type: string
        - name: availablePackageRef.plugin.version
          description: Plugin version. The version of the plugin, such as v1alpha1
          in: query
          required: false
          schema:
            type: string
        - name: pkgVersion
          description: >-
            Optional specific version (or version reference) to request.

            By default the latest version (or latest version matching the reference)

            will be returned.
          in: query
          required: false
          schema:
            type: string
      tags:
        - HelmPackagesService
  "/apis/plugins/helm/packages/v1alpha1/availablepackages/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}/versions":
    get:
      summary: GetAvailablePackageVersions returns the package versions managed by the
        'helm' plugin
      operationId: HelmPackagesService_GetAvailablePackageVersions
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetAvailablePackageVersionsResp\
                  onse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: availablePackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.identifier
          description: >-
            Available package identifier


            The fully qualified identifier for the available package

            (ie. a unique name for the context). For some packaging systems

            (particularly those where an available package is backed by a CR) this

            will just be the name, but for others such as those where an available

            package is not backed by a CR (eg. standard helm) it may be necessary

            to include the repository in the name or even the repo namespace

            to ensure this is unique.

            For example two helm repositories can define

            an "apache" chart that is available globally, the names would need to

            encode that to be unique (ie. "repoA:apache" and "repoB:apache").
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.plugin.name
          description: Plugin name. The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          in: query
          required: false
          schema:
            type: string
        - name: availablePackageRef.plugin.version
          description: Plugin version. The version of the plugin, such as v1alpha1
          in: query
          required: false
          schema:
            type: string
        - name: pkgVersion
          description: >-
            Optional version reference for which full version history is
            required.  By

            default a summary of versions is returned as outlined in the response.

            Plugins can choose not to implement this and provide the summary only, it

            is provided for completeness only.
          in: query
          required: false
          schema:
            type: string
      tags:
        - HelmPackagesService
  /apis/plugins/helm/packages/v1alpha1/installedpackages:
    get:
      summary: GetInstalledPackageSummaries returns the installed packages managed by
        the 'helm' plugin
      operationId: HelmPackagesService_GetInstalledPackageSummaries
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetInstalledPackageSummariesRes\
                  ponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: context.cluster
          description: >-
            Cluster. A cluster name can be provided to target a specific cluster
            if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: query
          required: false
          schema:
            type: string
        - name: context.namespace
          description: >-
            Namespace. A namespace must be provided if the context of the
            operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageToken
          description: Page token. The client uses this field to request a specific page of
            the list results.
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageSize
          description: >-
            Page size. Clients use this field to specify the maximum number of
            results to be

            returned by the server. The server may further constrain the maximum number

            of results returned in a single page. If the page_size is 0, the server

            will decide the number of results to be returned.
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - HelmPackagesService
    post:
      summary: CreateInstalledPackage creates an installed package based on the request.
      operationId: HelmPackagesService_CreateInstalledPackage
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1CreateInstalledPackageResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        $ref: "#/components/requestBodies/v1alpha1CreateInstalledPackageRequest"
      tags:
        - HelmPackagesService
  "/apis/plugins/helm/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}":
    get:
      summary: GetInstalledPackageDetail returns the requested installed package
        managed by the 'helm' plugin
      operationId: HelmPackagesService_GetInstalledPackageDetail
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetInstalledPackageDetailRespon\
                  se"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.plugin.name
          description: Plugin name. The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          in: query
          required: false
          schema:
            type: string
        - name: installedPackageRef.plugin.version
          description: Plugin version. The version of the plugin, such as v1alpha1
          in: query
          required: false
          schema:
            type: string
      tags:
        - HelmPackagesService
    delete:
      summary: DeleteInstalledPackage deletes an installed package based on the request.
      operationId: HelmPackagesService_DeleteInstalledPackage
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1DeleteInstalledPackageResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.plugin.name
          description: Plugin name. The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          in: query
          required: false
          schema:
            type: string
        - name: installedPackageRef.plugin.version
          description: Plugin version. The version of the plugin, such as v1alpha1
          in: query
          required: false
          schema:
            type: string
      tags:
        - HelmPackagesService
    put:
      summary: UpdateInstalledPackage updates an installed package based on the request.
      operationId: HelmPackagesService_UpdateInstalledPackage
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1UpdateInstalledPackageResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/v1alpha1UpdateInstalledPackageRequest"
      tags:
        - HelmPackagesService
  "/apis/plugins/helm/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}/resourcerefs":
    get:
      summary: >-
        GetInstalledPackageResourceRefs returns the references for the
        Kubernetes resources created by

        an installed package.
      operationId: HelmPackagesService_GetInstalledPackageResourceRefs
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetInstalledPackageResourceRefs\
                  Response"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.plugin.name
          description: Plugin name. The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          in: query
          required: false
          schema:
            type: string
        - name: installedPackageRef.plugin.version
          description: Plugin version. The version of the plugin, such as v1alpha1
          in: query
          required: false
          schema:
            type: string
      tags:
        - HelmPackagesService
  "/apis/plugins/helm/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}/rollback":
    put:
      summary: RollbackInstalledPackage updates an installed package based on the
        request.
      operationId: HelmPackagesService_RollbackInstalledPackage
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1RollbackInstalledPackageResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v1alpha1RollbackInstalledPackageRequest"
        required: true
      tags:
        - HelmPackagesService
  /apis/plugins/kapp_controller/packages/v1alpha1/availablepackages:
    get:
      summary: GetAvailablePackageSummaries returns the available packages managed by
        the 'kapp_controller' plugin
      operationId: KappControllerPackagesService_GetAvailablePackageSummaries
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetAvailablePackageSummariesRes\
                  ponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: context.cluster
          description: >-
            Cluster. A cluster name can be provided to target a specific cluster
            if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: query
          required: false
          schema:
            type: string
        - name: context.namespace
          description: >-
            Namespace. A namespace must be provided if the context of the
            operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: query
          required: false
          schema:
            type: string
        - name: filterOptions.query
          description: Text query. Text query for the request
          in: query
          required: false
          schema:
            type: string
        - name: filterOptions.categories
          description: Categories. Collection of categories for the request
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filterOptions.repositories
          description: Repositories. Collection of repositories where the packages belong to
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: filterOptions.pkgVersion
          description: Package version. Package version for the request
          in: query
          required: false
          schema:
            type: string
        - name: filterOptions.appVersion
          description: App version. Packaged app version for the request
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageToken
          description: Page token. The client uses this field to request a specific page of
            the list results.
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageSize
          description: >-
            Page size. Clients use this field to specify the maximum number of
            results to be

            returned by the server. The server may further constrain the maximum number

            of results returned in a single page. If the page_size is 0, the server

            will decide the number of results to be returned.
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - KappControllerPackagesService
  "/apis/plugins/kapp_controller/packages/v1alpha1/availablepackages/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}":
    get:
      summary: GetAvailablePackageDetail returns the package details managed by the
        'kapp_controller' plugin
      operationId: KappControllerPackagesService_GetAvailablePackageDetail
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetAvailablePackageDetailRespon\
                  se"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: availablePackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.identifier
          description: >-
            Available package identifier


            The fully qualified identifier for the available package

            (ie. a unique name for the context). For some packaging systems

            (particularly those where an available package is backed by a CR) this

            will just be the name, but for others such as those where an available

            package is not backed by a CR (eg. standard helm) it may be necessary

            to include the repository in the name or even the repo namespace

            to ensure this is unique.

            For example two helm repositories can define

            an "apache" chart that is available globally, the names would need to

            encode that to be unique (ie. "repoA:apache" and "repoB:apache").
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.plugin.name
          description: Plugin name. The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          in: query
          required: false
          schema:
            type: string
        - name: availablePackageRef.plugin.version
          description: Plugin version. The version of the plugin, such as v1alpha1
          in: query
          required: false
          schema:
            type: string
        - name: pkgVersion
          description: >-
            Optional specific version (or version reference) to request.

            By default the latest version (or latest version matching the reference)

            will be returned.
          in: query
          required: false
          schema:
            type: string
      tags:
        - KappControllerPackagesService
  "/apis/plugins/kapp_controller/packages/v1alpha1/availablepackages/c/{availablePackageRef.context.cluster}/ns/{availablePackageRef.context.namespace}/{availablePackageRef.identifier}/versions":
    get:
      summary: GetAvailablePackageVersions returns the package versions managed by the
        'kapp_controller' plugin
      operationId: KappControllerPackagesService_GetAvailablePackageVersions
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetAvailablePackageVersionsResp\
                  onse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: availablePackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.identifier
          description: >-
            Available package identifier


            The fully qualified identifier for the available package

            (ie. a unique name for the context). For some packaging systems

            (particularly those where an available package is backed by a CR) this

            will just be the name, but for others such as those where an available

            package is not backed by a CR (eg. standard helm) it may be necessary

            to include the repository in the name or even the repo namespace

            to ensure this is unique.

            For example two helm repositories can define

            an "apache" chart that is available globally, the names would need to

            encode that to be unique (ie. "repoA:apache" and "repoB:apache").
          in: path
          required: true
          schema:
            type: string
        - name: availablePackageRef.plugin.name
          description: Plugin name. The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          in: query
          required: false
          schema:
            type: string
        - name: availablePackageRef.plugin.version
          description: Plugin version. The version of the plugin, such as v1alpha1
          in: query
          required: false
          schema:
            type: string
        - name: pkgVersion
          description: >-
            Optional version reference for which full version history is
            required.  By

            default a summary of versions is returned as outlined in the response.

            Plugins can choose not to implement this and provide the summary only, it

            is provided for completeness only.
          in: query
          required: false
          schema:
            type: string
      tags:
        - KappControllerPackagesService
  /apis/plugins/kapp_controller/packages/v1alpha1/installedpackages:
    get:
      summary: GetInstalledPackageSummaries returns the installed packages managed by
        the 'kapp_controller' plugin
      operationId: KappControllerPackagesService_GetInstalledPackageSummaries
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetInstalledPackageSummariesRes\
                  ponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: context.cluster
          description: >-
            Cluster. A cluster name can be provided to target a specific cluster
            if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: query
          required: false
          schema:
            type: string
        - name: context.namespace
          description: >-
            Namespace. A namespace must be provided if the context of the
            operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageToken
          description: Page token. The client uses this field to request a specific page of
            the list results.
          in: query
          required: false
          schema:
            type: string
        - name: paginationOptions.pageSize
          description: >-
            Page size. Clients use this field to specify the maximum number of
            results to be

            returned by the server. The server may further constrain the maximum number

            of results returned in a single page. If the page_size is 0, the server

            will decide the number of results to be returned.
          in: query
          required: false
          schema:
            type: integer
            format: int32
      tags:
        - KappControllerPackagesService
    post:
      summary: CreateInstalledPackage creates an installed package based on the request.
      operationId: KappControllerPackagesService_CreateInstalledPackage
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1CreateInstalledPackageResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        $ref: "#/components/requestBodies/v1alpha1CreateInstalledPackageRequest"
      tags:
        - KappControllerPackagesService
  "/apis/plugins/kapp_controller/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}":
    get:
      summary: GetInstalledPackageDetail returns the requested installed package
        managed by the 'kapp_controller' plugin
      operationId: KappControllerPackagesService_GetInstalledPackageDetail
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetInstalledPackageDetailRespon\
                  se"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.plugin.name
          description: Plugin name. The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          in: query
          required: false
          schema:
            type: string
        - name: installedPackageRef.plugin.version
          description: Plugin version. The version of the plugin, such as v1alpha1
          in: query
          required: false
          schema:
            type: string
      tags:
        - KappControllerPackagesService
    delete:
      summary: DeleteInstalledPackage deletes an installed package based on the request.
      operationId: KappControllerPackagesService_DeleteInstalledPackage
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1DeleteInstalledPackageResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.plugin.name
          description: Plugin name. The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          in: query
          required: false
          schema:
            type: string
        - name: installedPackageRef.plugin.version
          description: Plugin version. The version of the plugin, such as v1alpha1
          in: query
          required: false
          schema:
            type: string
      tags:
        - KappControllerPackagesService
    put:
      summary: UpdateInstalledPackage updates an installed package based on the request.
      operationId: KappControllerPackagesService_UpdateInstalledPackage
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1UpdateInstalledPackageResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/v1alpha1UpdateInstalledPackageRequest"
      tags:
        - KappControllerPackagesService
  "/apis/plugins/kapp_controller/packages/v1alpha1/installedpackages/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}/resourcerefs":
    get:
      summary: >-
        GetInstalledPackageResourceRefs returns the references for the
        Kubernetes resources created by

        an installed package.
      operationId: KappControllerPackagesService_GetInstalledPackageResourceRefs
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetInstalledPackageResourceRefs\
                  Response"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.plugin.name
          description: Plugin name. The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          in: query
          required: false
          schema:
            type: string
        - name: installedPackageRef.plugin.version
          description: Plugin version. The version of the plugin, such as v1alpha1
          in: query
          required: false
          schema:
            type: string
      tags:
        - KappControllerPackagesService
  /apis/plugins/kapp_controller/packages/v1alpha1/packagerepositories:
    get:
      summary: GetPackageRepositories returns the repositories managed by the
        'kapp_controller' plugin
      operationId: KappControllerPackagesService_GetPackageRepositories
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pluginskapp_controllerpackagesv1alpha1G\
                  etPackageRepositoriesResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: context.cluster
          description: >-
            Cluster. A cluster name can be provided to target a specific cluster
            if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: query
          required: false
          schema:
            type: string
        - name: context.namespace
          description: >-
            Namespace. A namespace must be provided if the context of the
            operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: query
          required: false
          schema:
            type: string
      tags:
        - KappControllerPackagesService
  "/apis/plugins/resources/v1alpha1/c/{context.cluster}/ns/{context.namespace}/serviceaccountnames":
    get:
      operationId: ResourcesService_GetServiceAccountNames
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1alpha1GetServiceAccountNamesResponse"
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
      tags:
        - ResourcesService
  "/apis/plugins/resources/v1alpha1/{installedPackageRef.plugin.name}/{installedPackageRef.plugin.version}/c/{installedPackageRef.context.cluster}/ns/{installedPackageRef.context.namespace}/{installedPackageRef.identifier}":
    get:
      operationId: ResourcesService_GetResources
      responses:
        "200":
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: "#/components/schemas/v1alpha1GetResourcesResponse"
                  error:
                    $ref: "#/components/schemas/rpcStatus"
                title: Stream result of v1alpha1GetResourcesResponse
        "401":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema: {}
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: installedPackageRef.plugin.name
          description: >-
            Plugin name


            The name of the plugin, such as `fluxv2.packages` or `kapp_controller.packages`.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.plugin.version
          description: |-
            Plugin version

            The version of the plugin, such as v1alpha1
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.cluster
          description: >-
            Cluster


            A cluster name can be provided to target a specific cluster if multiple

            clusters are configured, otherwise all clusters will be assumed.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.context.namespace
          description: >-
            Namespace


            A namespace must be provided if the context of the operation is for a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          in: path
          required: true
          schema:
            type: string
        - name: installedPackageRef.identifier
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
          in: path
          required: true
          schema:
            type: string
        - name: watch
          description: >-
            Watch. When true, this will cause the stream to remain open with
            updated

            resources being sent as events are received from the Kubernetes API

            server.
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - ResourcesService
components:
  schemas:
    # pkg/chart/models/chart.go
    ChartCategory:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        count:
          type: integer
          format: int64
    # pkg/chart/models/chart.go
    Chart:
      type: object
      additionalProperties: false
      properties:
        ID:
          type: string
        name:
          type: string
        repo:
          $ref: "#/components/schemas/Repo"
        description:
          type: string
        home:
          type: string
        keywords:
          type: array
          items:
            type: string
        maintainers:
          type: array
          items:
            type: object
        sources:
          type: array
          items:
            type: string
        icon:
          type: string
        raw_icon:
          type: string
          format: byte
        icon_content_type:
          type: string
        category:
          type: string
        chartVersions:
          type: object
          items:
            $ref: "#/components/schemas/ChartVersion"
    # pkg/chart/models/chart.go
    ChartVersion:
      type: object
      additionalProperties: false
      properties:
        version:
          type: string
        app_version:
          type: string
        created:
          type: string
          format: time
        digest:
          type: string
        urls:
          type: array
          items:
            type: string
        readme:
          type: string
        values:
          type: string
        schema:
          type: string
    # pkg/chart/models/chart.go
    Repo:
      type: object
      additionalProperties: false
      properties:
        namespace:
          type: string
        name:
          type: string
        url:
          type: string
        type:
          type: string
    # pkg/chart/chart.go
    Details:
      type: object
      additionalProperties: false
      properties:
        appRepositoryResourceName:
          type: string
        appRepositoryResourceNamespace:
          type: string
        chartName:
          type: string
        releaseName:
          type: string
        version:
          type: string
        values:
          type: string
    # cmd/assetsvc/handler.go
    ChartResponse:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          $ref: "#/components/schemas/Chart"
        links:
          type: object
        relationships:
          type: object
          additionalProperties: false
          properties:
            latestChartVersion:
              type: object
              additionalProperties: false
              properties:
                data:
                  $ref: "#/components/schemas/ChartVersion"
                links:
                  type: object
                  additionalProperties: false
                  properties:
                    self:
                      type: string
    # cmd/assetsvc/handler.go
    ChartVersionResponse:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          $ref: "#/components/schemas/ChartVersion"
        links:
          type: object
        relationships:
          type: object
          additionalProperties: false
          properties:
            chart:
              type: object
              additionalProperties: false
              properties:
                data:
                  $ref: "#/components/schemas/Chart"
                links:
                  type: object
                  additionalProperties: false
                  properties:
                    self:
                      type: string
    # pkg/proxy/proxy.go
    AppOverview:
      type: object
      additionalProperties: false
      properties:
        releaseName:
          type: string
        version:
          type: string
        namespace:
          type: string
        icon:
          type: string
        status:
          type: string
        chart:
          type: string
        chartMetadata:
          $ref: "#/components/schemas/ChartMetadata"
    # pkg/kube/kube_handler.go
    AppRepositoryRequestDetails:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        type:
          type: string
        description:
          type: string
        repoURL:
          type: string
        authHeader:
          type: string
        customCA:
          type: string
        registrySecrets:
          type: array
          items:
            type: string
        syncJobPodTemplate:
          $ref: "#/components/schemas/PodTemplateSpec"
        resyncRequests:
          type: integer
          format: int64
        ociRepositories:
          type: array
          items:
            type: string
        tlsInsecureSkipVerify:
          type: boolean
        passCredentials:
          type: boolean
    # pkg/kube/kube_handler.go
    ValidationResponse:
      type: object
      additionalProperties: false
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
    # pkg/http-handler/http-handler.go
    AllowedResponse:
      type: object
      additionalProperties: false
      properties:
        allowed:
          type: string
    # pkg/http-handler/http-handler.go
    AppRepositoryResponse:
      type: object
      additionalProperties: false
      properties:
        appRepository:
          $ref: "#/components/schemas/AppRepositoryList"
    # pkg/http-handler/http-handler.go
    AppRepositoryRequest:
      type: object
      additionalProperties: false
      properties:
        appRepository:
          $ref: "#/components/schemas/AppRepositoryRequestDetails"
    # cmd/apprepository-controller/pkg/apis/apprepository/v1alpha1/types.go
    AppRepositoryList:
      type: object
      additionalProperties: false
      properties:
        metadata:
          type: object
        items:
          type: array
          items:
            $ref: "#/components/schemas/AppRepository"
    # cmd/apprepository-controller/pkg/apis/apprepository/v1alpha1/types.go
    AppRepository:
      type: object
      additionalProperties: false
      properties:
        metadata:
          type: object
        spec:
          $ref: "#/components/schemas/AppRepositorySpec"
        status:
          $ref: "#/components/schemas/AppRepositoryStatus"
    # cmd/apprepository-controller/pkg/apis/apprepository/v1alpha1/types.go
    AppRepositorySpec:
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
        url:
          type: string
        auth:
          $ref: "#/components/schemas/AppRepositoryAuth"
        resyncRequests:
          type: integer
          format: int64
        syncJobPodTemplate:
          type: object
        dockerRegistrySecrets:
          type: array
          items:
            type: string
        ociRepositories:
          type: array
          items:
            type: string
        tlsInsecureSkipVerify:
          type: boolean
        description:
          type: string
        passCredentials:
          type: boolean
    # cmd/apprepository-controller/pkg/apis/apprepository/v1alpha1/types.go
    AppRepositoryStatus:
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
    # cmd/apprepository-controller/pkg/apis/apprepository/v1alpha1/types.go
    AppRepositoryAuth:
      type: object
      additionalProperties: false
      properties:
        header:
          $ref: "#/components/schemas/AppRepositoryAuthHeader"
        customCA:
          $ref: "#/components/schemas/AppRepositoryCustomCA"
    # cmd/apprepository-controller/pkg/apis/apprepository/v1alpha1/types.go
    AppRepositoryAuthHeader:
      type: object
      additionalProperties: false
      properties:
        secretKeyRef:
          type: object
    # cmd/apprepository-controller/pkg/apis/apprepository/v1alpha1/types.go
    AppRepositoryCustomCA:
      type: object
      additionalProperties: false
      properties:
        secretKeyRef:
          type: object
    # pkg/mod/k8s.io/api/core/v1/types.go
    PodTemplateSpec:
      type: object
      additionalProperties: false
      properties:
        metadata:
          type: object
        spec:
          type: object
    # pkg/mod/k8s.io/api/core/v1/types.go
    Namespace:
      type: object
      properties:
        metadata:
          type: object
        spec:
          type: object
        status:
          type: object
    # pkg/mod/k8s.io/api/authorization/v1/types.go
    ResourceAttributes:
      type: object
      additionalProperties: false
      properties:
        namespace:
          type: string
        verb:
          type: string
        group:
          type: string
        version:
          type: string
        resource:
          type: string
        subresource:
          type: string
        name:
          type: string
    # pkg/mod/k8s.io/helm@v2.16.0+incompatible/pkg/proto/hapi/chart/metadata.pb.go
    ChartMetadata:
      type: object
      additionalProperties: false
      properties:
        annotations:
          type: object
        apiVersion:
          type: string
        appVersion:
          type: string
        condition:
          type: string
        deprecated:
          type: boolean
        description:
          type: string
        engine:
          type: string
        home:
          type: string
        icon:
          type: string
        kubeVersion:
          type: string
        maintainers:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              url:
                type: string
        name:
          type: string
        sources:
          type: array
          items:
            type: string
        tags:
          type: string
        version:
          type: string
    # pkg/mod/helm.sh/helm/v3@v3.5.0/pkg/release/release.go
    Release:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        info:
          type: string
        chart:
          type: object
        config:
          type: string
        manifest:
          type: string
        hooks:
          type: array
          items:
            type: object
        version:
          type: integer
          format: int64
        namespace:
          type: string
    Error:
      type: object
      additionalProperties: false
      properties:
        code:
          type: integer
          format: int64
        message:
          type: string
    # Temporarily manually extracted from /cmd/kubeapps-apis/docs/kubeapps-apis.swagger.json
    InstalledPackageStatusStatusReason:
      type: string
      enum:
        - STATUS_REASON_UNSPECIFIED
        - STATUS_REASON_INSTALLED
        - STATUS_REASON_UNINSTALLED
        - STATUS_REASON_FAILED
        - STATUS_REASON_PENDING
      default: STATUS_REASON_UNSPECIFIED
      description: |-
        Generic reasons why an installed package may be ready or not.
        These should make sense across different packaging plugins.
      title: StatusReason
    pluginsfluxv2packagesv1alpha1GetPackageRepositoriesResponse:
      type: object
      example:
        repositories:
          - name: repo-name.example.com
            namespace: ""
            url: foo.registry.example.com/repo-name/main@sha256:cecd9b51b1f29a773a5228fe04faec121c9fbd2969de55b0c3804269a1d57aa5
      properties:
        repositories:
          type: array
          items:
            $ref: "#/components/schemas/pluginsfluxv2packagesv1alpha1PackageReposit\
              ory"
          description: List of PackageRepository
          title: Repositories
      description: Response for GetPackageRepositories
      title: GetPackageRepositories
    pluginsfluxv2packagesv1alpha1PackageRepository:
      type: object
      properties:
        name:
          type: string
          description: The name identifying package repository on the cluster.
          title: Package repository name
        namespace:
          type: string
          description: An optional namespace for namespaced package repositories.
          title: Package repository namespace
        url:
          type: string
          description: A url identifying the package repository location.
          title: Package repository URL
        plugin:
          $ref: "#/components/schemas/v1alpha1Plugin"
      description: A PackageRepository defines a repository of packages for installation.
      title: PackageRepository
    pluginskapp_controllerpackagesv1alpha1GetPackageRepositoriesResponse:
      type: object
      example:
        repositories:
          - name: repo-name.example.com
            namespace: ""
            url: foo.registry.example.com/repo-name/main@sha256:cecd9b51b1f29a773a5228fe04faec121c9fbd2969de55b0c3804269a1d57aa5
      properties:
        repositories:
          type: array
          items:
            $ref: "#/components/schemas/pluginskapp_controllerpackagesv1alpha1Packa\
              geRepository"
          description: List of PackageRepository
          title: Repositories
      description: Response for GetPackageRepositories
      title: GetPackageRepositories
    pluginskapp_controllerpackagesv1alpha1PackageRepository:
      type: object
      properties:
        name:
          type: string
          description: The name identifying package repository on the cluster.
          title: Package repository name
        namespace:
          type: string
          description: An optional namespace for namespaced package repositories.
          title: Package repository namespace
        url:
          type: string
          description: A url identifying the package repository location.
          title: Package repository URL
        plugin:
          $ref: "#/components/schemas/v1alpha1Plugin"
      description: A PackageRepository defines a repository of packages for installation.
      title: PackageRepository
    protobufAny:
      type: object
      properties:
        "@type":
          type: string
          description: >-
            A URL/resource name that uniquely identifies the type of the
            serialized

            protocol buffer message. This string must contain at least

            one "/" character. The last segment of the URL's path must represent

            the fully qualified name of the type (as in

            `path/google.protobuf.Duration`). The name should be in a canonical form

            (e.g., leading "." is not accepted).


            In practice, teams usually precompile into the binary all types that they

            expect it to use in the context of Any. However, for URLs which use the

            scheme `http`, `https`, or no scheme, one can optionally set up a type

            server that maps type URLs to message definitions as follows:


            * If no scheme is provided, `https` is assumed.

            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official

            protobuf release, and it is not used for type URLs beginning with

            type.googleapis.com.


            Schemes other than `http`, `https` (or the empty scheme) might be

            used with implementation specific semantics.
      additionalProperties: {}
      description: >-
        `Any` contains an arbitrary serialized protocol buffer message along
        with a

        URL that describes the type of the serialized message.


        Protobuf library provides support to pack/unpack Any values in the form

        of utility functions or additional generated methods of the Any type.


        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use

        'type.googleapis.com/full.type.name' as the type URL and the unpack

        methods only use the fully qualified type name after the last '/'

        in the type URL, for example "foo.bar.com/x/y.z" will yield type

        name "y.z".



        JSON

        ====

        The JSON representation of an `Any` value uses the regular

        representation of the deserialized, embedded message, with an

        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": ,
              "lastName":
            }

        If the embedded message type is well-known and has a custom JSON

        representation, that representation will be embedded adding a field

        `value` which holds the custom JSON in addition to the `@type`

        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: "#/components/schemas/protobufAny"
    v1alpha1AvailablePackageDetail:
      type: object
      properties:
        availablePackageRef:
          $ref: "#/components/schemas/v1alpha1AvailablePackageReference"
        name:
          type: string
          description: The name of the available package
          title: Available package name
        version:
          $ref: "#/components/schemas/v1alpha1PackageAppVersion"
        repoUrl:
          type: string
          title: the url of the package repository that contains this package
        homeUrl:
          type: string
          title: the url of the “home” for the package
        iconUrl:
          type: string
          description: A url for an icon.
          title: Available package icon URL
        displayName:
          type: string
          description: A name as displayed to users
          title: Available package display name
        shortDescription:
          type: string
          description: A short description of the app provided by the package
          title: Available package short description
        longDescription:
          type: string
          description: A longer description of the package, a few sentences.
          title: Available package long description
        readme:
          type: string
          description: A longer README with potentially pages of formatted Markdown.
          title: Available package readme
        defaultValues:
          type: string
          description: >-
            An example of default values used during package templating that can
            serve

            as documentation or a starting point for user customization.
          title: Available package default values
        valuesSchema:
          type: string
        sourceUrls:
          type: array
          items:
            type: string
          title: source urls for the package
        maintainers:
          type: array
          items:
            $ref: "#/components/schemas/v1alpha1Maintainer"
          description: List of Maintainer
          title: Available package maintainers
        categories:
          type: array
          items:
            type: string
          description: >-
            A user-facing list of category names useful for creating richer user
            interfaces.

            Plugins can choose not to implement this
          title: Available package categories
        customDetail:
          $ref: "#/components/schemas/protobufAny"
      description: |-
        An AvailablePackageDetail provides additional details required when
        inspecting an individual package.
      title: AvailablePackageDetail
    v1alpha1AvailablePackageReference:
      type: object
      properties:
        context:
          $ref: "#/components/schemas/v1alpha1Context"
        identifier:
          type: string
          description: >-
            The fully qualified identifier for the available package

            (ie. a unique name for the context). For some packaging systems

            (particularly those where an available package is backed by a CR) this

            will just be the name, but for others such as those where an available

            package is not backed by a CR (eg. standard helm) it may be necessary

            to include the repository in the name or even the repo namespace

            to ensure this is unique.

            For example two helm repositories can define

            an "apache" chart that is available globally, the names would need to

            encode that to be unique (ie. "repoA:apache" and "repoB:apache").
          title: Available package identifier
        plugin:
          $ref: "#/components/schemas/v1alpha1Plugin"
      description: >-
        An AvailablePackageReference has the minimum information required to
        uniquely

        identify an available package. This is re-used on the summary and details of an

        available package.
      title: AvailablePackageReference
    v1alpha1AvailablePackageSummary:
      type: object
      properties:
        availablePackageRef:
          $ref: "#/components/schemas/v1alpha1AvailablePackageReference"
        name:
          type: string
          description: The name of the available package
          title: Available package name
        latestVersion:
          $ref: "#/components/schemas/v1alpha1PackageAppVersion"
        iconUrl:
          type: string
          description: A url for an icon.
          title: Available package Icon URL
        displayName:
          type: string
          description: A name as displayed to users
          title: Available package display name
        shortDescription:
          type: string
          description: A short description of the app provided by the package
          title: Available package short description
        categories:
          type: array
          items:
            type: string
          description: >-
            A user-facing list of category names useful for creating richer user
            interfaces.

            Plugins can choose not to implement this
          title: Available package categories
      description: >-
        An AvailablePackageSummary provides a summary of a package available for
        installation

        useful when aggregating many available packages.
      title: AvailablePackageSummary
    v1alpha1Context:
      type: object
      properties:
        cluster:
          type: string
          description: >-
            A cluster name can be provided to target a specific cluster if
            multiple

            clusters are configured, otherwise all clusters will be assumed.
          title: Cluster
        namespace:
          type: string
          description: >-
            A namespace must be provided if the context of the operation is for
            a resource

            or resources in a particular namespace.

            For requests to list items, not including a namespace here implies that the context

            for the request is everything the requesting user can read, though the result can

            be filtered by any filtering options of the request. Plugins may choose to return

            Unimplemented for some queries for which we do not yet have a need.
          title: Namespace
      description: A Context specifies the context of the message
      title: Context
    v1alpha1CreateInstalledPackageRequest:
      type: object
      properties:
        availablePackageRef:
          $ref: "#/components/schemas/v1alpha1AvailablePackageReference"
        targetContext:
          $ref: "#/components/schemas/v1alpha1Context"
        name:
          type: string
          title: A user-provided name for the installed package (eg. project-x-db)
        pkgVersionReference:
          $ref: "#/components/schemas/v1alpha1VersionReference"
        values:
          type: string
          description: >-
            An optional serialized values string to be included when templating
            a package

            in the format expected by the plugin. Included when the backend format doesn't

            use secrets or configmaps for values or supports both. These values are layered

            on top of any values refs above, when relevant.
        reconciliationOptions:
          $ref: "#/components/schemas/v1alpha1ReconciliationOptions"
      description: Request for CreateInstalledPackage
      title: CreateInstalledPackageRequest
    v1alpha1CreateInstalledPackageResponse:
      type: object
      properties:
        installedPackageRef:
          $ref: "#/components/schemas/v1alpha1InstalledPackageReference"
      description: Response for CreateInstalledPackage
      title: CreateInstalledPackageResponse
    v1alpha1DeleteInstalledPackageResponse:
      type: object
      description: Response for DeleteInstalledPackage
      title: DeleteInstalledPackageResponse
    v1alpha1FilterOptions:
      type: object
      properties:
        query:
          type: string
          description: Text query for the request
          title: Text query
        categories:
          type: array
          items:
            type: string
          description: Collection of categories for the request
          title: Categories
        repositories:
          type: array
          items:
            type: string
          description: Collection of repositories where the packages belong to
          title: Repositories
        pkgVersion:
          type: string
          description: Package version for the request
          title: Package version
        appVersion:
          type: string
          description: Packaged app version for the request
          title: App version
      description: FilterOptions available when requesting summaries
      title: FilterOptions
    v1alpha1GetAvailablePackageDetailResponse:
      type: object
      properties:
        availablePackageDetail:
          $ref: "#/components/schemas/v1alpha1AvailablePackageDetail"
      description: Response for GetAvailablePackageDetail
      title: GetAvailablePackageDetailResponse
    v1alpha1GetAvailablePackageSummariesResponse:
      type: object
      properties:
        availablePackageSummaries:
          type: array
          items:
            $ref: "#/components/schemas/v1alpha1AvailablePackageSummary"
          description: List of AvailablePackageSummary
          title: Available packages summaries
        nextPageToken:
          type: string
          description: >-
            This field represents the pagination token to retrieve the next page
            of

            results. If the value is "", it means no further results for the request.
          title: Next page token
        categories:
          type: array
          items:
            type: string
          description: This optional field contains the distinct category names considering
            the FilterOptions.
          title: Categories
      description: Response for GetAvailablePackageSummaries
      title: GetAvailablePackageSummariesResponse
    v1alpha1GetAvailablePackageVersionsResponse:
      type: object
      properties:
        packageAppVersions:
          type: array
          items:
            $ref: "#/components/schemas/v1alpha1PackageAppVersion"
          description: >-
            By default (when version_query is empty or ignored) the response

            should contain an ordered summary of versions including the most recent three

            patch versions of the most recent three minor versions of the most recent three

            major versions when available, something like:

            [
              { pkg_version: "10.3.19", app_version: "2.16.8" },
              { pkg_version: "10.3.18", app_version: "2.16.8" },
              { pkg_version: "10.3.17", app_version: "2.16.7" },
              { pkg_version: "10.2.6", app_version: "2.15.3" },
              { pkg_version: "10.2.5", app_version: "2.15.2" },
              { pkg_version: "10.2.4", app_version: "2.15.2" },
              { pkg_version: "10.1.8", app_version: "2.13.5" },
              { pkg_version: "10.1.7", app_version: "2.13.5" },
              { pkg_version: "10.1.6", app_version: "2.13.5" },
              { pkg_version: "9.5.4", app_version: "2.8.9" },
              ...
              { pkg_version: "8.2.5", app_version: "1.19.5" },
              ...
            ]

            If a version_query is present and the plugin chooses to support it,

            the full history of versions matching the version query should be returned.
          title: Package app versions
      description: Response for GetAvailablePackageVersions
      title: GetAvailablePackageVersionsResponse
    v1alpha1GetConfiguredPluginsResponse:
      type: object
      example:
        plugins:
          - name: kapp_controller.packages
            version: v1alpha1
      properties:
        plugins:
          type: array
          items:
            $ref: "#/components/schemas/v1alpha1Plugin"
          description: List of Plugin
          title: Plugins
      description: Response for GetConfiguredPlugins
      title: GetConfiguredPluginsResponse
    v1alpha1GetInstalledPackageDetailResponse:
      type: object
      properties:
        installedPackageDetail:
          $ref: "#/components/schemas/v1alpha1InstalledPackageDetail"
      description: Response for GetInstalledPackageDetail
      title: GetInstalledPackageDetailResponse
    v1alpha1GetInstalledPackageResourceRefsResponse:
      type: object
      properties:
        context:
          $ref: "#/components/schemas/v1alpha1Context"
        resourceRefs:
          type: array
          items:
            $ref: "#/components/schemas/v1alpha1ResourceRef"
      description: Response for GetInstalledPackageResourceRefs
      title: GetInstalledPackageResourceRefsResponse
    v1alpha1GetInstalledPackageSummariesResponse:
      type: object
      properties:
        installedPackageSummaries:
          type: array
          items:
            $ref: "#/components/schemas/v1alpha1InstalledPackageSummary"
          description: List of InstalledPackageSummary
          title: Installed packages summaries
        nextPageToken:
          type: string
          description: >-
            This field represents the pagination token to retrieve the next page
            of

            results. If the value is "", it means no further results for the request.
          title: Next page token
      description: Response for GetInstalledPackageSummaries
      title: GetInstalledPackageSummariesResponse
    v1alpha1GetResourcesResponse:
      type: object
      properties:
        resourceRef:
          $ref: "#/components/schemas/v1alpha1ResourceRef"
        manifest:
          $ref: "#/components/schemas/protobufAny"
    v1alpha1GetServiceAccountNamesResponse:
      type: object
      properties:
        serviceaccountNames:
          type: array
          items:
            type: string
          description: The list of Service Account names.
          title: ServiceAccountNames
      description: Response for GetServiceAccountNames
      title: GetServiceAccountNamesResponse
    v1alpha1InstalledPackageDetail:
      type: object
      properties:
        installedPackageRef:
          $ref: "#/components/schemas/v1alpha1InstalledPackageReference"
        pkgVersionReference:
          $ref: "#/components/schemas/v1alpha1VersionReference"
        name:
          type: string
          description: The name given to the installed package
          title: Installed package name
        currentVersion:
          $ref: "#/components/schemas/v1alpha1PackageAppVersion"
        valuesApplied:
          type: string
          description: The values applied currently for the installed package.
          title: ValuesApplied
        reconciliationOptions:
          $ref: "#/components/schemas/v1alpha1ReconciliationOptions"
        status:
          $ref: "#/components/schemas/v1alpha1InstalledPackageStatus"
        postInstallationNotes:
          type: string
          description: Optional notes generated by package and intended for the user post
            installation.
          title: PostInstallationNotes
        availablePackageRef:
          $ref: "#/components/schemas/v1alpha1AvailablePackageReference"
        latestMatchingVersion:
          $ref: "#/components/schemas/v1alpha1PackageAppVersion"
        latestVersion:
          $ref: "#/components/schemas/v1alpha1PackageAppVersion"
        customDetail:
          $ref: "#/components/schemas/protobufAny"
      description: >-
        An InstalledPackageDetail includes details about the installed package
        that are

        typically useful when presenting a single installed package.
      title: InstalledPackageDetail
    v1alpha1InstalledPackageReference:
      type: object
      properties:
        context:
          $ref: "#/components/schemas/v1alpha1Context"
        identifier:
          type: string
          description: |-
            The fully qualified identifier for the installed package
            (ie. a unique name for the context).
        plugin:
          $ref: "#/components/schemas/v1alpha1Plugin"
      description: >-
        An InstalledPackageReference has the minimum information required to
        uniquely

        identify an installed package.
      title: InstalledPackageReference
    v1alpha1InstalledPackageStatus:
      type: object
      properties:
        ready:
          type: boolean
          description: An indication of whether the installation is ready or not
          title: Ready
        reason:
          $ref: "#/components/schemas/InstalledPackageStatusStatusReason"
        userReason:
          type: string
          description: Optional text to return for user context, which may be plugin
            specific.
          title: UserReason
      description: An InstalledPackageStatus reports on the current status of the
        installation.
      title: InstalledPackageStatus
    v1alpha1InstalledPackageSummary:
      type: object
      properties:
        installedPackageRef:
          $ref: "#/components/schemas/v1alpha1InstalledPackageReference"
        name:
          type: string
          description: A name given to the installation of the package (eg.
            "my-postgresql-for-testing").
          title: Name
        pkgVersionReference:
          $ref: "#/components/schemas/v1alpha1VersionReference"
        currentVersion:
          $ref: "#/components/schemas/v1alpha1PackageAppVersion"
        iconUrl:
          type: string
          description: A url for an icon.
          title: Installed package icon URL
        pkgDisplayName:
          type: string
          description: The package name as displayed to users (provided by the package, eg.
            "PostgreSQL")
          title: PackageDisplayName
        shortDescription:
          type: string
          description: A short description of the package (provided by the package)
          title: ShortDescription
        latestMatchingVersion:
          $ref: "#/components/schemas/v1alpha1PackageAppVersion"
        latestVersion:
          $ref: "#/components/schemas/v1alpha1PackageAppVersion"
        status:
          $ref: "#/components/schemas/v1alpha1InstalledPackageStatus"
      description: |-
        An InstalledPackageSummary provides a summary of an installed package
        useful when aggregating many installed packages.
      title: InstalledPackageSummary
    v1alpha1Maintainer:
      type: object
      properties:
        name:
          type: string
          description: A maintainer name
          title: Maintainer name
        email:
          type: string
          description: A maintainer email
          title: Maintainer email
      description: Maintainers for the package.
      title: Maintainer
    v1alpha1PackageAppVersion:
      type: object
      properties:
        pkgVersion:
          type: string
          description: Version of the package itself
          title: Package version
        appVersion:
          type: string
          description: Version of the packaged application
          title: Application version
      description: PackageAppVersion conveys both the package version and the packaged app
        version.
      title: Package AppVersion
    v1alpha1PaginationOptions:
      type: object
      properties:
        pageToken:
          type: string
          description: The client uses this field to request a specific page of the list
            results.
          title: Page token
        pageSize:
          type: integer
          format: int32
          description: >-
            Clients use this field to specify the maximum number of results to
            be

            returned by the server. The server may further constrain the maximum number

            of results returned in a single page. If the page_size is 0, the server

            will decide the number of results to be returned.
          title: Page size
      description: >-
        The PaginationOptions based on the example proto at:

        https://cloud.google.com/apis/design/design_patterns#list_pagination

        just encapsulated in a message so it can be reused on different request messages.
      title: PaginationOptions
    v1alpha1Plugin:
      type: object
      example:
        name: kapp_controller.packages
        version: v1alpha1
      properties:
        name:
          type: string
          description: The name of the plugin, such as `fluxv2.packages` or
            `kapp_controller.packages`.
          title: Plugin name
        version:
          type: string
          description: The version of the plugin, such as v1alpha1
          title: Plugin version
      description: A plugin can implement multiple services and multiple versions of a
        service.
      title: Plugin
    v1alpha1ReconciliationOptions:
      type: object
      properties:
        interval:
          type: integer
          format: int32
          description: The interval with which the package is checked for reconciliation
            (in seconds)
          title: Reconciliation Interval
        suspend:
          type: boolean
          description: |-
            Whether reconciliation should be suspended until otherwise enabled.
            This can be utilized to e.g. temporarily ignore chart changes, and
            prevent a Helm release from getting upgraded
          title: Suspend
        serviceAccountName:
          type: string
          description: >-
            A name for a service account in the same namespace which should be
            used

            to perform the reconciliation.
          title: ServiceAccountName
      description: >-
        ReconciliationOptions enable specifying standard fields for backends
        that continuously

        reconcile a package install as new matching versions are released. Most of the naming

        is from the flux HelmReleaseSpec though it maps directly to equivalent fields on Carvel's

        InstalledPackage.
      title: ReconciliationOptions
    v1alpha1ResourceRef:
      type: object
      properties:
        apiVersion:
          type: string
          description: >-
            The APIVersion directly from the resource has the group and version,
            eg. "apps/v1"

            or just the version for core resources.
        kind:
          type: string
          description: >-
            The Kind directly from the templated manifest. Together with the
            APIVersion this

            forms the GroupVersionKind.
        name:
          type: string
          description: The name of the specific resource in the context of the installed
            package.
        namespace:
          type: string
          description: >-
            The namespace of the specific resource in the context of the
            installed

            package. In most cases this will be identical to the namespace of the

            installed package. Exceptions will be non-namespaced resources and packages

            that install resources in other namespaces for special reasons.
      description: >-
        A reference to a Kubernetes resource related to a specific installed
        package.

        The context (cluster) for each resource is that of the related

        installed package.
      title: Resource reference
    v1alpha1RollbackInstalledPackageRequest:
      type: object
      properties:
        installedPackageRef:
          $ref: "#/components/schemas/v1alpha1InstalledPackageReference"
        releaseRevision:
          type: integer
          format: int32
          description: A number identifying the Helm revision to which to rollback.
          title: ReleaseRevision
    v1alpha1RollbackInstalledPackageResponse:
      type: object
      properties:
        installedPackageRef:
          $ref: "#/components/schemas/v1alpha1InstalledPackageReference"
      description: Response for RollbackInstalledPackage
      title: RollbackInstalledPackageResponse
    v1alpha1UpdateInstalledPackageRequest:
      type: object
      properties:
        installedPackageRef:
          $ref: "#/components/schemas/v1alpha1InstalledPackageReference"
        pkgVersionReference:
          $ref: "#/components/schemas/v1alpha1VersionReference"
        values:
          type: string
          description: >-
            An optional serialized values string to be included when templating
            a

            package in the format expected by the plugin. Included when the backend

            format doesn't use secrets or configmaps for values or supports both.

            These values are layered on top of any values refs above, when

            relevant.
        reconciliationOptions:
          $ref: "#/components/schemas/v1alpha1ReconciliationOptions"
      description: >-
        Request for UpdateInstalledPackage. The intent is to reach the desired
        state specified

        by the fields in the request, while leaving other fields intact. This is a whole

        object "Update" semantics rather than "Patch" semantics. The caller will provide the

        values for the fields below, which will replace, or be overlayed onto, the

        corresponding fields in the existing resource. For example, with the

        UpdateInstalledPackageRequest, it is not possible to change just the 'package version

        reference' without also specifying 'values' field. As a side effect, not specifying the

        'values' field in the request means there are no values specified in the desired state.

        So the meaning of each field value is describing the desired state of the corresponding

        field in the resource after the update operation has completed the renconciliation.
      title: UpdateInstalledPackageRequest
    v1alpha1UpdateInstalledPackageResponse:
      type: object
      properties:
        installedPackageRef:
          $ref: "#/components/schemas/v1alpha1InstalledPackageReference"
      description: Response for UpdateInstalledPackage
      title: UpdateInstalledPackageResponse
    v1alpha1VersionReference:
      type: object
      properties:
        version:
          type: string
          description: >-
            The format of the version constraint depends on the backend. For
            example,

            for a flux v2 and Carvel it’s a semver expression, such as ">=10.3 < 10.4"
          title: Version
      description: >-
        A VersionReference defines a version or constraint limiting matching
        versions.

        The reason it is a separate message is so that in the future we can add other

        fields as necessary (such as something similar to Carvel's `prereleases` option

        to its versionSelection).
      title: VersionReference
  requestBodies:
    v1alpha1CreateInstalledPackageRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/v1alpha1CreateInstalledPackageRequest"
      required: true
    v1alpha1UpdateInstalledPackageRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/v1alpha1UpdateInstalledPackageRequest"
      required: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
