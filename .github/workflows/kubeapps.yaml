# Copyright 2022 VMware, Inc.
# SPDX-License-Identifier: Apache-2.0

name: Kubeapps general pipeline

on:
  push:
    branches:
      - main
      - migrate-ci
  pull_request:
    branches:
      - main

env:
  DOCKER_VERSION: "20.10.14"
  DOCKER_REGISTRY_VERSION: "2.8.1"
  DOCKERHUB_NAMESPACE: "kubeapps"
  DOCKERHUB_PERSONAL_NAMESPACE: "beni0888"
  GOLANG_VERSION: "1.18.4"
  HELM_VERSION_MIN: "v3.2.0"
  HELM_VERSION_STABLE: "v3.9.2"
  GITHUB_VERSION: "2.14.2"
  # IMG_DEV_TAG is the tags used for the Kubeapps docker images. Ideally there should be an IMG_PROD_TAG
  # but its value is dynamic and GitHub actions doesn't support it in the `env` block, so it is generated
  # as an output of the `setup` job.
  IMG_DEV_TAG: "build-${{ github.sha }}"
  # Apart from using a dev tag we use a different image ID to avoid polluting the tag
  # history of the production tag
  IMG_MODIFIER: "ci"
  K8S_KIND_VERSION: "v1.22.9@sha256:8135260b959dfe320206eb36b3aeda9cffcb262f4b44cda6b33f7bb73f453105"
  KIND_VERSION: "v0.14.0"
  KUBECTL_VERSION: "v1.22.12"
  MKCERT_VERSION: "v1.4.4"
  NODE_VERSION: "16.16.0"
  OLM_VERSION: "v0.22.0"
  POSTGRESQL_VERSION: "14.4.0-debian-11-r13"
  RUST_VERSION: "1.62.0"
  SEMVER_VERSION: "3.3.0"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      dockerhub_namespace: ${{ steps.set-outputs.outputs.dockerhub_namespace }}
      img_prod_tag: ${{ steps.set-outputs.outputs.img_prod_tag }}
      postgresql_version: ${{ steps.set-outputs.outputs.postgresql_version }}
      rust_version: ${{ steps.set-outputs.outputs.rust_version }}
    steps:
      - name: Set outputs
        id: set-outputs
        run: |
          if [[ ${GITHUB_REPOSITORY} == "vmware-tanzu/kubeapps" ]]; then
            echo "::set-output name=dockerhub_namespace::${DOCKERHUB_NAMESPACE}"
          else
            # When running from forks, we push the images to a personal namespace (if configured)
            echo "::set-output name=dockerhub_namespace::${DOCKERHUB_PERSONAL_NAMESPACE}"
          fi;
          
          if [[ ${GITHUB_REF_TYPE} == "tag" ]]; then
            echo "::set-output name=img_prod_tag::${GITHUB_REF_NAME}"
          else
            echo "::set-output name=img_prod_tag::latest"
          fi;          

          echo "::set-output name=postgresql_version::${POSTGRESQL_VERSION}"
          echo "::set-output name=rust_version::${RUST_VERSION}"
      - name: Show outputs
        run: |
          echo "DOCKERHUB_NAMESPACE: ${{steps.set-outputs.outputs.dockerhub_namespace}}"
          echo "IMG_PROD_TAG: ${{steps.set-outputs.outputs.img_prod_tag}}"
          echo "POSTGRESQL_VERSION: ${{steps.set-outputs.outputs.postgresql_version}}"
          echo "RUST_VERSION: ${{steps.set-outputs.outputs.rust_version}}"

  test_go:
    needs:
      - setup
    runs-on: ubuntu-latest
    services:
      postgresql:
        image: bitnami/postgresql:${{needs.setup.outputs.postgresql_version}}
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
        env:
          ALLOW_EMPTY_PASSWORD: "yes"
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GOLANG_VERSION }}
    - name: Run go unit tests
      run: make test
    - run: make test-db

  test_dashboard:
    runs-on: ubuntu-latest
    needs:
      - setup
    env:
      # Note that the max old space setting is per worker, so running the tests
      # with 4 workers on a 4Gb (free plan) needs 1Gb of max old space. Forcing
      # garbage collection to start earlier with 512M per worker.
      NODE_OPTIONS: "--max-old-space-size=512"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dashboard dependencies
        run: yarn install --cwd=dashboard --frozen-lockfile
      - name: Run dashboard linter
        run: yarn --cwd=dashboard run lint
      - name: Run dashboard unit tests
        run: yarn --cwd=dashboard run test --maxWorkers=4 --coverage --logHeapUsage

  test_pinniped_proxy:
    needs:
      - setup
    runs-on: ubuntu-latest
    container:
      image: rust:${{needs.setup.outputs.rust_version}}
    steps:
      - uses: actions/checkout@v3
      - name: Run rust unit tests
        run: cargo test --manifest-path cmd/pinniped-proxy/Cargo.toml

  test_chart_render:
    needs:
      - setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}

      - name: "Install helm (minimum and stable)"
        run: |
          wget https://get.helm.sh/helm-${HELM_VERSION_MIN}-linux-amd64.tar.gz
          tar zxf helm-$HELM_VERSION_MIN-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/

          wget https://get.helm.sh/helm-${HELM_VERSION_STABLE}-linux-amd64.tar.gz
          tar zxf helm-$HELM_VERSION_STABLE-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm-stable
      - name: Run chart template test
        run: ./script/chart-template-test.sh

  build_go_images:
    name: "Build ${{matrix.image}} image"
    needs:
      - setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [ apprepository-controller, asset-syncer, kubeapps-apis ]
    steps:
      - uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{needs.setup.outputs.dockerhub_namespace}}/${{matrix.image}}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push container image
        uses: docker/build-push-action@v2
        with:
          file: cmd/${{matrix.image}}/Dockerfile
          platforms: linux/amd64, linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/${{matrix.image}}-image.tar
          push: true
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.image}}-image
          path: /tmp/${{matrix.image}}-image.tar















